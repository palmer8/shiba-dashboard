
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model GroupMail
 * 
 */
export type GroupMail = $Result.DefaultSelection<Prisma.$GroupMailPayload>
/**
 * Model PersonalMail
 * 
 */
export type PersonalMail = $Result.DefaultSelection<Prisma.$PersonalMailPayload>
/**
 * Model IpBlock
 * 
 */
export type IpBlock = $Result.DefaultSelection<Prisma.$IpBlockPayload>
/**
 * Model AccountBlock
 * 
 */
export type AccountBlock = $Result.DefaultSelection<Prisma.$AccountBlockPayload>
/**
 * Model CouponGroup
 * 
 */
export type CouponGroup = $Result.DefaultSelection<Prisma.$CouponGroupPayload>
/**
 * Model Coupon
 * 
 */
export type Coupon = $Result.DefaultSelection<Prisma.$CouponPayload>
/**
 * Model CouponLog
 * 
 */
export type CouponLog = $Result.DefaultSelection<Prisma.$CouponLogPayload>
/**
 * Model ItemQuantity
 * 
 */
export type ItemQuantity = $Result.DefaultSelection<Prisma.$ItemQuantityPayload>
/**
 * Model RewardRevoke
 * 
 */
export type RewardRevoke = $Result.DefaultSelection<Prisma.$RewardRevokePayload>
/**
 * Model Items
 * 
 */
export type Items = $Result.DefaultSelection<Prisma.$ItemsPayload>
/**
 * Model Groups
 * 
 */
export type Groups = $Result.DefaultSelection<Prisma.$GroupsPayload>
/**
 * Model CreditManagement
 * 
 */
export type CreditManagement = $Result.DefaultSelection<Prisma.$CreditManagementPayload>
/**
 * Model BlockTicket
 * 
 */
export type BlockTicket = $Result.DefaultSelection<Prisma.$BlockTicketPayload>
/**
 * Model Board
 * 
 */
export type Board = $Result.DefaultSelection<Prisma.$BoardPayload>
/**
 * Model BoardComment
 * 
 */
export type BoardComment = $Result.DefaultSelection<Prisma.$BoardCommentPayload>
/**
 * Model AccountUsingQuerylog
 * 
 */
export type AccountUsingQuerylog = $Result.DefaultSelection<Prisma.$AccountUsingQuerylogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  STAFF: 'STAFF',
  INGAME_ADMIN: 'INGAME_ADMIN',
  MASTER: 'MASTER',
  SUPERMASTER: 'SUPERMASTER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const IpBlockType: {
  BLACKLIST: 'BLACKLIST',
  WHITELIST: 'WHITELIST'
};

export type IpBlockType = (typeof IpBlockType)[keyof typeof IpBlockType]


export const AccountBlockType: {
  CHAT_BLOCK: 'CHAT_BLOCK',
  ACCOUNT_BLOCK: 'ACCOUNT_BLOCK',
  CHAT_UNBLOCK: 'CHAT_UNBLOCK',
  ACCOUNT_UNBLOCK: 'ACCOUNT_UNBLOCK'
};

export type AccountBlockType = (typeof AccountBlockType)[keyof typeof AccountBlockType]


export const CouponGroupType: {
  COMMON: 'COMMON',
  PUBLIC: 'PUBLIC'
};

export type CouponGroupType = (typeof CouponGroupType)[keyof typeof CouponGroupType]


export const CouponGroupStatus: {
  INACTIVE: 'INACTIVE',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED'
};

export type CouponGroupStatus = (typeof CouponGroupStatus)[keyof typeof CouponGroupStatus]


export const ActionType: {
  ADD: 'ADD',
  REMOVE: 'REMOVE'
};

export type ActionType = (typeof ActionType)[keyof typeof ActionType]


export const Status: {
  CANCELLED: 'CANCELLED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  APPROVED: 'APPROVED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const RewardRevokeCreditType: {
  MONEY: 'MONEY',
  BANKMONEY: 'BANKMONEY',
  CREDIT: 'CREDIT',
  CREDIT2: 'CREDIT2',
  ITEM: 'ITEM'
};

export type RewardRevokeCreditType = (typeof RewardRevokeCreditType)[keyof typeof RewardRevokeCreditType]


export const CreditType: {
  MONEY: 'MONEY',
  BANKMONEY: 'BANKMONEY',
  CREDIT: 'CREDIT',
  CREDIT2: 'CREDIT2',
  CURRENT_COIN: 'CURRENT_COIN'
};

export type CreditType = (typeof CreditType)[keyof typeof CreditType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type IpBlockType = $Enums.IpBlockType

export const IpBlockType: typeof $Enums.IpBlockType

export type AccountBlockType = $Enums.AccountBlockType

export const AccountBlockType: typeof $Enums.AccountBlockType

export type CouponGroupType = $Enums.CouponGroupType

export const CouponGroupType: typeof $Enums.CouponGroupType

export type CouponGroupStatus = $Enums.CouponGroupStatus

export const CouponGroupStatus: typeof $Enums.CouponGroupStatus

export type ActionType = $Enums.ActionType

export const ActionType: typeof $Enums.ActionType

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type RewardRevokeCreditType = $Enums.RewardRevokeCreditType

export const RewardRevokeCreditType: typeof $Enums.RewardRevokeCreditType

export type CreditType = $Enums.CreditType

export const CreditType: typeof $Enums.CreditType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.groupMail`: Exposes CRUD operations for the **GroupMail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupMails
    * const groupMails = await prisma.groupMail.findMany()
    * ```
    */
  get groupMail(): Prisma.GroupMailDelegate<ExtArgs>;

  /**
   * `prisma.personalMail`: Exposes CRUD operations for the **PersonalMail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalMails
    * const personalMails = await prisma.personalMail.findMany()
    * ```
    */
  get personalMail(): Prisma.PersonalMailDelegate<ExtArgs>;

  /**
   * `prisma.ipBlock`: Exposes CRUD operations for the **IpBlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IpBlocks
    * const ipBlocks = await prisma.ipBlock.findMany()
    * ```
    */
  get ipBlock(): Prisma.IpBlockDelegate<ExtArgs>;

  /**
   * `prisma.accountBlock`: Exposes CRUD operations for the **AccountBlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountBlocks
    * const accountBlocks = await prisma.accountBlock.findMany()
    * ```
    */
  get accountBlock(): Prisma.AccountBlockDelegate<ExtArgs>;

  /**
   * `prisma.couponGroup`: Exposes CRUD operations for the **CouponGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CouponGroups
    * const couponGroups = await prisma.couponGroup.findMany()
    * ```
    */
  get couponGroup(): Prisma.CouponGroupDelegate<ExtArgs>;

  /**
   * `prisma.coupon`: Exposes CRUD operations for the **Coupon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coupons
    * const coupons = await prisma.coupon.findMany()
    * ```
    */
  get coupon(): Prisma.CouponDelegate<ExtArgs>;

  /**
   * `prisma.couponLog`: Exposes CRUD operations for the **CouponLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CouponLogs
    * const couponLogs = await prisma.couponLog.findMany()
    * ```
    */
  get couponLog(): Prisma.CouponLogDelegate<ExtArgs>;

  /**
   * `prisma.itemQuantity`: Exposes CRUD operations for the **ItemQuantity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemQuantities
    * const itemQuantities = await prisma.itemQuantity.findMany()
    * ```
    */
  get itemQuantity(): Prisma.ItemQuantityDelegate<ExtArgs>;

  /**
   * `prisma.rewardRevoke`: Exposes CRUD operations for the **RewardRevoke** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RewardRevokes
    * const rewardRevokes = await prisma.rewardRevoke.findMany()
    * ```
    */
  get rewardRevoke(): Prisma.RewardRevokeDelegate<ExtArgs>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.ItemsDelegate<ExtArgs>;

  /**
   * `prisma.groups`: Exposes CRUD operations for the **Groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.GroupsDelegate<ExtArgs>;

  /**
   * `prisma.creditManagement`: Exposes CRUD operations for the **CreditManagement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditManagements
    * const creditManagements = await prisma.creditManagement.findMany()
    * ```
    */
  get creditManagement(): Prisma.CreditManagementDelegate<ExtArgs>;

  /**
   * `prisma.blockTicket`: Exposes CRUD operations for the **BlockTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlockTickets
    * const blockTickets = await prisma.blockTicket.findMany()
    * ```
    */
  get blockTicket(): Prisma.BlockTicketDelegate<ExtArgs>;

  /**
   * `prisma.board`: Exposes CRUD operations for the **Board** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.board.findMany()
    * ```
    */
  get board(): Prisma.BoardDelegate<ExtArgs>;

  /**
   * `prisma.boardComment`: Exposes CRUD operations for the **BoardComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardComments
    * const boardComments = await prisma.boardComment.findMany()
    * ```
    */
  get boardComment(): Prisma.BoardCommentDelegate<ExtArgs>;

  /**
   * `prisma.accountUsingQuerylog`: Exposes CRUD operations for the **AccountUsingQuerylog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountUsingQuerylogs
    * const accountUsingQuerylogs = await prisma.accountUsingQuerylog.findMany()
    * ```
    */
  get accountUsingQuerylog(): Prisma.AccountUsingQuerylogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    GroupMail: 'GroupMail',
    PersonalMail: 'PersonalMail',
    IpBlock: 'IpBlock',
    AccountBlock: 'AccountBlock',
    CouponGroup: 'CouponGroup',
    Coupon: 'Coupon',
    CouponLog: 'CouponLog',
    ItemQuantity: 'ItemQuantity',
    RewardRevoke: 'RewardRevoke',
    Items: 'Items',
    Groups: 'Groups',
    CreditManagement: 'CreditManagement',
    BlockTicket: 'BlockTicket',
    Board: 'Board',
    BoardComment: 'BoardComment',
    AccountUsingQuerylog: 'AccountUsingQuerylog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "groupMail" | "personalMail" | "ipBlock" | "accountBlock" | "couponGroup" | "coupon" | "couponLog" | "itemQuantity" | "rewardRevoke" | "items" | "groups" | "creditManagement" | "blockTicket" | "board" | "boardComment" | "accountUsingQuerylog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      GroupMail: {
        payload: Prisma.$GroupMailPayload<ExtArgs>
        fields: Prisma.GroupMailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupMailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupMailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          findFirst: {
            args: Prisma.GroupMailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupMailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          findMany: {
            args: Prisma.GroupMailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>[]
          }
          create: {
            args: Prisma.GroupMailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          createMany: {
            args: Prisma.GroupMailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupMailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>[]
          }
          delete: {
            args: Prisma.GroupMailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          update: {
            args: Prisma.GroupMailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          deleteMany: {
            args: Prisma.GroupMailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupMailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupMailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupMailPayload>
          }
          aggregate: {
            args: Prisma.GroupMailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupMail>
          }
          groupBy: {
            args: Prisma.GroupMailGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupMailGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupMailCountArgs<ExtArgs>
            result: $Utils.Optional<GroupMailCountAggregateOutputType> | number
          }
        }
      }
      PersonalMail: {
        payload: Prisma.$PersonalMailPayload<ExtArgs>
        fields: Prisma.PersonalMailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalMailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalMailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          findFirst: {
            args: Prisma.PersonalMailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalMailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          findMany: {
            args: Prisma.PersonalMailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>[]
          }
          create: {
            args: Prisma.PersonalMailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          createMany: {
            args: Prisma.PersonalMailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalMailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>[]
          }
          delete: {
            args: Prisma.PersonalMailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          update: {
            args: Prisma.PersonalMailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          deleteMany: {
            args: Prisma.PersonalMailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalMailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PersonalMailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalMailPayload>
          }
          aggregate: {
            args: Prisma.PersonalMailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonalMail>
          }
          groupBy: {
            args: Prisma.PersonalMailGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalMailGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalMailCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalMailCountAggregateOutputType> | number
          }
        }
      }
      IpBlock: {
        payload: Prisma.$IpBlockPayload<ExtArgs>
        fields: Prisma.IpBlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IpBlockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IpBlockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          findFirst: {
            args: Prisma.IpBlockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IpBlockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          findMany: {
            args: Prisma.IpBlockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>[]
          }
          create: {
            args: Prisma.IpBlockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          createMany: {
            args: Prisma.IpBlockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IpBlockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>[]
          }
          delete: {
            args: Prisma.IpBlockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          update: {
            args: Prisma.IpBlockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          deleteMany: {
            args: Prisma.IpBlockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IpBlockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IpBlockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IpBlockPayload>
          }
          aggregate: {
            args: Prisma.IpBlockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIpBlock>
          }
          groupBy: {
            args: Prisma.IpBlockGroupByArgs<ExtArgs>
            result: $Utils.Optional<IpBlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.IpBlockCountArgs<ExtArgs>
            result: $Utils.Optional<IpBlockCountAggregateOutputType> | number
          }
        }
      }
      AccountBlock: {
        payload: Prisma.$AccountBlockPayload<ExtArgs>
        fields: Prisma.AccountBlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountBlockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountBlockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          findFirst: {
            args: Prisma.AccountBlockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountBlockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          findMany: {
            args: Prisma.AccountBlockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>[]
          }
          create: {
            args: Prisma.AccountBlockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          createMany: {
            args: Prisma.AccountBlockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountBlockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>[]
          }
          delete: {
            args: Prisma.AccountBlockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          update: {
            args: Prisma.AccountBlockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          deleteMany: {
            args: Prisma.AccountBlockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountBlockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountBlockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBlockPayload>
          }
          aggregate: {
            args: Prisma.AccountBlockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountBlock>
          }
          groupBy: {
            args: Prisma.AccountBlockGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountBlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountBlockCountArgs<ExtArgs>
            result: $Utils.Optional<AccountBlockCountAggregateOutputType> | number
          }
        }
      }
      CouponGroup: {
        payload: Prisma.$CouponGroupPayload<ExtArgs>
        fields: Prisma.CouponGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CouponGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CouponGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          findFirst: {
            args: Prisma.CouponGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CouponGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          findMany: {
            args: Prisma.CouponGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>[]
          }
          create: {
            args: Prisma.CouponGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          createMany: {
            args: Prisma.CouponGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CouponGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>[]
          }
          delete: {
            args: Prisma.CouponGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          update: {
            args: Prisma.CouponGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          deleteMany: {
            args: Prisma.CouponGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CouponGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CouponGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponGroupPayload>
          }
          aggregate: {
            args: Prisma.CouponGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCouponGroup>
          }
          groupBy: {
            args: Prisma.CouponGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouponGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.CouponGroupCountArgs<ExtArgs>
            result: $Utils.Optional<CouponGroupCountAggregateOutputType> | number
          }
        }
      }
      Coupon: {
        payload: Prisma.$CouponPayload<ExtArgs>
        fields: Prisma.CouponFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CouponFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CouponFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          findFirst: {
            args: Prisma.CouponFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CouponFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          findMany: {
            args: Prisma.CouponFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>[]
          }
          create: {
            args: Prisma.CouponCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          createMany: {
            args: Prisma.CouponCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CouponCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>[]
          }
          delete: {
            args: Prisma.CouponDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          update: {
            args: Prisma.CouponUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          deleteMany: {
            args: Prisma.CouponDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CouponUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CouponUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponPayload>
          }
          aggregate: {
            args: Prisma.CouponAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoupon>
          }
          groupBy: {
            args: Prisma.CouponGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouponGroupByOutputType>[]
          }
          count: {
            args: Prisma.CouponCountArgs<ExtArgs>
            result: $Utils.Optional<CouponCountAggregateOutputType> | number
          }
        }
      }
      CouponLog: {
        payload: Prisma.$CouponLogPayload<ExtArgs>
        fields: Prisma.CouponLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CouponLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CouponLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          findFirst: {
            args: Prisma.CouponLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CouponLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          findMany: {
            args: Prisma.CouponLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>[]
          }
          create: {
            args: Prisma.CouponLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          createMany: {
            args: Prisma.CouponLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CouponLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>[]
          }
          delete: {
            args: Prisma.CouponLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          update: {
            args: Prisma.CouponLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          deleteMany: {
            args: Prisma.CouponLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CouponLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CouponLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponLogPayload>
          }
          aggregate: {
            args: Prisma.CouponLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCouponLog>
          }
          groupBy: {
            args: Prisma.CouponLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouponLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CouponLogCountArgs<ExtArgs>
            result: $Utils.Optional<CouponLogCountAggregateOutputType> | number
          }
        }
      }
      ItemQuantity: {
        payload: Prisma.$ItemQuantityPayload<ExtArgs>
        fields: Prisma.ItemQuantityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemQuantityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemQuantityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          findFirst: {
            args: Prisma.ItemQuantityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemQuantityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          findMany: {
            args: Prisma.ItemQuantityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>[]
          }
          create: {
            args: Prisma.ItemQuantityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          createMany: {
            args: Prisma.ItemQuantityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemQuantityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>[]
          }
          delete: {
            args: Prisma.ItemQuantityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          update: {
            args: Prisma.ItemQuantityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          deleteMany: {
            args: Prisma.ItemQuantityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemQuantityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemQuantityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemQuantityPayload>
          }
          aggregate: {
            args: Prisma.ItemQuantityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemQuantity>
          }
          groupBy: {
            args: Prisma.ItemQuantityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemQuantityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemQuantityCountArgs<ExtArgs>
            result: $Utils.Optional<ItemQuantityCountAggregateOutputType> | number
          }
        }
      }
      RewardRevoke: {
        payload: Prisma.$RewardRevokePayload<ExtArgs>
        fields: Prisma.RewardRevokeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RewardRevokeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RewardRevokeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          findFirst: {
            args: Prisma.RewardRevokeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RewardRevokeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          findMany: {
            args: Prisma.RewardRevokeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>[]
          }
          create: {
            args: Prisma.RewardRevokeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          createMany: {
            args: Prisma.RewardRevokeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RewardRevokeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>[]
          }
          delete: {
            args: Prisma.RewardRevokeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          update: {
            args: Prisma.RewardRevokeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          deleteMany: {
            args: Prisma.RewardRevokeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RewardRevokeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RewardRevokeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RewardRevokePayload>
          }
          aggregate: {
            args: Prisma.RewardRevokeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRewardRevoke>
          }
          groupBy: {
            args: Prisma.RewardRevokeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RewardRevokeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RewardRevokeCountArgs<ExtArgs>
            result: $Utils.Optional<RewardRevokeCountAggregateOutputType> | number
          }
        }
      }
      Items: {
        payload: Prisma.$ItemsPayload<ExtArgs>
        fields: Prisma.ItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findFirst: {
            args: Prisma.ItemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          findMany: {
            args: Prisma.ItemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          create: {
            args: Prisma.ItemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          createMany: {
            args: Prisma.ItemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>[]
          }
          delete: {
            args: Prisma.ItemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          update: {
            args: Prisma.ItemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          deleteMany: {
            args: Prisma.ItemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemsPayload>
          }
          aggregate: {
            args: Prisma.ItemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItems>
          }
          groupBy: {
            args: Prisma.ItemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemsCountArgs<ExtArgs>
            result: $Utils.Optional<ItemsCountAggregateOutputType> | number
          }
        }
      }
      Groups: {
        payload: Prisma.$GroupsPayload<ExtArgs>
        fields: Prisma.GroupsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          findFirst: {
            args: Prisma.GroupsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          findMany: {
            args: Prisma.GroupsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>[]
          }
          create: {
            args: Prisma.GroupsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          createMany: {
            args: Prisma.GroupsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>[]
          }
          delete: {
            args: Prisma.GroupsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          update: {
            args: Prisma.GroupsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          deleteMany: {
            args: Prisma.GroupsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupsPayload>
          }
          aggregate: {
            args: Prisma.GroupsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroups>
          }
          groupBy: {
            args: Prisma.GroupsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupsCountArgs<ExtArgs>
            result: $Utils.Optional<GroupsCountAggregateOutputType> | number
          }
        }
      }
      CreditManagement: {
        payload: Prisma.$CreditManagementPayload<ExtArgs>
        fields: Prisma.CreditManagementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditManagementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditManagementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          findFirst: {
            args: Prisma.CreditManagementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditManagementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          findMany: {
            args: Prisma.CreditManagementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>[]
          }
          create: {
            args: Prisma.CreditManagementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          createMany: {
            args: Prisma.CreditManagementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CreditManagementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>[]
          }
          delete: {
            args: Prisma.CreditManagementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          update: {
            args: Prisma.CreditManagementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          deleteMany: {
            args: Prisma.CreditManagementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditManagementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CreditManagementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditManagementPayload>
          }
          aggregate: {
            args: Prisma.CreditManagementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditManagement>
          }
          groupBy: {
            args: Prisma.CreditManagementGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditManagementGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditManagementCountArgs<ExtArgs>
            result: $Utils.Optional<CreditManagementCountAggregateOutputType> | number
          }
        }
      }
      BlockTicket: {
        payload: Prisma.$BlockTicketPayload<ExtArgs>
        fields: Prisma.BlockTicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlockTicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlockTicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          findFirst: {
            args: Prisma.BlockTicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlockTicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          findMany: {
            args: Prisma.BlockTicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>[]
          }
          create: {
            args: Prisma.BlockTicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          createMany: {
            args: Prisma.BlockTicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BlockTicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>[]
          }
          delete: {
            args: Prisma.BlockTicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          update: {
            args: Prisma.BlockTicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          deleteMany: {
            args: Prisma.BlockTicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BlockTicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BlockTicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlockTicketPayload>
          }
          aggregate: {
            args: Prisma.BlockTicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBlockTicket>
          }
          groupBy: {
            args: Prisma.BlockTicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<BlockTicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlockTicketCountArgs<ExtArgs>
            result: $Utils.Optional<BlockTicketCountAggregateOutputType> | number
          }
        }
      }
      Board: {
        payload: Prisma.$BoardPayload<ExtArgs>
        fields: Prisma.BoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findFirst: {
            args: Prisma.BoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findMany: {
            args: Prisma.BoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          create: {
            args: Prisma.BoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          createMany: {
            args: Prisma.BoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          delete: {
            args: Prisma.BoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          update: {
            args: Prisma.BoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          deleteMany: {
            args: Prisma.BoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          aggregate: {
            args: Prisma.BoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoard>
          }
          groupBy: {
            args: Prisma.BoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardCountArgs<ExtArgs>
            result: $Utils.Optional<BoardCountAggregateOutputType> | number
          }
        }
      }
      BoardComment: {
        payload: Prisma.$BoardCommentPayload<ExtArgs>
        fields: Prisma.BoardCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          findFirst: {
            args: Prisma.BoardCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          findMany: {
            args: Prisma.BoardCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>[]
          }
          create: {
            args: Prisma.BoardCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          createMany: {
            args: Prisma.BoardCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>[]
          }
          delete: {
            args: Prisma.BoardCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          update: {
            args: Prisma.BoardCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          deleteMany: {
            args: Prisma.BoardCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoardCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardCommentPayload>
          }
          aggregate: {
            args: Prisma.BoardCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoardComment>
          }
          groupBy: {
            args: Prisma.BoardCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardCommentCountArgs<ExtArgs>
            result: $Utils.Optional<BoardCommentCountAggregateOutputType> | number
          }
        }
      }
      AccountUsingQuerylog: {
        payload: Prisma.$AccountUsingQuerylogPayload<ExtArgs>
        fields: Prisma.AccountUsingQuerylogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountUsingQuerylogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountUsingQuerylogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          findFirst: {
            args: Prisma.AccountUsingQuerylogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountUsingQuerylogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          findMany: {
            args: Prisma.AccountUsingQuerylogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>[]
          }
          create: {
            args: Prisma.AccountUsingQuerylogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          createMany: {
            args: Prisma.AccountUsingQuerylogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountUsingQuerylogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>[]
          }
          delete: {
            args: Prisma.AccountUsingQuerylogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          update: {
            args: Prisma.AccountUsingQuerylogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          deleteMany: {
            args: Prisma.AccountUsingQuerylogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUsingQuerylogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUsingQuerylogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountUsingQuerylogPayload>
          }
          aggregate: {
            args: Prisma.AccountUsingQuerylogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountUsingQuerylog>
          }
          groupBy: {
            args: Prisma.AccountUsingQuerylogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountUsingQuerylogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountUsingQuerylogCountArgs<ExtArgs>
            result: $Utils.Optional<AccountUsingQuerylogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    accountUsingQuerylogs: number
    groupMails: number
    personalMails: number
    ipBlocks: number
    accountBlocks: number
    registeredItemQuantities: number
    approvedItemQuantities: number
    registeredCreditManagements: number
    approvedCreditManagements: number
    registeredBlockTickets: number
    approvedBlockTickets: number
    registeredRewardRevokes: number
    approvedRewardRevokes: number
    boards: number
    boardComments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accountUsingQuerylogs?: boolean | UserCountOutputTypeCountAccountUsingQuerylogsArgs
    groupMails?: boolean | UserCountOutputTypeCountGroupMailsArgs
    personalMails?: boolean | UserCountOutputTypeCountPersonalMailsArgs
    ipBlocks?: boolean | UserCountOutputTypeCountIpBlocksArgs
    accountBlocks?: boolean | UserCountOutputTypeCountAccountBlocksArgs
    registeredItemQuantities?: boolean | UserCountOutputTypeCountRegisteredItemQuantitiesArgs
    approvedItemQuantities?: boolean | UserCountOutputTypeCountApprovedItemQuantitiesArgs
    registeredCreditManagements?: boolean | UserCountOutputTypeCountRegisteredCreditManagementsArgs
    approvedCreditManagements?: boolean | UserCountOutputTypeCountApprovedCreditManagementsArgs
    registeredBlockTickets?: boolean | UserCountOutputTypeCountRegisteredBlockTicketsArgs
    approvedBlockTickets?: boolean | UserCountOutputTypeCountApprovedBlockTicketsArgs
    registeredRewardRevokes?: boolean | UserCountOutputTypeCountRegisteredRewardRevokesArgs
    approvedRewardRevokes?: boolean | UserCountOutputTypeCountApprovedRewardRevokesArgs
    boards?: boolean | UserCountOutputTypeCountBoardsArgs
    boardComments?: boolean | UserCountOutputTypeCountBoardCommentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountUsingQuerylogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountUsingQuerylogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupMailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMailWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPersonalMailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalMailWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIpBlocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IpBlockWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountBlocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountBlockWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredItemQuantitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemQuantityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedItemQuantitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemQuantityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredCreditManagementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditManagementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedCreditManagementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditManagementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredBlockTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlockTicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedBlockTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlockTicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredRewardRevokesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardRevokeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedRewardRevokesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardRevokeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardCommentWhereInput
  }


  /**
   * Count Type CouponGroupCountOutputType
   */

  export type CouponGroupCountOutputType = {
    coupons: number
  }

  export type CouponGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupons?: boolean | CouponGroupCountOutputTypeCountCouponsArgs
  }

  // Custom InputTypes
  /**
   * CouponGroupCountOutputType without action
   */
  export type CouponGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroupCountOutputType
     */
    select?: CouponGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CouponGroupCountOutputType without action
   */
  export type CouponGroupCountOutputTypeCountCouponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponWhereInput
  }


  /**
   * Count Type CouponCountOutputType
   */

  export type CouponCountOutputType = {
    couponLogs: number
  }

  export type CouponCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    couponLogs?: boolean | CouponCountOutputTypeCountCouponLogsArgs
  }

  // Custom InputTypes
  /**
   * CouponCountOutputType without action
   */
  export type CouponCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponCountOutputType
     */
    select?: CouponCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CouponCountOutputType without action
   */
  export type CouponCountOutputTypeCountCouponLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponLogWhereInput
  }


  /**
   * Count Type BoardCountOutputType
   */

  export type BoardCountOutputType = {
    comments: number
  }

  export type BoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | BoardCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardCountOutputType
     */
    select?: BoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardCommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    hashedPassword: string | null
    email: string | null
    userId: number | null
    emailVerified: Date | null
    nickname: string | null
    image: string | null
    role: $Enums.UserRole | null
    isPermissive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    hashedPassword: string | null
    email: string | null
    userId: number | null
    emailVerified: Date | null
    nickname: string | null
    image: string | null
    role: $Enums.UserRole | null
    isPermissive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    hashedPassword: number
    email: number
    userId: number
    emailVerified: number
    nickname: number
    image: number
    role: number
    isPermissive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    hashedPassword?: true
    email?: true
    userId?: true
    emailVerified?: true
    nickname?: true
    image?: true
    role?: true
    isPermissive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    hashedPassword?: true
    email?: true
    userId?: true
    emailVerified?: true
    nickname?: true
    image?: true
    role?: true
    isPermissive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    hashedPassword?: true
    email?: true
    userId?: true
    emailVerified?: true
    nickname?: true
    image?: true
    role?: true
    isPermissive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    hashedPassword: string | null
    email: string | null
    userId: number
    emailVerified: Date | null
    nickname: string
    image: string | null
    role: $Enums.UserRole
    isPermissive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    hashedPassword?: boolean
    email?: boolean
    userId?: boolean
    emailVerified?: boolean
    nickname?: boolean
    image?: boolean
    role?: boolean
    isPermissive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accountUsingQuerylogs?: boolean | User$accountUsingQuerylogsArgs<ExtArgs>
    groupMails?: boolean | User$groupMailsArgs<ExtArgs>
    personalMails?: boolean | User$personalMailsArgs<ExtArgs>
    ipBlocks?: boolean | User$ipBlocksArgs<ExtArgs>
    accountBlocks?: boolean | User$accountBlocksArgs<ExtArgs>
    registeredItemQuantities?: boolean | User$registeredItemQuantitiesArgs<ExtArgs>
    approvedItemQuantities?: boolean | User$approvedItemQuantitiesArgs<ExtArgs>
    registeredCreditManagements?: boolean | User$registeredCreditManagementsArgs<ExtArgs>
    approvedCreditManagements?: boolean | User$approvedCreditManagementsArgs<ExtArgs>
    registeredBlockTickets?: boolean | User$registeredBlockTicketsArgs<ExtArgs>
    approvedBlockTickets?: boolean | User$approvedBlockTicketsArgs<ExtArgs>
    registeredRewardRevokes?: boolean | User$registeredRewardRevokesArgs<ExtArgs>
    approvedRewardRevokes?: boolean | User$approvedRewardRevokesArgs<ExtArgs>
    boards?: boolean | User$boardsArgs<ExtArgs>
    boardComments?: boolean | User$boardCommentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    hashedPassword?: boolean
    email?: boolean
    userId?: boolean
    emailVerified?: boolean
    nickname?: boolean
    image?: boolean
    role?: boolean
    isPermissive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    hashedPassword?: boolean
    email?: boolean
    userId?: boolean
    emailVerified?: boolean
    nickname?: boolean
    image?: boolean
    role?: boolean
    isPermissive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accountUsingQuerylogs?: boolean | User$accountUsingQuerylogsArgs<ExtArgs>
    groupMails?: boolean | User$groupMailsArgs<ExtArgs>
    personalMails?: boolean | User$personalMailsArgs<ExtArgs>
    ipBlocks?: boolean | User$ipBlocksArgs<ExtArgs>
    accountBlocks?: boolean | User$accountBlocksArgs<ExtArgs>
    registeredItemQuantities?: boolean | User$registeredItemQuantitiesArgs<ExtArgs>
    approvedItemQuantities?: boolean | User$approvedItemQuantitiesArgs<ExtArgs>
    registeredCreditManagements?: boolean | User$registeredCreditManagementsArgs<ExtArgs>
    approvedCreditManagements?: boolean | User$approvedCreditManagementsArgs<ExtArgs>
    registeredBlockTickets?: boolean | User$registeredBlockTicketsArgs<ExtArgs>
    approvedBlockTickets?: boolean | User$approvedBlockTicketsArgs<ExtArgs>
    registeredRewardRevokes?: boolean | User$registeredRewardRevokesArgs<ExtArgs>
    approvedRewardRevokes?: boolean | User$approvedRewardRevokesArgs<ExtArgs>
    boards?: boolean | User$boardsArgs<ExtArgs>
    boardComments?: boolean | User$boardCommentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accountUsingQuerylogs: Prisma.$AccountUsingQuerylogPayload<ExtArgs>[]
      groupMails: Prisma.$GroupMailPayload<ExtArgs>[]
      personalMails: Prisma.$PersonalMailPayload<ExtArgs>[]
      ipBlocks: Prisma.$IpBlockPayload<ExtArgs>[]
      accountBlocks: Prisma.$AccountBlockPayload<ExtArgs>[]
      registeredItemQuantities: Prisma.$ItemQuantityPayload<ExtArgs>[]
      approvedItemQuantities: Prisma.$ItemQuantityPayload<ExtArgs>[]
      registeredCreditManagements: Prisma.$CreditManagementPayload<ExtArgs>[]
      approvedCreditManagements: Prisma.$CreditManagementPayload<ExtArgs>[]
      registeredBlockTickets: Prisma.$BlockTicketPayload<ExtArgs>[]
      approvedBlockTickets: Prisma.$BlockTicketPayload<ExtArgs>[]
      registeredRewardRevokes: Prisma.$RewardRevokePayload<ExtArgs>[]
      approvedRewardRevokes: Prisma.$RewardRevokePayload<ExtArgs>[]
      boards: Prisma.$BoardPayload<ExtArgs>[]
      boardComments: Prisma.$BoardCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      hashedPassword: string | null
      email: string | null
      userId: number
      emailVerified: Date | null
      nickname: string
      image: string | null
      role: $Enums.UserRole
      isPermissive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    accountUsingQuerylogs<T extends User$accountUsingQuerylogsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountUsingQuerylogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findMany"> | Null>
    groupMails<T extends User$groupMailsArgs<ExtArgs> = {}>(args?: Subset<T, User$groupMailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findMany"> | Null>
    personalMails<T extends User$personalMailsArgs<ExtArgs> = {}>(args?: Subset<T, User$personalMailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findMany"> | Null>
    ipBlocks<T extends User$ipBlocksArgs<ExtArgs> = {}>(args?: Subset<T, User$ipBlocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findMany"> | Null>
    accountBlocks<T extends User$accountBlocksArgs<ExtArgs> = {}>(args?: Subset<T, User$accountBlocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findMany"> | Null>
    registeredItemQuantities<T extends User$registeredItemQuantitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredItemQuantitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findMany"> | Null>
    approvedItemQuantities<T extends User$approvedItemQuantitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedItemQuantitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findMany"> | Null>
    registeredCreditManagements<T extends User$registeredCreditManagementsArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredCreditManagementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findMany"> | Null>
    approvedCreditManagements<T extends User$approvedCreditManagementsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedCreditManagementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findMany"> | Null>
    registeredBlockTickets<T extends User$registeredBlockTicketsArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredBlockTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findMany"> | Null>
    approvedBlockTickets<T extends User$approvedBlockTicketsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedBlockTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findMany"> | Null>
    registeredRewardRevokes<T extends User$registeredRewardRevokesArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredRewardRevokesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findMany"> | Null>
    approvedRewardRevokes<T extends User$approvedRewardRevokesArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedRewardRevokesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findMany"> | Null>
    boards<T extends User$boardsArgs<ExtArgs> = {}>(args?: Subset<T, User$boardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany"> | Null>
    boardComments<T extends User$boardCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$boardCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly userId: FieldRef<"User", 'Int'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isPermissive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accountUsingQuerylogs
   */
  export type User$accountUsingQuerylogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    where?: AccountUsingQuerylogWhereInput
    orderBy?: AccountUsingQuerylogOrderByWithRelationInput | AccountUsingQuerylogOrderByWithRelationInput[]
    cursor?: AccountUsingQuerylogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountUsingQuerylogScalarFieldEnum | AccountUsingQuerylogScalarFieldEnum[]
  }

  /**
   * User.groupMails
   */
  export type User$groupMailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    where?: GroupMailWhereInput
    orderBy?: GroupMailOrderByWithRelationInput | GroupMailOrderByWithRelationInput[]
    cursor?: GroupMailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupMailScalarFieldEnum | GroupMailScalarFieldEnum[]
  }

  /**
   * User.personalMails
   */
  export type User$personalMailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    where?: PersonalMailWhereInput
    orderBy?: PersonalMailOrderByWithRelationInput | PersonalMailOrderByWithRelationInput[]
    cursor?: PersonalMailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonalMailScalarFieldEnum | PersonalMailScalarFieldEnum[]
  }

  /**
   * User.ipBlocks
   */
  export type User$ipBlocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    where?: IpBlockWhereInput
    orderBy?: IpBlockOrderByWithRelationInput | IpBlockOrderByWithRelationInput[]
    cursor?: IpBlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IpBlockScalarFieldEnum | IpBlockScalarFieldEnum[]
  }

  /**
   * User.accountBlocks
   */
  export type User$accountBlocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    where?: AccountBlockWhereInput
    orderBy?: AccountBlockOrderByWithRelationInput | AccountBlockOrderByWithRelationInput[]
    cursor?: AccountBlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountBlockScalarFieldEnum | AccountBlockScalarFieldEnum[]
  }

  /**
   * User.registeredItemQuantities
   */
  export type User$registeredItemQuantitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    where?: ItemQuantityWhereInput
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    cursor?: ItemQuantityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemQuantityScalarFieldEnum | ItemQuantityScalarFieldEnum[]
  }

  /**
   * User.approvedItemQuantities
   */
  export type User$approvedItemQuantitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    where?: ItemQuantityWhereInput
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    cursor?: ItemQuantityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemQuantityScalarFieldEnum | ItemQuantityScalarFieldEnum[]
  }

  /**
   * User.registeredCreditManagements
   */
  export type User$registeredCreditManagementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    where?: CreditManagementWhereInput
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    cursor?: CreditManagementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreditManagementScalarFieldEnum | CreditManagementScalarFieldEnum[]
  }

  /**
   * User.approvedCreditManagements
   */
  export type User$approvedCreditManagementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    where?: CreditManagementWhereInput
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    cursor?: CreditManagementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreditManagementScalarFieldEnum | CreditManagementScalarFieldEnum[]
  }

  /**
   * User.registeredBlockTickets
   */
  export type User$registeredBlockTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    where?: BlockTicketWhereInput
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    cursor?: BlockTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlockTicketScalarFieldEnum | BlockTicketScalarFieldEnum[]
  }

  /**
   * User.approvedBlockTickets
   */
  export type User$approvedBlockTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    where?: BlockTicketWhereInput
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    cursor?: BlockTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlockTicketScalarFieldEnum | BlockTicketScalarFieldEnum[]
  }

  /**
   * User.registeredRewardRevokes
   */
  export type User$registeredRewardRevokesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    where?: RewardRevokeWhereInput
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    cursor?: RewardRevokeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardRevokeScalarFieldEnum | RewardRevokeScalarFieldEnum[]
  }

  /**
   * User.approvedRewardRevokes
   */
  export type User$approvedRewardRevokesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    where?: RewardRevokeWhereInput
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    cursor?: RewardRevokeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RewardRevokeScalarFieldEnum | RewardRevokeScalarFieldEnum[]
  }

  /**
   * User.boards
   */
  export type User$boardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    cursor?: BoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * User.boardComments
   */
  export type User$boardCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    where?: BoardCommentWhereInput
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    cursor?: BoardCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardCommentScalarFieldEnum | BoardCommentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    updatedAt: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    updatedAt?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    updatedAt?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    updatedAt: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
    updatedAt?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
      updatedAt: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
    readonly updatedAt: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model GroupMail
   */

  export type AggregateGroupMail = {
    _count: GroupMailCountAggregateOutputType | null
    _min: GroupMailMinAggregateOutputType | null
    _max: GroupMailMaxAggregateOutputType | null
  }

  export type GroupMailMinAggregateOutputType = {
    id: string | null
    reason: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMailMaxAggregateOutputType = {
    id: string | null
    reason: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMailCountAggregateOutputType = {
    id: number
    reason: number
    content: number
    reward: number
    startDate: number
    endDate: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupMailMinAggregateInputType = {
    id?: true
    reason?: true
    content?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMailMaxAggregateInputType = {
    id?: true
    reason?: true
    content?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMailCountAggregateInputType = {
    id?: true
    reason?: true
    content?: true
    reward?: true
    startDate?: true
    endDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupMailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMail to aggregate.
     */
    where?: GroupMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMails to fetch.
     */
    orderBy?: GroupMailOrderByWithRelationInput | GroupMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupMails
    **/
    _count?: true | GroupMailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMailMaxAggregateInputType
  }

  export type GetGroupMailAggregateType<T extends GroupMailAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupMail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupMail[P]>
      : GetScalarType<T[P], AggregateGroupMail[P]>
  }




  export type GroupMailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupMailWhereInput
    orderBy?: GroupMailOrderByWithAggregationInput | GroupMailOrderByWithAggregationInput[]
    by: GroupMailScalarFieldEnum[] | GroupMailScalarFieldEnum
    having?: GroupMailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupMailCountAggregateInputType | true
    _min?: GroupMailMinAggregateInputType
    _max?: GroupMailMaxAggregateInputType
  }

  export type GroupMailGroupByOutputType = {
    id: string
    reason: string
    content: string
    reward: JsonValue
    startDate: Date
    endDate: Date
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: GroupMailCountAggregateOutputType | null
    _min: GroupMailMinAggregateOutputType | null
    _max: GroupMailMaxAggregateOutputType | null
  }

  type GetGroupMailGroupByPayload<T extends GroupMailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupMailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupMailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupMailGroupByOutputType[P]>
            : GetScalarType<T[P], GroupMailGroupByOutputType[P]>
        }
      >
    >


  export type GroupMailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | GroupMail$userArgs<ExtArgs>
  }, ExtArgs["result"]["groupMail"]>

  export type GroupMailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | GroupMail$userArgs<ExtArgs>
  }, ExtArgs["result"]["groupMail"]>

  export type GroupMailSelectScalar = {
    id?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GroupMailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GroupMail$userArgs<ExtArgs>
  }
  export type GroupMailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GroupMail$userArgs<ExtArgs>
  }

  export type $GroupMailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupMail"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reason: string
      content: string
      reward: Prisma.JsonValue
      startDate: Date
      endDate: Date
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["groupMail"]>
    composites: {}
  }

  type GroupMailGetPayload<S extends boolean | null | undefined | GroupMailDefaultArgs> = $Result.GetResult<Prisma.$GroupMailPayload, S>

  type GroupMailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupMailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupMailCountAggregateInputType | true
    }

  export interface GroupMailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupMail'], meta: { name: 'GroupMail' } }
    /**
     * Find zero or one GroupMail that matches the filter.
     * @param {GroupMailFindUniqueArgs} args - Arguments to find a GroupMail
     * @example
     * // Get one GroupMail
     * const groupMail = await prisma.groupMail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupMailFindUniqueArgs>(args: SelectSubset<T, GroupMailFindUniqueArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroupMail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupMailFindUniqueOrThrowArgs} args - Arguments to find a GroupMail
     * @example
     * // Get one GroupMail
     * const groupMail = await prisma.groupMail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupMailFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupMailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroupMail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailFindFirstArgs} args - Arguments to find a GroupMail
     * @example
     * // Get one GroupMail
     * const groupMail = await prisma.groupMail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupMailFindFirstArgs>(args?: SelectSubset<T, GroupMailFindFirstArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroupMail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailFindFirstOrThrowArgs} args - Arguments to find a GroupMail
     * @example
     * // Get one GroupMail
     * const groupMail = await prisma.groupMail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupMailFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupMailFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroupMails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupMails
     * const groupMails = await prisma.groupMail.findMany()
     * 
     * // Get first 10 GroupMails
     * const groupMails = await prisma.groupMail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupMailWithIdOnly = await prisma.groupMail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupMailFindManyArgs>(args?: SelectSubset<T, GroupMailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroupMail.
     * @param {GroupMailCreateArgs} args - Arguments to create a GroupMail.
     * @example
     * // Create one GroupMail
     * const GroupMail = await prisma.groupMail.create({
     *   data: {
     *     // ... data to create a GroupMail
     *   }
     * })
     * 
     */
    create<T extends GroupMailCreateArgs>(args: SelectSubset<T, GroupMailCreateArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroupMails.
     * @param {GroupMailCreateManyArgs} args - Arguments to create many GroupMails.
     * @example
     * // Create many GroupMails
     * const groupMail = await prisma.groupMail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupMailCreateManyArgs>(args?: SelectSubset<T, GroupMailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupMails and returns the data saved in the database.
     * @param {GroupMailCreateManyAndReturnArgs} args - Arguments to create many GroupMails.
     * @example
     * // Create many GroupMails
     * const groupMail = await prisma.groupMail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupMails and only return the `id`
     * const groupMailWithIdOnly = await prisma.groupMail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupMailCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupMailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GroupMail.
     * @param {GroupMailDeleteArgs} args - Arguments to delete one GroupMail.
     * @example
     * // Delete one GroupMail
     * const GroupMail = await prisma.groupMail.delete({
     *   where: {
     *     // ... filter to delete one GroupMail
     *   }
     * })
     * 
     */
    delete<T extends GroupMailDeleteArgs>(args: SelectSubset<T, GroupMailDeleteArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroupMail.
     * @param {GroupMailUpdateArgs} args - Arguments to update one GroupMail.
     * @example
     * // Update one GroupMail
     * const groupMail = await prisma.groupMail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupMailUpdateArgs>(args: SelectSubset<T, GroupMailUpdateArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroupMails.
     * @param {GroupMailDeleteManyArgs} args - Arguments to filter GroupMails to delete.
     * @example
     * // Delete a few GroupMails
     * const { count } = await prisma.groupMail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupMailDeleteManyArgs>(args?: SelectSubset<T, GroupMailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupMails
     * const groupMail = await prisma.groupMail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupMailUpdateManyArgs>(args: SelectSubset<T, GroupMailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupMail.
     * @param {GroupMailUpsertArgs} args - Arguments to update or create a GroupMail.
     * @example
     * // Update or create a GroupMail
     * const groupMail = await prisma.groupMail.upsert({
     *   create: {
     *     // ... data to create a GroupMail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupMail we want to update
     *   }
     * })
     */
    upsert<T extends GroupMailUpsertArgs>(args: SelectSubset<T, GroupMailUpsertArgs<ExtArgs>>): Prisma__GroupMailClient<$Result.GetResult<Prisma.$GroupMailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GroupMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailCountArgs} args - Arguments to filter GroupMails to count.
     * @example
     * // Count the number of GroupMails
     * const count = await prisma.groupMail.count({
     *   where: {
     *     // ... the filter for the GroupMails we want to count
     *   }
     * })
    **/
    count<T extends GroupMailCountArgs>(
      args?: Subset<T, GroupMailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupMailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupMailAggregateArgs>(args: Subset<T, GroupMailAggregateArgs>): Prisma.PrismaPromise<GetGroupMailAggregateType<T>>

    /**
     * Group by GroupMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupMailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupMailGroupByArgs['orderBy'] }
        : { orderBy?: GroupMailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupMailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupMail model
   */
  readonly fields: GroupMailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupMail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupMailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends GroupMail$userArgs<ExtArgs> = {}>(args?: Subset<T, GroupMail$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupMail model
   */ 
  interface GroupMailFieldRefs {
    readonly id: FieldRef<"GroupMail", 'String'>
    readonly reason: FieldRef<"GroupMail", 'String'>
    readonly content: FieldRef<"GroupMail", 'String'>
    readonly reward: FieldRef<"GroupMail", 'Json'>
    readonly startDate: FieldRef<"GroupMail", 'DateTime'>
    readonly endDate: FieldRef<"GroupMail", 'DateTime'>
    readonly userId: FieldRef<"GroupMail", 'String'>
    readonly createdAt: FieldRef<"GroupMail", 'DateTime'>
    readonly updatedAt: FieldRef<"GroupMail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupMail findUnique
   */
  export type GroupMailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter, which GroupMail to fetch.
     */
    where: GroupMailWhereUniqueInput
  }

  /**
   * GroupMail findUniqueOrThrow
   */
  export type GroupMailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter, which GroupMail to fetch.
     */
    where: GroupMailWhereUniqueInput
  }

  /**
   * GroupMail findFirst
   */
  export type GroupMailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter, which GroupMail to fetch.
     */
    where?: GroupMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMails to fetch.
     */
    orderBy?: GroupMailOrderByWithRelationInput | GroupMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMails.
     */
    cursor?: GroupMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMails.
     */
    distinct?: GroupMailScalarFieldEnum | GroupMailScalarFieldEnum[]
  }

  /**
   * GroupMail findFirstOrThrow
   */
  export type GroupMailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter, which GroupMail to fetch.
     */
    where?: GroupMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMails to fetch.
     */
    orderBy?: GroupMailOrderByWithRelationInput | GroupMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMails.
     */
    cursor?: GroupMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMails.
     */
    distinct?: GroupMailScalarFieldEnum | GroupMailScalarFieldEnum[]
  }

  /**
   * GroupMail findMany
   */
  export type GroupMailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter, which GroupMails to fetch.
     */
    where?: GroupMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMails to fetch.
     */
    orderBy?: GroupMailOrderByWithRelationInput | GroupMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupMails.
     */
    cursor?: GroupMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMails.
     */
    skip?: number
    distinct?: GroupMailScalarFieldEnum | GroupMailScalarFieldEnum[]
  }

  /**
   * GroupMail create
   */
  export type GroupMailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupMail.
     */
    data: XOR<GroupMailCreateInput, GroupMailUncheckedCreateInput>
  }

  /**
   * GroupMail createMany
   */
  export type GroupMailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupMails.
     */
    data: GroupMailCreateManyInput | GroupMailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupMail createManyAndReturn
   */
  export type GroupMailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GroupMails.
     */
    data: GroupMailCreateManyInput | GroupMailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupMail update
   */
  export type GroupMailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupMail.
     */
    data: XOR<GroupMailUpdateInput, GroupMailUncheckedUpdateInput>
    /**
     * Choose, which GroupMail to update.
     */
    where: GroupMailWhereUniqueInput
  }

  /**
   * GroupMail updateMany
   */
  export type GroupMailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupMails.
     */
    data: XOR<GroupMailUpdateManyMutationInput, GroupMailUncheckedUpdateManyInput>
    /**
     * Filter which GroupMails to update
     */
    where?: GroupMailWhereInput
  }

  /**
   * GroupMail upsert
   */
  export type GroupMailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupMail to update in case it exists.
     */
    where: GroupMailWhereUniqueInput
    /**
     * In case the GroupMail found by the `where` argument doesn't exist, create a new GroupMail with this data.
     */
    create: XOR<GroupMailCreateInput, GroupMailUncheckedCreateInput>
    /**
     * In case the GroupMail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupMailUpdateInput, GroupMailUncheckedUpdateInput>
  }

  /**
   * GroupMail delete
   */
  export type GroupMailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
    /**
     * Filter which GroupMail to delete.
     */
    where: GroupMailWhereUniqueInput
  }

  /**
   * GroupMail deleteMany
   */
  export type GroupMailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMails to delete
     */
    where?: GroupMailWhereInput
  }

  /**
   * GroupMail.user
   */
  export type GroupMail$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * GroupMail without action
   */
  export type GroupMailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMail
     */
    select?: GroupMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupMailInclude<ExtArgs> | null
  }


  /**
   * Model PersonalMail
   */

  export type AggregatePersonalMail = {
    _count: PersonalMailCountAggregateOutputType | null
    _avg: PersonalMailAvgAggregateOutputType | null
    _sum: PersonalMailSumAggregateOutputType | null
    _min: PersonalMailMinAggregateOutputType | null
    _max: PersonalMailMaxAggregateOutputType | null
  }

  export type PersonalMailAvgAggregateOutputType = {
    userId: number | null
  }

  export type PersonalMailSumAggregateOutputType = {
    userId: number | null
  }

  export type PersonalMailMinAggregateOutputType = {
    id: string | null
    userId: number | null
    reason: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonalMailMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    reason: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonalMailCountAggregateOutputType = {
    id: number
    userId: number
    reason: number
    content: number
    reward: number
    startDate: number
    endDate: number
    registrantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PersonalMailAvgAggregateInputType = {
    userId?: true
  }

  export type PersonalMailSumAggregateInputType = {
    userId?: true
  }

  export type PersonalMailMinAggregateInputType = {
    id?: true
    userId?: true
    reason?: true
    content?: true
    startDate?: true
    endDate?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonalMailMaxAggregateInputType = {
    id?: true
    userId?: true
    reason?: true
    content?: true
    startDate?: true
    endDate?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonalMailCountAggregateInputType = {
    id?: true
    userId?: true
    reason?: true
    content?: true
    reward?: true
    startDate?: true
    endDate?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PersonalMailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalMail to aggregate.
     */
    where?: PersonalMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalMails to fetch.
     */
    orderBy?: PersonalMailOrderByWithRelationInput | PersonalMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalMails
    **/
    _count?: true | PersonalMailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalMailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalMailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalMailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalMailMaxAggregateInputType
  }

  export type GetPersonalMailAggregateType<T extends PersonalMailAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalMail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalMail[P]>
      : GetScalarType<T[P], AggregatePersonalMail[P]>
  }




  export type PersonalMailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalMailWhereInput
    orderBy?: PersonalMailOrderByWithAggregationInput | PersonalMailOrderByWithAggregationInput[]
    by: PersonalMailScalarFieldEnum[] | PersonalMailScalarFieldEnum
    having?: PersonalMailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalMailCountAggregateInputType | true
    _avg?: PersonalMailAvgAggregateInputType
    _sum?: PersonalMailSumAggregateInputType
    _min?: PersonalMailMinAggregateInputType
    _max?: PersonalMailMaxAggregateInputType
  }

  export type PersonalMailGroupByOutputType = {
    id: string
    userId: number
    reason: string
    content: string
    reward: JsonValue
    startDate: Date
    endDate: Date
    registrantId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PersonalMailCountAggregateOutputType | null
    _avg: PersonalMailAvgAggregateOutputType | null
    _sum: PersonalMailSumAggregateOutputType | null
    _min: PersonalMailMinAggregateOutputType | null
    _max: PersonalMailMaxAggregateOutputType | null
  }

  type GetPersonalMailGroupByPayload<T extends PersonalMailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalMailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalMailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalMailGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalMailGroupByOutputType[P]>
        }
      >
    >


  export type PersonalMailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | PersonalMail$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["personalMail"]>

  export type PersonalMailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | PersonalMail$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["personalMail"]>

  export type PersonalMailSelectScalar = {
    id?: boolean
    userId?: boolean
    reason?: boolean
    content?: boolean
    reward?: boolean
    startDate?: boolean
    endDate?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PersonalMailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | PersonalMail$registrantArgs<ExtArgs>
  }
  export type PersonalMailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | PersonalMail$registrantArgs<ExtArgs>
  }

  export type $PersonalMailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonalMail"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      reason: string
      content: string
      reward: Prisma.JsonValue
      startDate: Date
      endDate: Date
      registrantId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["personalMail"]>
    composites: {}
  }

  type PersonalMailGetPayload<S extends boolean | null | undefined | PersonalMailDefaultArgs> = $Result.GetResult<Prisma.$PersonalMailPayload, S>

  type PersonalMailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonalMailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonalMailCountAggregateInputType | true
    }

  export interface PersonalMailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonalMail'], meta: { name: 'PersonalMail' } }
    /**
     * Find zero or one PersonalMail that matches the filter.
     * @param {PersonalMailFindUniqueArgs} args - Arguments to find a PersonalMail
     * @example
     * // Get one PersonalMail
     * const personalMail = await prisma.personalMail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalMailFindUniqueArgs>(args: SelectSubset<T, PersonalMailFindUniqueArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PersonalMail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PersonalMailFindUniqueOrThrowArgs} args - Arguments to find a PersonalMail
     * @example
     * // Get one PersonalMail
     * const personalMail = await prisma.personalMail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalMailFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalMailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PersonalMail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailFindFirstArgs} args - Arguments to find a PersonalMail
     * @example
     * // Get one PersonalMail
     * const personalMail = await prisma.personalMail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalMailFindFirstArgs>(args?: SelectSubset<T, PersonalMailFindFirstArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PersonalMail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailFindFirstOrThrowArgs} args - Arguments to find a PersonalMail
     * @example
     * // Get one PersonalMail
     * const personalMail = await prisma.personalMail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalMailFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalMailFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PersonalMails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalMails
     * const personalMails = await prisma.personalMail.findMany()
     * 
     * // Get first 10 PersonalMails
     * const personalMails = await prisma.personalMail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalMailWithIdOnly = await prisma.personalMail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonalMailFindManyArgs>(args?: SelectSubset<T, PersonalMailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PersonalMail.
     * @param {PersonalMailCreateArgs} args - Arguments to create a PersonalMail.
     * @example
     * // Create one PersonalMail
     * const PersonalMail = await prisma.personalMail.create({
     *   data: {
     *     // ... data to create a PersonalMail
     *   }
     * })
     * 
     */
    create<T extends PersonalMailCreateArgs>(args: SelectSubset<T, PersonalMailCreateArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PersonalMails.
     * @param {PersonalMailCreateManyArgs} args - Arguments to create many PersonalMails.
     * @example
     * // Create many PersonalMails
     * const personalMail = await prisma.personalMail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalMailCreateManyArgs>(args?: SelectSubset<T, PersonalMailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PersonalMails and returns the data saved in the database.
     * @param {PersonalMailCreateManyAndReturnArgs} args - Arguments to create many PersonalMails.
     * @example
     * // Create many PersonalMails
     * const personalMail = await prisma.personalMail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PersonalMails and only return the `id`
     * const personalMailWithIdOnly = await prisma.personalMail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalMailCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalMailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PersonalMail.
     * @param {PersonalMailDeleteArgs} args - Arguments to delete one PersonalMail.
     * @example
     * // Delete one PersonalMail
     * const PersonalMail = await prisma.personalMail.delete({
     *   where: {
     *     // ... filter to delete one PersonalMail
     *   }
     * })
     * 
     */
    delete<T extends PersonalMailDeleteArgs>(args: SelectSubset<T, PersonalMailDeleteArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PersonalMail.
     * @param {PersonalMailUpdateArgs} args - Arguments to update one PersonalMail.
     * @example
     * // Update one PersonalMail
     * const personalMail = await prisma.personalMail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalMailUpdateArgs>(args: SelectSubset<T, PersonalMailUpdateArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PersonalMails.
     * @param {PersonalMailDeleteManyArgs} args - Arguments to filter PersonalMails to delete.
     * @example
     * // Delete a few PersonalMails
     * const { count } = await prisma.personalMail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalMailDeleteManyArgs>(args?: SelectSubset<T, PersonalMailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalMails
     * const personalMail = await prisma.personalMail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalMailUpdateManyArgs>(args: SelectSubset<T, PersonalMailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PersonalMail.
     * @param {PersonalMailUpsertArgs} args - Arguments to update or create a PersonalMail.
     * @example
     * // Update or create a PersonalMail
     * const personalMail = await prisma.personalMail.upsert({
     *   create: {
     *     // ... data to create a PersonalMail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalMail we want to update
     *   }
     * })
     */
    upsert<T extends PersonalMailUpsertArgs>(args: SelectSubset<T, PersonalMailUpsertArgs<ExtArgs>>): Prisma__PersonalMailClient<$Result.GetResult<Prisma.$PersonalMailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PersonalMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailCountArgs} args - Arguments to filter PersonalMails to count.
     * @example
     * // Count the number of PersonalMails
     * const count = await prisma.personalMail.count({
     *   where: {
     *     // ... the filter for the PersonalMails we want to count
     *   }
     * })
    **/
    count<T extends PersonalMailCountArgs>(
      args?: Subset<T, PersonalMailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalMailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalMailAggregateArgs>(args: Subset<T, PersonalMailAggregateArgs>): Prisma.PrismaPromise<GetPersonalMailAggregateType<T>>

    /**
     * Group by PersonalMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalMailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalMailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalMailGroupByArgs['orderBy'] }
        : { orderBy?: PersonalMailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalMailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalMailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonalMail model
   */
  readonly fields: PersonalMailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalMail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalMailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends PersonalMail$registrantArgs<ExtArgs> = {}>(args?: Subset<T, PersonalMail$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PersonalMail model
   */ 
  interface PersonalMailFieldRefs {
    readonly id: FieldRef<"PersonalMail", 'String'>
    readonly userId: FieldRef<"PersonalMail", 'Int'>
    readonly reason: FieldRef<"PersonalMail", 'String'>
    readonly content: FieldRef<"PersonalMail", 'String'>
    readonly reward: FieldRef<"PersonalMail", 'Json'>
    readonly startDate: FieldRef<"PersonalMail", 'DateTime'>
    readonly endDate: FieldRef<"PersonalMail", 'DateTime'>
    readonly registrantId: FieldRef<"PersonalMail", 'String'>
    readonly createdAt: FieldRef<"PersonalMail", 'DateTime'>
    readonly updatedAt: FieldRef<"PersonalMail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PersonalMail findUnique
   */
  export type PersonalMailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter, which PersonalMail to fetch.
     */
    where: PersonalMailWhereUniqueInput
  }

  /**
   * PersonalMail findUniqueOrThrow
   */
  export type PersonalMailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter, which PersonalMail to fetch.
     */
    where: PersonalMailWhereUniqueInput
  }

  /**
   * PersonalMail findFirst
   */
  export type PersonalMailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter, which PersonalMail to fetch.
     */
    where?: PersonalMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalMails to fetch.
     */
    orderBy?: PersonalMailOrderByWithRelationInput | PersonalMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalMails.
     */
    cursor?: PersonalMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalMails.
     */
    distinct?: PersonalMailScalarFieldEnum | PersonalMailScalarFieldEnum[]
  }

  /**
   * PersonalMail findFirstOrThrow
   */
  export type PersonalMailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter, which PersonalMail to fetch.
     */
    where?: PersonalMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalMails to fetch.
     */
    orderBy?: PersonalMailOrderByWithRelationInput | PersonalMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalMails.
     */
    cursor?: PersonalMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalMails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalMails.
     */
    distinct?: PersonalMailScalarFieldEnum | PersonalMailScalarFieldEnum[]
  }

  /**
   * PersonalMail findMany
   */
  export type PersonalMailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter, which PersonalMails to fetch.
     */
    where?: PersonalMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalMails to fetch.
     */
    orderBy?: PersonalMailOrderByWithRelationInput | PersonalMailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalMails.
     */
    cursor?: PersonalMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalMails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalMails.
     */
    skip?: number
    distinct?: PersonalMailScalarFieldEnum | PersonalMailScalarFieldEnum[]
  }

  /**
   * PersonalMail create
   */
  export type PersonalMailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonalMail.
     */
    data: XOR<PersonalMailCreateInput, PersonalMailUncheckedCreateInput>
  }

  /**
   * PersonalMail createMany
   */
  export type PersonalMailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonalMails.
     */
    data: PersonalMailCreateManyInput | PersonalMailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PersonalMail createManyAndReturn
   */
  export type PersonalMailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PersonalMails.
     */
    data: PersonalMailCreateManyInput | PersonalMailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalMail update
   */
  export type PersonalMailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonalMail.
     */
    data: XOR<PersonalMailUpdateInput, PersonalMailUncheckedUpdateInput>
    /**
     * Choose, which PersonalMail to update.
     */
    where: PersonalMailWhereUniqueInput
  }

  /**
   * PersonalMail updateMany
   */
  export type PersonalMailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonalMails.
     */
    data: XOR<PersonalMailUpdateManyMutationInput, PersonalMailUncheckedUpdateManyInput>
    /**
     * Filter which PersonalMails to update
     */
    where?: PersonalMailWhereInput
  }

  /**
   * PersonalMail upsert
   */
  export type PersonalMailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonalMail to update in case it exists.
     */
    where: PersonalMailWhereUniqueInput
    /**
     * In case the PersonalMail found by the `where` argument doesn't exist, create a new PersonalMail with this data.
     */
    create: XOR<PersonalMailCreateInput, PersonalMailUncheckedCreateInput>
    /**
     * In case the PersonalMail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalMailUpdateInput, PersonalMailUncheckedUpdateInput>
  }

  /**
   * PersonalMail delete
   */
  export type PersonalMailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
    /**
     * Filter which PersonalMail to delete.
     */
    where: PersonalMailWhereUniqueInput
  }

  /**
   * PersonalMail deleteMany
   */
  export type PersonalMailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalMails to delete
     */
    where?: PersonalMailWhereInput
  }

  /**
   * PersonalMail.registrant
   */
  export type PersonalMail$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PersonalMail without action
   */
  export type PersonalMailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalMail
     */
    select?: PersonalMailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalMailInclude<ExtArgs> | null
  }


  /**
   * Model IpBlock
   */

  export type AggregateIpBlock = {
    _count: IpBlockCountAggregateOutputType | null
    _min: IpBlockMinAggregateOutputType | null
    _max: IpBlockMaxAggregateOutputType | null
  }

  export type IpBlockMinAggregateOutputType = {
    id: string | null
    ip: string | null
    reason: string | null
    registrantId: string | null
    type: $Enums.IpBlockType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IpBlockMaxAggregateOutputType = {
    id: string | null
    ip: string | null
    reason: string | null
    registrantId: string | null
    type: $Enums.IpBlockType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IpBlockCountAggregateOutputType = {
    id: number
    ip: number
    reason: number
    registrantId: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IpBlockMinAggregateInputType = {
    id?: true
    ip?: true
    reason?: true
    registrantId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IpBlockMaxAggregateInputType = {
    id?: true
    ip?: true
    reason?: true
    registrantId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IpBlockCountAggregateInputType = {
    id?: true
    ip?: true
    reason?: true
    registrantId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IpBlockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IpBlock to aggregate.
     */
    where?: IpBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpBlocks to fetch.
     */
    orderBy?: IpBlockOrderByWithRelationInput | IpBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IpBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IpBlocks
    **/
    _count?: true | IpBlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IpBlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IpBlockMaxAggregateInputType
  }

  export type GetIpBlockAggregateType<T extends IpBlockAggregateArgs> = {
        [P in keyof T & keyof AggregateIpBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIpBlock[P]>
      : GetScalarType<T[P], AggregateIpBlock[P]>
  }




  export type IpBlockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IpBlockWhereInput
    orderBy?: IpBlockOrderByWithAggregationInput | IpBlockOrderByWithAggregationInput[]
    by: IpBlockScalarFieldEnum[] | IpBlockScalarFieldEnum
    having?: IpBlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IpBlockCountAggregateInputType | true
    _min?: IpBlockMinAggregateInputType
    _max?: IpBlockMaxAggregateInputType
  }

  export type IpBlockGroupByOutputType = {
    id: string
    ip: string
    reason: string
    registrantId: string | null
    type: $Enums.IpBlockType
    createdAt: Date
    updatedAt: Date
    _count: IpBlockCountAggregateOutputType | null
    _min: IpBlockMinAggregateOutputType | null
    _max: IpBlockMaxAggregateOutputType | null
  }

  type GetIpBlockGroupByPayload<T extends IpBlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IpBlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IpBlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IpBlockGroupByOutputType[P]>
            : GetScalarType<T[P], IpBlockGroupByOutputType[P]>
        }
      >
    >


  export type IpBlockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    reason?: boolean
    registrantId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | IpBlock$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["ipBlock"]>

  export type IpBlockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    reason?: boolean
    registrantId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | IpBlock$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["ipBlock"]>

  export type IpBlockSelectScalar = {
    id?: boolean
    ip?: boolean
    reason?: boolean
    registrantId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IpBlockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | IpBlock$registrantArgs<ExtArgs>
  }
  export type IpBlockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | IpBlock$registrantArgs<ExtArgs>
  }

  export type $IpBlockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IpBlock"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ip: string
      reason: string
      registrantId: string | null
      type: $Enums.IpBlockType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ipBlock"]>
    composites: {}
  }

  type IpBlockGetPayload<S extends boolean | null | undefined | IpBlockDefaultArgs> = $Result.GetResult<Prisma.$IpBlockPayload, S>

  type IpBlockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IpBlockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IpBlockCountAggregateInputType | true
    }

  export interface IpBlockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IpBlock'], meta: { name: 'IpBlock' } }
    /**
     * Find zero or one IpBlock that matches the filter.
     * @param {IpBlockFindUniqueArgs} args - Arguments to find a IpBlock
     * @example
     * // Get one IpBlock
     * const ipBlock = await prisma.ipBlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IpBlockFindUniqueArgs>(args: SelectSubset<T, IpBlockFindUniqueArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IpBlock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IpBlockFindUniqueOrThrowArgs} args - Arguments to find a IpBlock
     * @example
     * // Get one IpBlock
     * const ipBlock = await prisma.ipBlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IpBlockFindUniqueOrThrowArgs>(args: SelectSubset<T, IpBlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IpBlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockFindFirstArgs} args - Arguments to find a IpBlock
     * @example
     * // Get one IpBlock
     * const ipBlock = await prisma.ipBlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IpBlockFindFirstArgs>(args?: SelectSubset<T, IpBlockFindFirstArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IpBlock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockFindFirstOrThrowArgs} args - Arguments to find a IpBlock
     * @example
     * // Get one IpBlock
     * const ipBlock = await prisma.ipBlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IpBlockFindFirstOrThrowArgs>(args?: SelectSubset<T, IpBlockFindFirstOrThrowArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IpBlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IpBlocks
     * const ipBlocks = await prisma.ipBlock.findMany()
     * 
     * // Get first 10 IpBlocks
     * const ipBlocks = await prisma.ipBlock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ipBlockWithIdOnly = await prisma.ipBlock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IpBlockFindManyArgs>(args?: SelectSubset<T, IpBlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IpBlock.
     * @param {IpBlockCreateArgs} args - Arguments to create a IpBlock.
     * @example
     * // Create one IpBlock
     * const IpBlock = await prisma.ipBlock.create({
     *   data: {
     *     // ... data to create a IpBlock
     *   }
     * })
     * 
     */
    create<T extends IpBlockCreateArgs>(args: SelectSubset<T, IpBlockCreateArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IpBlocks.
     * @param {IpBlockCreateManyArgs} args - Arguments to create many IpBlocks.
     * @example
     * // Create many IpBlocks
     * const ipBlock = await prisma.ipBlock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IpBlockCreateManyArgs>(args?: SelectSubset<T, IpBlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IpBlocks and returns the data saved in the database.
     * @param {IpBlockCreateManyAndReturnArgs} args - Arguments to create many IpBlocks.
     * @example
     * // Create many IpBlocks
     * const ipBlock = await prisma.ipBlock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IpBlocks and only return the `id`
     * const ipBlockWithIdOnly = await prisma.ipBlock.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IpBlockCreateManyAndReturnArgs>(args?: SelectSubset<T, IpBlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IpBlock.
     * @param {IpBlockDeleteArgs} args - Arguments to delete one IpBlock.
     * @example
     * // Delete one IpBlock
     * const IpBlock = await prisma.ipBlock.delete({
     *   where: {
     *     // ... filter to delete one IpBlock
     *   }
     * })
     * 
     */
    delete<T extends IpBlockDeleteArgs>(args: SelectSubset<T, IpBlockDeleteArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IpBlock.
     * @param {IpBlockUpdateArgs} args - Arguments to update one IpBlock.
     * @example
     * // Update one IpBlock
     * const ipBlock = await prisma.ipBlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IpBlockUpdateArgs>(args: SelectSubset<T, IpBlockUpdateArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IpBlocks.
     * @param {IpBlockDeleteManyArgs} args - Arguments to filter IpBlocks to delete.
     * @example
     * // Delete a few IpBlocks
     * const { count } = await prisma.ipBlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IpBlockDeleteManyArgs>(args?: SelectSubset<T, IpBlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IpBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IpBlocks
     * const ipBlock = await prisma.ipBlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IpBlockUpdateManyArgs>(args: SelectSubset<T, IpBlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IpBlock.
     * @param {IpBlockUpsertArgs} args - Arguments to update or create a IpBlock.
     * @example
     * // Update or create a IpBlock
     * const ipBlock = await prisma.ipBlock.upsert({
     *   create: {
     *     // ... data to create a IpBlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IpBlock we want to update
     *   }
     * })
     */
    upsert<T extends IpBlockUpsertArgs>(args: SelectSubset<T, IpBlockUpsertArgs<ExtArgs>>): Prisma__IpBlockClient<$Result.GetResult<Prisma.$IpBlockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IpBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockCountArgs} args - Arguments to filter IpBlocks to count.
     * @example
     * // Count the number of IpBlocks
     * const count = await prisma.ipBlock.count({
     *   where: {
     *     // ... the filter for the IpBlocks we want to count
     *   }
     * })
    **/
    count<T extends IpBlockCountArgs>(
      args?: Subset<T, IpBlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IpBlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IpBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IpBlockAggregateArgs>(args: Subset<T, IpBlockAggregateArgs>): Prisma.PrismaPromise<GetIpBlockAggregateType<T>>

    /**
     * Group by IpBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpBlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IpBlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IpBlockGroupByArgs['orderBy'] }
        : { orderBy?: IpBlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IpBlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIpBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IpBlock model
   */
  readonly fields: IpBlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IpBlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IpBlockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends IpBlock$registrantArgs<ExtArgs> = {}>(args?: Subset<T, IpBlock$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IpBlock model
   */ 
  interface IpBlockFieldRefs {
    readonly id: FieldRef<"IpBlock", 'String'>
    readonly ip: FieldRef<"IpBlock", 'String'>
    readonly reason: FieldRef<"IpBlock", 'String'>
    readonly registrantId: FieldRef<"IpBlock", 'String'>
    readonly type: FieldRef<"IpBlock", 'IpBlockType'>
    readonly createdAt: FieldRef<"IpBlock", 'DateTime'>
    readonly updatedAt: FieldRef<"IpBlock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IpBlock findUnique
   */
  export type IpBlockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter, which IpBlock to fetch.
     */
    where: IpBlockWhereUniqueInput
  }

  /**
   * IpBlock findUniqueOrThrow
   */
  export type IpBlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter, which IpBlock to fetch.
     */
    where: IpBlockWhereUniqueInput
  }

  /**
   * IpBlock findFirst
   */
  export type IpBlockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter, which IpBlock to fetch.
     */
    where?: IpBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpBlocks to fetch.
     */
    orderBy?: IpBlockOrderByWithRelationInput | IpBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpBlocks.
     */
    cursor?: IpBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpBlocks.
     */
    distinct?: IpBlockScalarFieldEnum | IpBlockScalarFieldEnum[]
  }

  /**
   * IpBlock findFirstOrThrow
   */
  export type IpBlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter, which IpBlock to fetch.
     */
    where?: IpBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpBlocks to fetch.
     */
    orderBy?: IpBlockOrderByWithRelationInput | IpBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IpBlocks.
     */
    cursor?: IpBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IpBlocks.
     */
    distinct?: IpBlockScalarFieldEnum | IpBlockScalarFieldEnum[]
  }

  /**
   * IpBlock findMany
   */
  export type IpBlockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter, which IpBlocks to fetch.
     */
    where?: IpBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IpBlocks to fetch.
     */
    orderBy?: IpBlockOrderByWithRelationInput | IpBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IpBlocks.
     */
    cursor?: IpBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IpBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IpBlocks.
     */
    skip?: number
    distinct?: IpBlockScalarFieldEnum | IpBlockScalarFieldEnum[]
  }

  /**
   * IpBlock create
   */
  export type IpBlockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * The data needed to create a IpBlock.
     */
    data: XOR<IpBlockCreateInput, IpBlockUncheckedCreateInput>
  }

  /**
   * IpBlock createMany
   */
  export type IpBlockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IpBlocks.
     */
    data: IpBlockCreateManyInput | IpBlockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IpBlock createManyAndReturn
   */
  export type IpBlockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IpBlocks.
     */
    data: IpBlockCreateManyInput | IpBlockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IpBlock update
   */
  export type IpBlockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * The data needed to update a IpBlock.
     */
    data: XOR<IpBlockUpdateInput, IpBlockUncheckedUpdateInput>
    /**
     * Choose, which IpBlock to update.
     */
    where: IpBlockWhereUniqueInput
  }

  /**
   * IpBlock updateMany
   */
  export type IpBlockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IpBlocks.
     */
    data: XOR<IpBlockUpdateManyMutationInput, IpBlockUncheckedUpdateManyInput>
    /**
     * Filter which IpBlocks to update
     */
    where?: IpBlockWhereInput
  }

  /**
   * IpBlock upsert
   */
  export type IpBlockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * The filter to search for the IpBlock to update in case it exists.
     */
    where: IpBlockWhereUniqueInput
    /**
     * In case the IpBlock found by the `where` argument doesn't exist, create a new IpBlock with this data.
     */
    create: XOR<IpBlockCreateInput, IpBlockUncheckedCreateInput>
    /**
     * In case the IpBlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IpBlockUpdateInput, IpBlockUncheckedUpdateInput>
  }

  /**
   * IpBlock delete
   */
  export type IpBlockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
    /**
     * Filter which IpBlock to delete.
     */
    where: IpBlockWhereUniqueInput
  }

  /**
   * IpBlock deleteMany
   */
  export type IpBlockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IpBlocks to delete
     */
    where?: IpBlockWhereInput
  }

  /**
   * IpBlock.registrant
   */
  export type IpBlock$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * IpBlock without action
   */
  export type IpBlockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IpBlock
     */
    select?: IpBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IpBlockInclude<ExtArgs> | null
  }


  /**
   * Model AccountBlock
   */

  export type AggregateAccountBlock = {
    _count: AccountBlockCountAggregateOutputType | null
    _avg: AccountBlockAvgAggregateOutputType | null
    _sum: AccountBlockSumAggregateOutputType | null
    _min: AccountBlockMinAggregateOutputType | null
    _max: AccountBlockMaxAggregateOutputType | null
  }

  export type AccountBlockAvgAggregateOutputType = {
    userId: number | null
    blockDuration: number | null
  }

  export type AccountBlockSumAggregateOutputType = {
    userId: number | null
    blockDuration: number | null
  }

  export type AccountBlockMinAggregateOutputType = {
    id: string | null
    reason: string | null
    userId: number | null
    type: $Enums.AccountBlockType | null
    blockDuration: number | null
    isPermanent: boolean | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountBlockMaxAggregateOutputType = {
    id: string | null
    reason: string | null
    userId: number | null
    type: $Enums.AccountBlockType | null
    blockDuration: number | null
    isPermanent: boolean | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountBlockCountAggregateOutputType = {
    id: number
    reason: number
    userId: number
    type: number
    blockDuration: number
    isPermanent: number
    registrantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountBlockAvgAggregateInputType = {
    userId?: true
    blockDuration?: true
  }

  export type AccountBlockSumAggregateInputType = {
    userId?: true
    blockDuration?: true
  }

  export type AccountBlockMinAggregateInputType = {
    id?: true
    reason?: true
    userId?: true
    type?: true
    blockDuration?: true
    isPermanent?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountBlockMaxAggregateInputType = {
    id?: true
    reason?: true
    userId?: true
    type?: true
    blockDuration?: true
    isPermanent?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountBlockCountAggregateInputType = {
    id?: true
    reason?: true
    userId?: true
    type?: true
    blockDuration?: true
    isPermanent?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountBlockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountBlock to aggregate.
     */
    where?: AccountBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBlocks to fetch.
     */
    orderBy?: AccountBlockOrderByWithRelationInput | AccountBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountBlocks
    **/
    _count?: true | AccountBlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountBlockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountBlockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountBlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountBlockMaxAggregateInputType
  }

  export type GetAccountBlockAggregateType<T extends AccountBlockAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountBlock[P]>
      : GetScalarType<T[P], AggregateAccountBlock[P]>
  }




  export type AccountBlockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountBlockWhereInput
    orderBy?: AccountBlockOrderByWithAggregationInput | AccountBlockOrderByWithAggregationInput[]
    by: AccountBlockScalarFieldEnum[] | AccountBlockScalarFieldEnum
    having?: AccountBlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountBlockCountAggregateInputType | true
    _avg?: AccountBlockAvgAggregateInputType
    _sum?: AccountBlockSumAggregateInputType
    _min?: AccountBlockMinAggregateInputType
    _max?: AccountBlockMaxAggregateInputType
  }

  export type AccountBlockGroupByOutputType = {
    id: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration: number | null
    isPermanent: boolean
    registrantId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountBlockCountAggregateOutputType | null
    _avg: AccountBlockAvgAggregateOutputType | null
    _sum: AccountBlockSumAggregateOutputType | null
    _min: AccountBlockMinAggregateOutputType | null
    _max: AccountBlockMaxAggregateOutputType | null
  }

  type GetAccountBlockGroupByPayload<T extends AccountBlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountBlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountBlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountBlockGroupByOutputType[P]>
            : GetScalarType<T[P], AccountBlockGroupByOutputType[P]>
        }
      >
    >


  export type AccountBlockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    userId?: boolean
    type?: boolean
    blockDuration?: boolean
    isPermanent?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | AccountBlock$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["accountBlock"]>

  export type AccountBlockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    userId?: boolean
    type?: boolean
    blockDuration?: boolean
    isPermanent?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | AccountBlock$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["accountBlock"]>

  export type AccountBlockSelectScalar = {
    id?: boolean
    reason?: boolean
    userId?: boolean
    type?: boolean
    blockDuration?: boolean
    isPermanent?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountBlockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | AccountBlock$registrantArgs<ExtArgs>
  }
  export type AccountBlockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | AccountBlock$registrantArgs<ExtArgs>
  }

  export type $AccountBlockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountBlock"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reason: string
      userId: number
      type: $Enums.AccountBlockType
      blockDuration: number | null
      isPermanent: boolean
      registrantId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["accountBlock"]>
    composites: {}
  }

  type AccountBlockGetPayload<S extends boolean | null | undefined | AccountBlockDefaultArgs> = $Result.GetResult<Prisma.$AccountBlockPayload, S>

  type AccountBlockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountBlockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountBlockCountAggregateInputType | true
    }

  export interface AccountBlockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountBlock'], meta: { name: 'AccountBlock' } }
    /**
     * Find zero or one AccountBlock that matches the filter.
     * @param {AccountBlockFindUniqueArgs} args - Arguments to find a AccountBlock
     * @example
     * // Get one AccountBlock
     * const accountBlock = await prisma.accountBlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountBlockFindUniqueArgs>(args: SelectSubset<T, AccountBlockFindUniqueArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountBlock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountBlockFindUniqueOrThrowArgs} args - Arguments to find a AccountBlock
     * @example
     * // Get one AccountBlock
     * const accountBlock = await prisma.accountBlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountBlockFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountBlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountBlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockFindFirstArgs} args - Arguments to find a AccountBlock
     * @example
     * // Get one AccountBlock
     * const accountBlock = await prisma.accountBlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountBlockFindFirstArgs>(args?: SelectSubset<T, AccountBlockFindFirstArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountBlock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockFindFirstOrThrowArgs} args - Arguments to find a AccountBlock
     * @example
     * // Get one AccountBlock
     * const accountBlock = await prisma.accountBlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountBlockFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountBlockFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountBlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountBlocks
     * const accountBlocks = await prisma.accountBlock.findMany()
     * 
     * // Get first 10 AccountBlocks
     * const accountBlocks = await prisma.accountBlock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountBlockWithIdOnly = await prisma.accountBlock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountBlockFindManyArgs>(args?: SelectSubset<T, AccountBlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountBlock.
     * @param {AccountBlockCreateArgs} args - Arguments to create a AccountBlock.
     * @example
     * // Create one AccountBlock
     * const AccountBlock = await prisma.accountBlock.create({
     *   data: {
     *     // ... data to create a AccountBlock
     *   }
     * })
     * 
     */
    create<T extends AccountBlockCreateArgs>(args: SelectSubset<T, AccountBlockCreateArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountBlocks.
     * @param {AccountBlockCreateManyArgs} args - Arguments to create many AccountBlocks.
     * @example
     * // Create many AccountBlocks
     * const accountBlock = await prisma.accountBlock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountBlockCreateManyArgs>(args?: SelectSubset<T, AccountBlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountBlocks and returns the data saved in the database.
     * @param {AccountBlockCreateManyAndReturnArgs} args - Arguments to create many AccountBlocks.
     * @example
     * // Create many AccountBlocks
     * const accountBlock = await prisma.accountBlock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountBlocks and only return the `id`
     * const accountBlockWithIdOnly = await prisma.accountBlock.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountBlockCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountBlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountBlock.
     * @param {AccountBlockDeleteArgs} args - Arguments to delete one AccountBlock.
     * @example
     * // Delete one AccountBlock
     * const AccountBlock = await prisma.accountBlock.delete({
     *   where: {
     *     // ... filter to delete one AccountBlock
     *   }
     * })
     * 
     */
    delete<T extends AccountBlockDeleteArgs>(args: SelectSubset<T, AccountBlockDeleteArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountBlock.
     * @param {AccountBlockUpdateArgs} args - Arguments to update one AccountBlock.
     * @example
     * // Update one AccountBlock
     * const accountBlock = await prisma.accountBlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountBlockUpdateArgs>(args: SelectSubset<T, AccountBlockUpdateArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountBlocks.
     * @param {AccountBlockDeleteManyArgs} args - Arguments to filter AccountBlocks to delete.
     * @example
     * // Delete a few AccountBlocks
     * const { count } = await prisma.accountBlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountBlockDeleteManyArgs>(args?: SelectSubset<T, AccountBlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountBlocks
     * const accountBlock = await prisma.accountBlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountBlockUpdateManyArgs>(args: SelectSubset<T, AccountBlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountBlock.
     * @param {AccountBlockUpsertArgs} args - Arguments to update or create a AccountBlock.
     * @example
     * // Update or create a AccountBlock
     * const accountBlock = await prisma.accountBlock.upsert({
     *   create: {
     *     // ... data to create a AccountBlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountBlock we want to update
     *   }
     * })
     */
    upsert<T extends AccountBlockUpsertArgs>(args: SelectSubset<T, AccountBlockUpsertArgs<ExtArgs>>): Prisma__AccountBlockClient<$Result.GetResult<Prisma.$AccountBlockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockCountArgs} args - Arguments to filter AccountBlocks to count.
     * @example
     * // Count the number of AccountBlocks
     * const count = await prisma.accountBlock.count({
     *   where: {
     *     // ... the filter for the AccountBlocks we want to count
     *   }
     * })
    **/
    count<T extends AccountBlockCountArgs>(
      args?: Subset<T, AccountBlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountBlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountBlockAggregateArgs>(args: Subset<T, AccountBlockAggregateArgs>): Prisma.PrismaPromise<GetAccountBlockAggregateType<T>>

    /**
     * Group by AccountBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountBlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountBlockGroupByArgs['orderBy'] }
        : { orderBy?: AccountBlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountBlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountBlock model
   */
  readonly fields: AccountBlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountBlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountBlockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends AccountBlock$registrantArgs<ExtArgs> = {}>(args?: Subset<T, AccountBlock$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountBlock model
   */ 
  interface AccountBlockFieldRefs {
    readonly id: FieldRef<"AccountBlock", 'String'>
    readonly reason: FieldRef<"AccountBlock", 'String'>
    readonly userId: FieldRef<"AccountBlock", 'Int'>
    readonly type: FieldRef<"AccountBlock", 'AccountBlockType'>
    readonly blockDuration: FieldRef<"AccountBlock", 'Int'>
    readonly isPermanent: FieldRef<"AccountBlock", 'Boolean'>
    readonly registrantId: FieldRef<"AccountBlock", 'String'>
    readonly createdAt: FieldRef<"AccountBlock", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountBlock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountBlock findUnique
   */
  export type AccountBlockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter, which AccountBlock to fetch.
     */
    where: AccountBlockWhereUniqueInput
  }

  /**
   * AccountBlock findUniqueOrThrow
   */
  export type AccountBlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter, which AccountBlock to fetch.
     */
    where: AccountBlockWhereUniqueInput
  }

  /**
   * AccountBlock findFirst
   */
  export type AccountBlockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter, which AccountBlock to fetch.
     */
    where?: AccountBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBlocks to fetch.
     */
    orderBy?: AccountBlockOrderByWithRelationInput | AccountBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountBlocks.
     */
    cursor?: AccountBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountBlocks.
     */
    distinct?: AccountBlockScalarFieldEnum | AccountBlockScalarFieldEnum[]
  }

  /**
   * AccountBlock findFirstOrThrow
   */
  export type AccountBlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter, which AccountBlock to fetch.
     */
    where?: AccountBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBlocks to fetch.
     */
    orderBy?: AccountBlockOrderByWithRelationInput | AccountBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountBlocks.
     */
    cursor?: AccountBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountBlocks.
     */
    distinct?: AccountBlockScalarFieldEnum | AccountBlockScalarFieldEnum[]
  }

  /**
   * AccountBlock findMany
   */
  export type AccountBlockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter, which AccountBlocks to fetch.
     */
    where?: AccountBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBlocks to fetch.
     */
    orderBy?: AccountBlockOrderByWithRelationInput | AccountBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountBlocks.
     */
    cursor?: AccountBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBlocks.
     */
    skip?: number
    distinct?: AccountBlockScalarFieldEnum | AccountBlockScalarFieldEnum[]
  }

  /**
   * AccountBlock create
   */
  export type AccountBlockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountBlock.
     */
    data: XOR<AccountBlockCreateInput, AccountBlockUncheckedCreateInput>
  }

  /**
   * AccountBlock createMany
   */
  export type AccountBlockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountBlocks.
     */
    data: AccountBlockCreateManyInput | AccountBlockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountBlock createManyAndReturn
   */
  export type AccountBlockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountBlocks.
     */
    data: AccountBlockCreateManyInput | AccountBlockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountBlock update
   */
  export type AccountBlockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountBlock.
     */
    data: XOR<AccountBlockUpdateInput, AccountBlockUncheckedUpdateInput>
    /**
     * Choose, which AccountBlock to update.
     */
    where: AccountBlockWhereUniqueInput
  }

  /**
   * AccountBlock updateMany
   */
  export type AccountBlockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountBlocks.
     */
    data: XOR<AccountBlockUpdateManyMutationInput, AccountBlockUncheckedUpdateManyInput>
    /**
     * Filter which AccountBlocks to update
     */
    where?: AccountBlockWhereInput
  }

  /**
   * AccountBlock upsert
   */
  export type AccountBlockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountBlock to update in case it exists.
     */
    where: AccountBlockWhereUniqueInput
    /**
     * In case the AccountBlock found by the `where` argument doesn't exist, create a new AccountBlock with this data.
     */
    create: XOR<AccountBlockCreateInput, AccountBlockUncheckedCreateInput>
    /**
     * In case the AccountBlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountBlockUpdateInput, AccountBlockUncheckedUpdateInput>
  }

  /**
   * AccountBlock delete
   */
  export type AccountBlockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
    /**
     * Filter which AccountBlock to delete.
     */
    where: AccountBlockWhereUniqueInput
  }

  /**
   * AccountBlock deleteMany
   */
  export type AccountBlockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountBlocks to delete
     */
    where?: AccountBlockWhereInput
  }

  /**
   * AccountBlock.registrant
   */
  export type AccountBlock$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AccountBlock without action
   */
  export type AccountBlockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBlock
     */
    select?: AccountBlockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBlockInclude<ExtArgs> | null
  }


  /**
   * Model CouponGroup
   */

  export type AggregateCouponGroup = {
    _count: CouponGroupCountAggregateOutputType | null
    _avg: CouponGroupAvgAggregateOutputType | null
    _sum: CouponGroupSumAggregateOutputType | null
    _min: CouponGroupMinAggregateOutputType | null
    _max: CouponGroupMaxAggregateOutputType | null
  }

  export type CouponGroupAvgAggregateOutputType = {
    usageLimit: number | null
    quantity: number | null
  }

  export type CouponGroupSumAggregateOutputType = {
    usageLimit: number | null
    quantity: number | null
  }

  export type CouponGroupMinAggregateOutputType = {
    id: string | null
    groupName: string | null
    groupType: $Enums.CouponGroupType | null
    code: string | null
    isIssued: boolean | null
    usageLimit: number | null
    groupReason: string | null
    groupStatus: $Enums.CouponGroupStatus | null
    quantity: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponGroupMaxAggregateOutputType = {
    id: string | null
    groupName: string | null
    groupType: $Enums.CouponGroupType | null
    code: string | null
    isIssued: boolean | null
    usageLimit: number | null
    groupReason: string | null
    groupStatus: $Enums.CouponGroupStatus | null
    quantity: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponGroupCountAggregateOutputType = {
    id: number
    groupName: number
    groupType: number
    rewards: number
    code: number
    isIssued: number
    usageLimit: number
    groupReason: number
    groupStatus: number
    quantity: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CouponGroupAvgAggregateInputType = {
    usageLimit?: true
    quantity?: true
  }

  export type CouponGroupSumAggregateInputType = {
    usageLimit?: true
    quantity?: true
  }

  export type CouponGroupMinAggregateInputType = {
    id?: true
    groupName?: true
    groupType?: true
    code?: true
    isIssued?: true
    usageLimit?: true
    groupReason?: true
    groupStatus?: true
    quantity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponGroupMaxAggregateInputType = {
    id?: true
    groupName?: true
    groupType?: true
    code?: true
    isIssued?: true
    usageLimit?: true
    groupReason?: true
    groupStatus?: true
    quantity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponGroupCountAggregateInputType = {
    id?: true
    groupName?: true
    groupType?: true
    rewards?: true
    code?: true
    isIssued?: true
    usageLimit?: true
    groupReason?: true
    groupStatus?: true
    quantity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CouponGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CouponGroup to aggregate.
     */
    where?: CouponGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponGroups to fetch.
     */
    orderBy?: CouponGroupOrderByWithRelationInput | CouponGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CouponGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CouponGroups
    **/
    _count?: true | CouponGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CouponGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CouponGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouponGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouponGroupMaxAggregateInputType
  }

  export type GetCouponGroupAggregateType<T extends CouponGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateCouponGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCouponGroup[P]>
      : GetScalarType<T[P], AggregateCouponGroup[P]>
  }




  export type CouponGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponGroupWhereInput
    orderBy?: CouponGroupOrderByWithAggregationInput | CouponGroupOrderByWithAggregationInput[]
    by: CouponGroupScalarFieldEnum[] | CouponGroupScalarFieldEnum
    having?: CouponGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouponGroupCountAggregateInputType | true
    _avg?: CouponGroupAvgAggregateInputType
    _sum?: CouponGroupSumAggregateInputType
    _min?: CouponGroupMinAggregateInputType
    _max?: CouponGroupMaxAggregateInputType
  }

  export type CouponGroupGroupByOutputType = {
    id: string
    groupName: string
    groupType: $Enums.CouponGroupType
    rewards: JsonValue
    code: string | null
    isIssued: boolean
    usageLimit: number | null
    groupReason: string
    groupStatus: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    _count: CouponGroupCountAggregateOutputType | null
    _avg: CouponGroupAvgAggregateOutputType | null
    _sum: CouponGroupSumAggregateOutputType | null
    _min: CouponGroupMinAggregateOutputType | null
    _max: CouponGroupMaxAggregateOutputType | null
  }

  type GetCouponGroupGroupByPayload<T extends CouponGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouponGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouponGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouponGroupGroupByOutputType[P]>
            : GetScalarType<T[P], CouponGroupGroupByOutputType[P]>
        }
      >
    >


  export type CouponGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupType?: boolean
    rewards?: boolean
    code?: boolean
    isIssued?: boolean
    usageLimit?: boolean
    groupReason?: boolean
    groupStatus?: boolean
    quantity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coupons?: boolean | CouponGroup$couponsArgs<ExtArgs>
    _count?: boolean | CouponGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["couponGroup"]>

  export type CouponGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupType?: boolean
    rewards?: boolean
    code?: boolean
    isIssued?: boolean
    usageLimit?: boolean
    groupReason?: boolean
    groupStatus?: boolean
    quantity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["couponGroup"]>

  export type CouponGroupSelectScalar = {
    id?: boolean
    groupName?: boolean
    groupType?: boolean
    rewards?: boolean
    code?: boolean
    isIssued?: boolean
    usageLimit?: boolean
    groupReason?: boolean
    groupStatus?: boolean
    quantity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CouponGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupons?: boolean | CouponGroup$couponsArgs<ExtArgs>
    _count?: boolean | CouponGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CouponGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CouponGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CouponGroup"
    objects: {
      coupons: Prisma.$CouponPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      groupName: string
      groupType: $Enums.CouponGroupType
      rewards: Prisma.JsonValue
      code: string | null
      isIssued: boolean
      usageLimit: number | null
      groupReason: string
      groupStatus: $Enums.CouponGroupStatus
      quantity: number
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["couponGroup"]>
    composites: {}
  }

  type CouponGroupGetPayload<S extends boolean | null | undefined | CouponGroupDefaultArgs> = $Result.GetResult<Prisma.$CouponGroupPayload, S>

  type CouponGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CouponGroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CouponGroupCountAggregateInputType | true
    }

  export interface CouponGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CouponGroup'], meta: { name: 'CouponGroup' } }
    /**
     * Find zero or one CouponGroup that matches the filter.
     * @param {CouponGroupFindUniqueArgs} args - Arguments to find a CouponGroup
     * @example
     * // Get one CouponGroup
     * const couponGroup = await prisma.couponGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CouponGroupFindUniqueArgs>(args: SelectSubset<T, CouponGroupFindUniqueArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CouponGroup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CouponGroupFindUniqueOrThrowArgs} args - Arguments to find a CouponGroup
     * @example
     * // Get one CouponGroup
     * const couponGroup = await prisma.couponGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CouponGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, CouponGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CouponGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupFindFirstArgs} args - Arguments to find a CouponGroup
     * @example
     * // Get one CouponGroup
     * const couponGroup = await prisma.couponGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CouponGroupFindFirstArgs>(args?: SelectSubset<T, CouponGroupFindFirstArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CouponGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupFindFirstOrThrowArgs} args - Arguments to find a CouponGroup
     * @example
     * // Get one CouponGroup
     * const couponGroup = await prisma.couponGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CouponGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, CouponGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CouponGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CouponGroups
     * const couponGroups = await prisma.couponGroup.findMany()
     * 
     * // Get first 10 CouponGroups
     * const couponGroups = await prisma.couponGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couponGroupWithIdOnly = await prisma.couponGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CouponGroupFindManyArgs>(args?: SelectSubset<T, CouponGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CouponGroup.
     * @param {CouponGroupCreateArgs} args - Arguments to create a CouponGroup.
     * @example
     * // Create one CouponGroup
     * const CouponGroup = await prisma.couponGroup.create({
     *   data: {
     *     // ... data to create a CouponGroup
     *   }
     * })
     * 
     */
    create<T extends CouponGroupCreateArgs>(args: SelectSubset<T, CouponGroupCreateArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CouponGroups.
     * @param {CouponGroupCreateManyArgs} args - Arguments to create many CouponGroups.
     * @example
     * // Create many CouponGroups
     * const couponGroup = await prisma.couponGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CouponGroupCreateManyArgs>(args?: SelectSubset<T, CouponGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CouponGroups and returns the data saved in the database.
     * @param {CouponGroupCreateManyAndReturnArgs} args - Arguments to create many CouponGroups.
     * @example
     * // Create many CouponGroups
     * const couponGroup = await prisma.couponGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CouponGroups and only return the `id`
     * const couponGroupWithIdOnly = await prisma.couponGroup.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CouponGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, CouponGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CouponGroup.
     * @param {CouponGroupDeleteArgs} args - Arguments to delete one CouponGroup.
     * @example
     * // Delete one CouponGroup
     * const CouponGroup = await prisma.couponGroup.delete({
     *   where: {
     *     // ... filter to delete one CouponGroup
     *   }
     * })
     * 
     */
    delete<T extends CouponGroupDeleteArgs>(args: SelectSubset<T, CouponGroupDeleteArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CouponGroup.
     * @param {CouponGroupUpdateArgs} args - Arguments to update one CouponGroup.
     * @example
     * // Update one CouponGroup
     * const couponGroup = await prisma.couponGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CouponGroupUpdateArgs>(args: SelectSubset<T, CouponGroupUpdateArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CouponGroups.
     * @param {CouponGroupDeleteManyArgs} args - Arguments to filter CouponGroups to delete.
     * @example
     * // Delete a few CouponGroups
     * const { count } = await prisma.couponGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CouponGroupDeleteManyArgs>(args?: SelectSubset<T, CouponGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CouponGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CouponGroups
     * const couponGroup = await prisma.couponGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CouponGroupUpdateManyArgs>(args: SelectSubset<T, CouponGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CouponGroup.
     * @param {CouponGroupUpsertArgs} args - Arguments to update or create a CouponGroup.
     * @example
     * // Update or create a CouponGroup
     * const couponGroup = await prisma.couponGroup.upsert({
     *   create: {
     *     // ... data to create a CouponGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CouponGroup we want to update
     *   }
     * })
     */
    upsert<T extends CouponGroupUpsertArgs>(args: SelectSubset<T, CouponGroupUpsertArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CouponGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupCountArgs} args - Arguments to filter CouponGroups to count.
     * @example
     * // Count the number of CouponGroups
     * const count = await prisma.couponGroup.count({
     *   where: {
     *     // ... the filter for the CouponGroups we want to count
     *   }
     * })
    **/
    count<T extends CouponGroupCountArgs>(
      args?: Subset<T, CouponGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouponGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CouponGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouponGroupAggregateArgs>(args: Subset<T, CouponGroupAggregateArgs>): Prisma.PrismaPromise<GetCouponGroupAggregateType<T>>

    /**
     * Group by CouponGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CouponGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CouponGroupGroupByArgs['orderBy'] }
        : { orderBy?: CouponGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CouponGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CouponGroup model
   */
  readonly fields: CouponGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CouponGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CouponGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coupons<T extends CouponGroup$couponsArgs<ExtArgs> = {}>(args?: Subset<T, CouponGroup$couponsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CouponGroup model
   */ 
  interface CouponGroupFieldRefs {
    readonly id: FieldRef<"CouponGroup", 'String'>
    readonly groupName: FieldRef<"CouponGroup", 'String'>
    readonly groupType: FieldRef<"CouponGroup", 'CouponGroupType'>
    readonly rewards: FieldRef<"CouponGroup", 'Json'>
    readonly code: FieldRef<"CouponGroup", 'String'>
    readonly isIssued: FieldRef<"CouponGroup", 'Boolean'>
    readonly usageLimit: FieldRef<"CouponGroup", 'Int'>
    readonly groupReason: FieldRef<"CouponGroup", 'String'>
    readonly groupStatus: FieldRef<"CouponGroup", 'CouponGroupStatus'>
    readonly quantity: FieldRef<"CouponGroup", 'Int'>
    readonly startDate: FieldRef<"CouponGroup", 'DateTime'>
    readonly endDate: FieldRef<"CouponGroup", 'DateTime'>
    readonly createdAt: FieldRef<"CouponGroup", 'DateTime'>
    readonly updatedAt: FieldRef<"CouponGroup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CouponGroup findUnique
   */
  export type CouponGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter, which CouponGroup to fetch.
     */
    where: CouponGroupWhereUniqueInput
  }

  /**
   * CouponGroup findUniqueOrThrow
   */
  export type CouponGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter, which CouponGroup to fetch.
     */
    where: CouponGroupWhereUniqueInput
  }

  /**
   * CouponGroup findFirst
   */
  export type CouponGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter, which CouponGroup to fetch.
     */
    where?: CouponGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponGroups to fetch.
     */
    orderBy?: CouponGroupOrderByWithRelationInput | CouponGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CouponGroups.
     */
    cursor?: CouponGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CouponGroups.
     */
    distinct?: CouponGroupScalarFieldEnum | CouponGroupScalarFieldEnum[]
  }

  /**
   * CouponGroup findFirstOrThrow
   */
  export type CouponGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter, which CouponGroup to fetch.
     */
    where?: CouponGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponGroups to fetch.
     */
    orderBy?: CouponGroupOrderByWithRelationInput | CouponGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CouponGroups.
     */
    cursor?: CouponGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CouponGroups.
     */
    distinct?: CouponGroupScalarFieldEnum | CouponGroupScalarFieldEnum[]
  }

  /**
   * CouponGroup findMany
   */
  export type CouponGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter, which CouponGroups to fetch.
     */
    where?: CouponGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponGroups to fetch.
     */
    orderBy?: CouponGroupOrderByWithRelationInput | CouponGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CouponGroups.
     */
    cursor?: CouponGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponGroups.
     */
    skip?: number
    distinct?: CouponGroupScalarFieldEnum | CouponGroupScalarFieldEnum[]
  }

  /**
   * CouponGroup create
   */
  export type CouponGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a CouponGroup.
     */
    data: XOR<CouponGroupCreateInput, CouponGroupUncheckedCreateInput>
  }

  /**
   * CouponGroup createMany
   */
  export type CouponGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CouponGroups.
     */
    data: CouponGroupCreateManyInput | CouponGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CouponGroup createManyAndReturn
   */
  export type CouponGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CouponGroups.
     */
    data: CouponGroupCreateManyInput | CouponGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CouponGroup update
   */
  export type CouponGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a CouponGroup.
     */
    data: XOR<CouponGroupUpdateInput, CouponGroupUncheckedUpdateInput>
    /**
     * Choose, which CouponGroup to update.
     */
    where: CouponGroupWhereUniqueInput
  }

  /**
   * CouponGroup updateMany
   */
  export type CouponGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CouponGroups.
     */
    data: XOR<CouponGroupUpdateManyMutationInput, CouponGroupUncheckedUpdateManyInput>
    /**
     * Filter which CouponGroups to update
     */
    where?: CouponGroupWhereInput
  }

  /**
   * CouponGroup upsert
   */
  export type CouponGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the CouponGroup to update in case it exists.
     */
    where: CouponGroupWhereUniqueInput
    /**
     * In case the CouponGroup found by the `where` argument doesn't exist, create a new CouponGroup with this data.
     */
    create: XOR<CouponGroupCreateInput, CouponGroupUncheckedCreateInput>
    /**
     * In case the CouponGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CouponGroupUpdateInput, CouponGroupUncheckedUpdateInput>
  }

  /**
   * CouponGroup delete
   */
  export type CouponGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    /**
     * Filter which CouponGroup to delete.
     */
    where: CouponGroupWhereUniqueInput
  }

  /**
   * CouponGroup deleteMany
   */
  export type CouponGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CouponGroups to delete
     */
    where?: CouponGroupWhereInput
  }

  /**
   * CouponGroup.coupons
   */
  export type CouponGroup$couponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    where?: CouponWhereInput
    orderBy?: CouponOrderByWithRelationInput | CouponOrderByWithRelationInput[]
    cursor?: CouponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CouponScalarFieldEnum | CouponScalarFieldEnum[]
  }

  /**
   * CouponGroup without action
   */
  export type CouponGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
  }


  /**
   * Model Coupon
   */

  export type AggregateCoupon = {
    _count: CouponCountAggregateOutputType | null
    _min: CouponMinAggregateOutputType | null
    _max: CouponMaxAggregateOutputType | null
  }

  export type CouponMinAggregateOutputType = {
    id: string | null
    isUsed: boolean | null
    code: string | null
    couponGroupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponMaxAggregateOutputType = {
    id: string | null
    isUsed: boolean | null
    code: string | null
    couponGroupId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponCountAggregateOutputType = {
    id: number
    rewards: number
    isUsed: number
    code: number
    couponGroupId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CouponMinAggregateInputType = {
    id?: true
    isUsed?: true
    code?: true
    couponGroupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponMaxAggregateInputType = {
    id?: true
    isUsed?: true
    code?: true
    couponGroupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponCountAggregateInputType = {
    id?: true
    rewards?: true
    isUsed?: true
    code?: true
    couponGroupId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CouponAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coupon to aggregate.
     */
    where?: CouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponOrderByWithRelationInput | CouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coupons
    **/
    _count?: true | CouponCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouponMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouponMaxAggregateInputType
  }

  export type GetCouponAggregateType<T extends CouponAggregateArgs> = {
        [P in keyof T & keyof AggregateCoupon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoupon[P]>
      : GetScalarType<T[P], AggregateCoupon[P]>
  }




  export type CouponGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponWhereInput
    orderBy?: CouponOrderByWithAggregationInput | CouponOrderByWithAggregationInput[]
    by: CouponScalarFieldEnum[] | CouponScalarFieldEnum
    having?: CouponScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouponCountAggregateInputType | true
    _min?: CouponMinAggregateInputType
    _max?: CouponMaxAggregateInputType
  }

  export type CouponGroupByOutputType = {
    id: string
    rewards: JsonValue
    isUsed: boolean
    code: string | null
    couponGroupId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CouponCountAggregateOutputType | null
    _min: CouponMinAggregateOutputType | null
    _max: CouponMaxAggregateOutputType | null
  }

  type GetCouponGroupByPayload<T extends CouponGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouponGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouponGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouponGroupByOutputType[P]>
            : GetScalarType<T[P], CouponGroupByOutputType[P]>
        }
      >
    >


  export type CouponSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rewards?: boolean
    isUsed?: boolean
    code?: boolean
    couponGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    couponGroup?: boolean | Coupon$couponGroupArgs<ExtArgs>
    couponLogs?: boolean | Coupon$couponLogsArgs<ExtArgs>
    _count?: boolean | CouponCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coupon"]>

  export type CouponSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rewards?: boolean
    isUsed?: boolean
    code?: boolean
    couponGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    couponGroup?: boolean | Coupon$couponGroupArgs<ExtArgs>
  }, ExtArgs["result"]["coupon"]>

  export type CouponSelectScalar = {
    id?: boolean
    rewards?: boolean
    isUsed?: boolean
    code?: boolean
    couponGroupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CouponInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    couponGroup?: boolean | Coupon$couponGroupArgs<ExtArgs>
    couponLogs?: boolean | Coupon$couponLogsArgs<ExtArgs>
    _count?: boolean | CouponCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CouponIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    couponGroup?: boolean | Coupon$couponGroupArgs<ExtArgs>
  }

  export type $CouponPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coupon"
    objects: {
      couponGroup: Prisma.$CouponGroupPayload<ExtArgs> | null
      couponLogs: Prisma.$CouponLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rewards: Prisma.JsonValue
      isUsed: boolean
      code: string | null
      couponGroupId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coupon"]>
    composites: {}
  }

  type CouponGetPayload<S extends boolean | null | undefined | CouponDefaultArgs> = $Result.GetResult<Prisma.$CouponPayload, S>

  type CouponCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CouponFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CouponCountAggregateInputType | true
    }

  export interface CouponDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coupon'], meta: { name: 'Coupon' } }
    /**
     * Find zero or one Coupon that matches the filter.
     * @param {CouponFindUniqueArgs} args - Arguments to find a Coupon
     * @example
     * // Get one Coupon
     * const coupon = await prisma.coupon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CouponFindUniqueArgs>(args: SelectSubset<T, CouponFindUniqueArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Coupon that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CouponFindUniqueOrThrowArgs} args - Arguments to find a Coupon
     * @example
     * // Get one Coupon
     * const coupon = await prisma.coupon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CouponFindUniqueOrThrowArgs>(args: SelectSubset<T, CouponFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Coupon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponFindFirstArgs} args - Arguments to find a Coupon
     * @example
     * // Get one Coupon
     * const coupon = await prisma.coupon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CouponFindFirstArgs>(args?: SelectSubset<T, CouponFindFirstArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Coupon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponFindFirstOrThrowArgs} args - Arguments to find a Coupon
     * @example
     * // Get one Coupon
     * const coupon = await prisma.coupon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CouponFindFirstOrThrowArgs>(args?: SelectSubset<T, CouponFindFirstOrThrowArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coupons
     * const coupons = await prisma.coupon.findMany()
     * 
     * // Get first 10 Coupons
     * const coupons = await prisma.coupon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couponWithIdOnly = await prisma.coupon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CouponFindManyArgs>(args?: SelectSubset<T, CouponFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Coupon.
     * @param {CouponCreateArgs} args - Arguments to create a Coupon.
     * @example
     * // Create one Coupon
     * const Coupon = await prisma.coupon.create({
     *   data: {
     *     // ... data to create a Coupon
     *   }
     * })
     * 
     */
    create<T extends CouponCreateArgs>(args: SelectSubset<T, CouponCreateArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Coupons.
     * @param {CouponCreateManyArgs} args - Arguments to create many Coupons.
     * @example
     * // Create many Coupons
     * const coupon = await prisma.coupon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CouponCreateManyArgs>(args?: SelectSubset<T, CouponCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coupons and returns the data saved in the database.
     * @param {CouponCreateManyAndReturnArgs} args - Arguments to create many Coupons.
     * @example
     * // Create many Coupons
     * const coupon = await prisma.coupon.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coupons and only return the `id`
     * const couponWithIdOnly = await prisma.coupon.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CouponCreateManyAndReturnArgs>(args?: SelectSubset<T, CouponCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Coupon.
     * @param {CouponDeleteArgs} args - Arguments to delete one Coupon.
     * @example
     * // Delete one Coupon
     * const Coupon = await prisma.coupon.delete({
     *   where: {
     *     // ... filter to delete one Coupon
     *   }
     * })
     * 
     */
    delete<T extends CouponDeleteArgs>(args: SelectSubset<T, CouponDeleteArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Coupon.
     * @param {CouponUpdateArgs} args - Arguments to update one Coupon.
     * @example
     * // Update one Coupon
     * const coupon = await prisma.coupon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CouponUpdateArgs>(args: SelectSubset<T, CouponUpdateArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Coupons.
     * @param {CouponDeleteManyArgs} args - Arguments to filter Coupons to delete.
     * @example
     * // Delete a few Coupons
     * const { count } = await prisma.coupon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CouponDeleteManyArgs>(args?: SelectSubset<T, CouponDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coupons
     * const coupon = await prisma.coupon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CouponUpdateManyArgs>(args: SelectSubset<T, CouponUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coupon.
     * @param {CouponUpsertArgs} args - Arguments to update or create a Coupon.
     * @example
     * // Update or create a Coupon
     * const coupon = await prisma.coupon.upsert({
     *   create: {
     *     // ... data to create a Coupon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coupon we want to update
     *   }
     * })
     */
    upsert<T extends CouponUpsertArgs>(args: SelectSubset<T, CouponUpsertArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponCountArgs} args - Arguments to filter Coupons to count.
     * @example
     * // Count the number of Coupons
     * const count = await prisma.coupon.count({
     *   where: {
     *     // ... the filter for the Coupons we want to count
     *   }
     * })
    **/
    count<T extends CouponCountArgs>(
      args?: Subset<T, CouponCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouponCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouponAggregateArgs>(args: Subset<T, CouponAggregateArgs>): Prisma.PrismaPromise<GetCouponAggregateType<T>>

    /**
     * Group by Coupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CouponGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CouponGroupByArgs['orderBy'] }
        : { orderBy?: CouponGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CouponGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coupon model
   */
  readonly fields: CouponFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coupon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CouponClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    couponGroup<T extends Coupon$couponGroupArgs<ExtArgs> = {}>(args?: Subset<T, Coupon$couponGroupArgs<ExtArgs>>): Prisma__CouponGroupClient<$Result.GetResult<Prisma.$CouponGroupPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    couponLogs<T extends Coupon$couponLogsArgs<ExtArgs> = {}>(args?: Subset<T, Coupon$couponLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Coupon model
   */ 
  interface CouponFieldRefs {
    readonly id: FieldRef<"Coupon", 'String'>
    readonly rewards: FieldRef<"Coupon", 'Json'>
    readonly isUsed: FieldRef<"Coupon", 'Boolean'>
    readonly code: FieldRef<"Coupon", 'String'>
    readonly couponGroupId: FieldRef<"Coupon", 'String'>
    readonly createdAt: FieldRef<"Coupon", 'DateTime'>
    readonly updatedAt: FieldRef<"Coupon", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Coupon findUnique
   */
  export type CouponFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter, which Coupon to fetch.
     */
    where: CouponWhereUniqueInput
  }

  /**
   * Coupon findUniqueOrThrow
   */
  export type CouponFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter, which Coupon to fetch.
     */
    where: CouponWhereUniqueInput
  }

  /**
   * Coupon findFirst
   */
  export type CouponFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter, which Coupon to fetch.
     */
    where?: CouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponOrderByWithRelationInput | CouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coupons.
     */
    cursor?: CouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coupons.
     */
    distinct?: CouponScalarFieldEnum | CouponScalarFieldEnum[]
  }

  /**
   * Coupon findFirstOrThrow
   */
  export type CouponFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter, which Coupon to fetch.
     */
    where?: CouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponOrderByWithRelationInput | CouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coupons.
     */
    cursor?: CouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coupons.
     */
    distinct?: CouponScalarFieldEnum | CouponScalarFieldEnum[]
  }

  /**
   * Coupon findMany
   */
  export type CouponFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where?: CouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponOrderByWithRelationInput | CouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coupons.
     */
    cursor?: CouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    distinct?: CouponScalarFieldEnum | CouponScalarFieldEnum[]
  }

  /**
   * Coupon create
   */
  export type CouponCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * The data needed to create a Coupon.
     */
    data: XOR<CouponCreateInput, CouponUncheckedCreateInput>
  }

  /**
   * Coupon createMany
   */
  export type CouponCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coupons.
     */
    data: CouponCreateManyInput | CouponCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coupon createManyAndReturn
   */
  export type CouponCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Coupons.
     */
    data: CouponCreateManyInput | CouponCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Coupon update
   */
  export type CouponUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * The data needed to update a Coupon.
     */
    data: XOR<CouponUpdateInput, CouponUncheckedUpdateInput>
    /**
     * Choose, which Coupon to update.
     */
    where: CouponWhereUniqueInput
  }

  /**
   * Coupon updateMany
   */
  export type CouponUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coupons.
     */
    data: XOR<CouponUpdateManyMutationInput, CouponUncheckedUpdateManyInput>
    /**
     * Filter which Coupons to update
     */
    where?: CouponWhereInput
  }

  /**
   * Coupon upsert
   */
  export type CouponUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * The filter to search for the Coupon to update in case it exists.
     */
    where: CouponWhereUniqueInput
    /**
     * In case the Coupon found by the `where` argument doesn't exist, create a new Coupon with this data.
     */
    create: XOR<CouponCreateInput, CouponUncheckedCreateInput>
    /**
     * In case the Coupon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CouponUpdateInput, CouponUncheckedUpdateInput>
  }

  /**
   * Coupon delete
   */
  export type CouponDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    /**
     * Filter which Coupon to delete.
     */
    where: CouponWhereUniqueInput
  }

  /**
   * Coupon deleteMany
   */
  export type CouponDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coupons to delete
     */
    where?: CouponWhereInput
  }

  /**
   * Coupon.couponGroup
   */
  export type Coupon$couponGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponGroup
     */
    select?: CouponGroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponGroupInclude<ExtArgs> | null
    where?: CouponGroupWhereInput
  }

  /**
   * Coupon.couponLogs
   */
  export type Coupon$couponLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    where?: CouponLogWhereInput
    orderBy?: CouponLogOrderByWithRelationInput | CouponLogOrderByWithRelationInput[]
    cursor?: CouponLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CouponLogScalarFieldEnum | CouponLogScalarFieldEnum[]
  }

  /**
   * Coupon without action
   */
  export type CouponDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
  }


  /**
   * Model CouponLog
   */

  export type AggregateCouponLog = {
    _count: CouponLogCountAggregateOutputType | null
    _avg: CouponLogAvgAggregateOutputType | null
    _sum: CouponLogSumAggregateOutputType | null
    _min: CouponLogMinAggregateOutputType | null
    _max: CouponLogMaxAggregateOutputType | null
  }

  export type CouponLogAvgAggregateOutputType = {
    userId: number | null
  }

  export type CouponLogSumAggregateOutputType = {
    userId: number | null
  }

  export type CouponLogMinAggregateOutputType = {
    id: string | null
    userId: number | null
    nickname: string | null
    couponId: string | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponLogMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    nickname: string | null
    couponId: string | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CouponLogCountAggregateOutputType = {
    id: number
    userId: number
    nickname: number
    couponId: number
    usedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CouponLogAvgAggregateInputType = {
    userId?: true
  }

  export type CouponLogSumAggregateInputType = {
    userId?: true
  }

  export type CouponLogMinAggregateInputType = {
    id?: true
    userId?: true
    nickname?: true
    couponId?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponLogMaxAggregateInputType = {
    id?: true
    userId?: true
    nickname?: true
    couponId?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CouponLogCountAggregateInputType = {
    id?: true
    userId?: true
    nickname?: true
    couponId?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CouponLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CouponLog to aggregate.
     */
    where?: CouponLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponLogs to fetch.
     */
    orderBy?: CouponLogOrderByWithRelationInput | CouponLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CouponLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CouponLogs
    **/
    _count?: true | CouponLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CouponLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CouponLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouponLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouponLogMaxAggregateInputType
  }

  export type GetCouponLogAggregateType<T extends CouponLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCouponLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCouponLog[P]>
      : GetScalarType<T[P], AggregateCouponLog[P]>
  }




  export type CouponLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponLogWhereInput
    orderBy?: CouponLogOrderByWithAggregationInput | CouponLogOrderByWithAggregationInput[]
    by: CouponLogScalarFieldEnum[] | CouponLogScalarFieldEnum
    having?: CouponLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouponLogCountAggregateInputType | true
    _avg?: CouponLogAvgAggregateInputType
    _sum?: CouponLogSumAggregateInputType
    _min?: CouponLogMinAggregateInputType
    _max?: CouponLogMaxAggregateInputType
  }

  export type CouponLogGroupByOutputType = {
    id: string
    userId: number
    nickname: string
    couponId: string | null
    usedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: CouponLogCountAggregateOutputType | null
    _avg: CouponLogAvgAggregateOutputType | null
    _sum: CouponLogSumAggregateOutputType | null
    _min: CouponLogMinAggregateOutputType | null
    _max: CouponLogMaxAggregateOutputType | null
  }

  type GetCouponLogGroupByPayload<T extends CouponLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouponLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouponLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouponLogGroupByOutputType[P]>
            : GetScalarType<T[P], CouponLogGroupByOutputType[P]>
        }
      >
    >


  export type CouponLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nickname?: boolean
    couponId?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coupon?: boolean | CouponLog$couponArgs<ExtArgs>
  }, ExtArgs["result"]["couponLog"]>

  export type CouponLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nickname?: boolean
    couponId?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coupon?: boolean | CouponLog$couponArgs<ExtArgs>
  }, ExtArgs["result"]["couponLog"]>

  export type CouponLogSelectScalar = {
    id?: boolean
    userId?: boolean
    nickname?: boolean
    couponId?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CouponLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupon?: boolean | CouponLog$couponArgs<ExtArgs>
  }
  export type CouponLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupon?: boolean | CouponLog$couponArgs<ExtArgs>
  }

  export type $CouponLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CouponLog"
    objects: {
      coupon: Prisma.$CouponPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      nickname: string
      couponId: string | null
      usedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["couponLog"]>
    composites: {}
  }

  type CouponLogGetPayload<S extends boolean | null | undefined | CouponLogDefaultArgs> = $Result.GetResult<Prisma.$CouponLogPayload, S>

  type CouponLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CouponLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CouponLogCountAggregateInputType | true
    }

  export interface CouponLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CouponLog'], meta: { name: 'CouponLog' } }
    /**
     * Find zero or one CouponLog that matches the filter.
     * @param {CouponLogFindUniqueArgs} args - Arguments to find a CouponLog
     * @example
     * // Get one CouponLog
     * const couponLog = await prisma.couponLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CouponLogFindUniqueArgs>(args: SelectSubset<T, CouponLogFindUniqueArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CouponLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CouponLogFindUniqueOrThrowArgs} args - Arguments to find a CouponLog
     * @example
     * // Get one CouponLog
     * const couponLog = await prisma.couponLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CouponLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CouponLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CouponLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogFindFirstArgs} args - Arguments to find a CouponLog
     * @example
     * // Get one CouponLog
     * const couponLog = await prisma.couponLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CouponLogFindFirstArgs>(args?: SelectSubset<T, CouponLogFindFirstArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CouponLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogFindFirstOrThrowArgs} args - Arguments to find a CouponLog
     * @example
     * // Get one CouponLog
     * const couponLog = await prisma.couponLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CouponLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CouponLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CouponLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CouponLogs
     * const couponLogs = await prisma.couponLog.findMany()
     * 
     * // Get first 10 CouponLogs
     * const couponLogs = await prisma.couponLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couponLogWithIdOnly = await prisma.couponLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CouponLogFindManyArgs>(args?: SelectSubset<T, CouponLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CouponLog.
     * @param {CouponLogCreateArgs} args - Arguments to create a CouponLog.
     * @example
     * // Create one CouponLog
     * const CouponLog = await prisma.couponLog.create({
     *   data: {
     *     // ... data to create a CouponLog
     *   }
     * })
     * 
     */
    create<T extends CouponLogCreateArgs>(args: SelectSubset<T, CouponLogCreateArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CouponLogs.
     * @param {CouponLogCreateManyArgs} args - Arguments to create many CouponLogs.
     * @example
     * // Create many CouponLogs
     * const couponLog = await prisma.couponLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CouponLogCreateManyArgs>(args?: SelectSubset<T, CouponLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CouponLogs and returns the data saved in the database.
     * @param {CouponLogCreateManyAndReturnArgs} args - Arguments to create many CouponLogs.
     * @example
     * // Create many CouponLogs
     * const couponLog = await prisma.couponLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CouponLogs and only return the `id`
     * const couponLogWithIdOnly = await prisma.couponLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CouponLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CouponLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CouponLog.
     * @param {CouponLogDeleteArgs} args - Arguments to delete one CouponLog.
     * @example
     * // Delete one CouponLog
     * const CouponLog = await prisma.couponLog.delete({
     *   where: {
     *     // ... filter to delete one CouponLog
     *   }
     * })
     * 
     */
    delete<T extends CouponLogDeleteArgs>(args: SelectSubset<T, CouponLogDeleteArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CouponLog.
     * @param {CouponLogUpdateArgs} args - Arguments to update one CouponLog.
     * @example
     * // Update one CouponLog
     * const couponLog = await prisma.couponLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CouponLogUpdateArgs>(args: SelectSubset<T, CouponLogUpdateArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CouponLogs.
     * @param {CouponLogDeleteManyArgs} args - Arguments to filter CouponLogs to delete.
     * @example
     * // Delete a few CouponLogs
     * const { count } = await prisma.couponLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CouponLogDeleteManyArgs>(args?: SelectSubset<T, CouponLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CouponLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CouponLogs
     * const couponLog = await prisma.couponLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CouponLogUpdateManyArgs>(args: SelectSubset<T, CouponLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CouponLog.
     * @param {CouponLogUpsertArgs} args - Arguments to update or create a CouponLog.
     * @example
     * // Update or create a CouponLog
     * const couponLog = await prisma.couponLog.upsert({
     *   create: {
     *     // ... data to create a CouponLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CouponLog we want to update
     *   }
     * })
     */
    upsert<T extends CouponLogUpsertArgs>(args: SelectSubset<T, CouponLogUpsertArgs<ExtArgs>>): Prisma__CouponLogClient<$Result.GetResult<Prisma.$CouponLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CouponLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogCountArgs} args - Arguments to filter CouponLogs to count.
     * @example
     * // Count the number of CouponLogs
     * const count = await prisma.couponLog.count({
     *   where: {
     *     // ... the filter for the CouponLogs we want to count
     *   }
     * })
    **/
    count<T extends CouponLogCountArgs>(
      args?: Subset<T, CouponLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouponLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CouponLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouponLogAggregateArgs>(args: Subset<T, CouponLogAggregateArgs>): Prisma.PrismaPromise<GetCouponLogAggregateType<T>>

    /**
     * Group by CouponLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CouponLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CouponLogGroupByArgs['orderBy'] }
        : { orderBy?: CouponLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CouponLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CouponLog model
   */
  readonly fields: CouponLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CouponLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CouponLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coupon<T extends CouponLog$couponArgs<ExtArgs> = {}>(args?: Subset<T, CouponLog$couponArgs<ExtArgs>>): Prisma__CouponClient<$Result.GetResult<Prisma.$CouponPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CouponLog model
   */ 
  interface CouponLogFieldRefs {
    readonly id: FieldRef<"CouponLog", 'String'>
    readonly userId: FieldRef<"CouponLog", 'Int'>
    readonly nickname: FieldRef<"CouponLog", 'String'>
    readonly couponId: FieldRef<"CouponLog", 'String'>
    readonly usedAt: FieldRef<"CouponLog", 'DateTime'>
    readonly createdAt: FieldRef<"CouponLog", 'DateTime'>
    readonly updatedAt: FieldRef<"CouponLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CouponLog findUnique
   */
  export type CouponLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter, which CouponLog to fetch.
     */
    where: CouponLogWhereUniqueInput
  }

  /**
   * CouponLog findUniqueOrThrow
   */
  export type CouponLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter, which CouponLog to fetch.
     */
    where: CouponLogWhereUniqueInput
  }

  /**
   * CouponLog findFirst
   */
  export type CouponLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter, which CouponLog to fetch.
     */
    where?: CouponLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponLogs to fetch.
     */
    orderBy?: CouponLogOrderByWithRelationInput | CouponLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CouponLogs.
     */
    cursor?: CouponLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CouponLogs.
     */
    distinct?: CouponLogScalarFieldEnum | CouponLogScalarFieldEnum[]
  }

  /**
   * CouponLog findFirstOrThrow
   */
  export type CouponLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter, which CouponLog to fetch.
     */
    where?: CouponLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponLogs to fetch.
     */
    orderBy?: CouponLogOrderByWithRelationInput | CouponLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CouponLogs.
     */
    cursor?: CouponLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CouponLogs.
     */
    distinct?: CouponLogScalarFieldEnum | CouponLogScalarFieldEnum[]
  }

  /**
   * CouponLog findMany
   */
  export type CouponLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter, which CouponLogs to fetch.
     */
    where?: CouponLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CouponLogs to fetch.
     */
    orderBy?: CouponLogOrderByWithRelationInput | CouponLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CouponLogs.
     */
    cursor?: CouponLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CouponLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CouponLogs.
     */
    skip?: number
    distinct?: CouponLogScalarFieldEnum | CouponLogScalarFieldEnum[]
  }

  /**
   * CouponLog create
   */
  export type CouponLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CouponLog.
     */
    data: XOR<CouponLogCreateInput, CouponLogUncheckedCreateInput>
  }

  /**
   * CouponLog createMany
   */
  export type CouponLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CouponLogs.
     */
    data: CouponLogCreateManyInput | CouponLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CouponLog createManyAndReturn
   */
  export type CouponLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CouponLogs.
     */
    data: CouponLogCreateManyInput | CouponLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CouponLog update
   */
  export type CouponLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CouponLog.
     */
    data: XOR<CouponLogUpdateInput, CouponLogUncheckedUpdateInput>
    /**
     * Choose, which CouponLog to update.
     */
    where: CouponLogWhereUniqueInput
  }

  /**
   * CouponLog updateMany
   */
  export type CouponLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CouponLogs.
     */
    data: XOR<CouponLogUpdateManyMutationInput, CouponLogUncheckedUpdateManyInput>
    /**
     * Filter which CouponLogs to update
     */
    where?: CouponLogWhereInput
  }

  /**
   * CouponLog upsert
   */
  export type CouponLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CouponLog to update in case it exists.
     */
    where: CouponLogWhereUniqueInput
    /**
     * In case the CouponLog found by the `where` argument doesn't exist, create a new CouponLog with this data.
     */
    create: XOR<CouponLogCreateInput, CouponLogUncheckedCreateInput>
    /**
     * In case the CouponLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CouponLogUpdateInput, CouponLogUncheckedUpdateInput>
  }

  /**
   * CouponLog delete
   */
  export type CouponLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
    /**
     * Filter which CouponLog to delete.
     */
    where: CouponLogWhereUniqueInput
  }

  /**
   * CouponLog deleteMany
   */
  export type CouponLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CouponLogs to delete
     */
    where?: CouponLogWhereInput
  }

  /**
   * CouponLog.coupon
   */
  export type CouponLog$couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon
     */
    select?: CouponSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponInclude<ExtArgs> | null
    where?: CouponWhereInput
  }

  /**
   * CouponLog without action
   */
  export type CouponLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CouponLog
     */
    select?: CouponLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponLogInclude<ExtArgs> | null
  }


  /**
   * Model ItemQuantity
   */

  export type AggregateItemQuantity = {
    _count: ItemQuantityCountAggregateOutputType | null
    _avg: ItemQuantityAvgAggregateOutputType | null
    _sum: ItemQuantitySumAggregateOutputType | null
    _min: ItemQuantityMinAggregateOutputType | null
    _max: ItemQuantityMaxAggregateOutputType | null
  }

  export type ItemQuantityAvgAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type ItemQuantitySumAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type ItemQuantityMinAggregateOutputType = {
    id: string | null
    userId: number | null
    itemId: string | null
    itemName: string | null
    amount: number | null
    type: $Enums.ActionType | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemQuantityMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    itemId: string | null
    itemName: string | null
    amount: number | null
    type: $Enums.ActionType | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemQuantityCountAggregateOutputType = {
    id: number
    userId: number
    itemId: number
    itemName: number
    amount: number
    type: number
    status: number
    registrantId: number
    approverId: number
    isApproved: number
    approvedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemQuantityAvgAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type ItemQuantitySumAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type ItemQuantityMinAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    itemName?: true
    amount?: true
    type?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemQuantityMaxAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    itemName?: true
    amount?: true
    type?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemQuantityCountAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    itemName?: true
    amount?: true
    type?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemQuantityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemQuantity to aggregate.
     */
    where?: ItemQuantityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemQuantities to fetch.
     */
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemQuantityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemQuantities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemQuantities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemQuantities
    **/
    _count?: true | ItemQuantityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemQuantityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemQuantitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemQuantityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemQuantityMaxAggregateInputType
  }

  export type GetItemQuantityAggregateType<T extends ItemQuantityAggregateArgs> = {
        [P in keyof T & keyof AggregateItemQuantity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemQuantity[P]>
      : GetScalarType<T[P], AggregateItemQuantity[P]>
  }




  export type ItemQuantityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemQuantityWhereInput
    orderBy?: ItemQuantityOrderByWithAggregationInput | ItemQuantityOrderByWithAggregationInput[]
    by: ItemQuantityScalarFieldEnum[] | ItemQuantityScalarFieldEnum
    having?: ItemQuantityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemQuantityCountAggregateInputType | true
    _avg?: ItemQuantityAvgAggregateInputType
    _sum?: ItemQuantitySumAggregateInputType
    _min?: ItemQuantityMinAggregateInputType
    _max?: ItemQuantityMaxAggregateInputType
  }

  export type ItemQuantityGroupByOutputType = {
    id: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type: $Enums.ActionType
    status: $Enums.Status
    registrantId: string | null
    approverId: string | null
    isApproved: boolean
    approvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ItemQuantityCountAggregateOutputType | null
    _avg: ItemQuantityAvgAggregateOutputType | null
    _sum: ItemQuantitySumAggregateOutputType | null
    _min: ItemQuantityMinAggregateOutputType | null
    _max: ItemQuantityMaxAggregateOutputType | null
  }

  type GetItemQuantityGroupByPayload<T extends ItemQuantityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemQuantityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemQuantityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemQuantityGroupByOutputType[P]>
            : GetScalarType<T[P], ItemQuantityGroupByOutputType[P]>
        }
      >
    >


  export type ItemQuantitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    itemId?: boolean
    itemName?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | ItemQuantity$registrantArgs<ExtArgs>
    approver?: boolean | ItemQuantity$approverArgs<ExtArgs>
  }, ExtArgs["result"]["itemQuantity"]>

  export type ItemQuantitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    itemId?: boolean
    itemName?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | ItemQuantity$registrantArgs<ExtArgs>
    approver?: boolean | ItemQuantity$approverArgs<ExtArgs>
  }, ExtArgs["result"]["itemQuantity"]>

  export type ItemQuantitySelectScalar = {
    id?: boolean
    userId?: boolean
    itemId?: boolean
    itemName?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ItemQuantityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | ItemQuantity$registrantArgs<ExtArgs>
    approver?: boolean | ItemQuantity$approverArgs<ExtArgs>
  }
  export type ItemQuantityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | ItemQuantity$registrantArgs<ExtArgs>
    approver?: boolean | ItemQuantity$approverArgs<ExtArgs>
  }

  export type $ItemQuantityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemQuantity"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      itemId: string
      itemName: string
      amount: number
      type: $Enums.ActionType
      status: $Enums.Status
      registrantId: string | null
      approverId: string | null
      isApproved: boolean
      approvedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["itemQuantity"]>
    composites: {}
  }

  type ItemQuantityGetPayload<S extends boolean | null | undefined | ItemQuantityDefaultArgs> = $Result.GetResult<Prisma.$ItemQuantityPayload, S>

  type ItemQuantityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemQuantityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemQuantityCountAggregateInputType | true
    }

  export interface ItemQuantityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemQuantity'], meta: { name: 'ItemQuantity' } }
    /**
     * Find zero or one ItemQuantity that matches the filter.
     * @param {ItemQuantityFindUniqueArgs} args - Arguments to find a ItemQuantity
     * @example
     * // Get one ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemQuantityFindUniqueArgs>(args: SelectSubset<T, ItemQuantityFindUniqueArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ItemQuantity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemQuantityFindUniqueOrThrowArgs} args - Arguments to find a ItemQuantity
     * @example
     * // Get one ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemQuantityFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemQuantityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ItemQuantity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityFindFirstArgs} args - Arguments to find a ItemQuantity
     * @example
     * // Get one ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemQuantityFindFirstArgs>(args?: SelectSubset<T, ItemQuantityFindFirstArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ItemQuantity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityFindFirstOrThrowArgs} args - Arguments to find a ItemQuantity
     * @example
     * // Get one ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemQuantityFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemQuantityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ItemQuantities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemQuantities
     * const itemQuantities = await prisma.itemQuantity.findMany()
     * 
     * // Get first 10 ItemQuantities
     * const itemQuantities = await prisma.itemQuantity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemQuantityWithIdOnly = await prisma.itemQuantity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemQuantityFindManyArgs>(args?: SelectSubset<T, ItemQuantityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ItemQuantity.
     * @param {ItemQuantityCreateArgs} args - Arguments to create a ItemQuantity.
     * @example
     * // Create one ItemQuantity
     * const ItemQuantity = await prisma.itemQuantity.create({
     *   data: {
     *     // ... data to create a ItemQuantity
     *   }
     * })
     * 
     */
    create<T extends ItemQuantityCreateArgs>(args: SelectSubset<T, ItemQuantityCreateArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ItemQuantities.
     * @param {ItemQuantityCreateManyArgs} args - Arguments to create many ItemQuantities.
     * @example
     * // Create many ItemQuantities
     * const itemQuantity = await prisma.itemQuantity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemQuantityCreateManyArgs>(args?: SelectSubset<T, ItemQuantityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ItemQuantities and returns the data saved in the database.
     * @param {ItemQuantityCreateManyAndReturnArgs} args - Arguments to create many ItemQuantities.
     * @example
     * // Create many ItemQuantities
     * const itemQuantity = await prisma.itemQuantity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ItemQuantities and only return the `id`
     * const itemQuantityWithIdOnly = await prisma.itemQuantity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemQuantityCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemQuantityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ItemQuantity.
     * @param {ItemQuantityDeleteArgs} args - Arguments to delete one ItemQuantity.
     * @example
     * // Delete one ItemQuantity
     * const ItemQuantity = await prisma.itemQuantity.delete({
     *   where: {
     *     // ... filter to delete one ItemQuantity
     *   }
     * })
     * 
     */
    delete<T extends ItemQuantityDeleteArgs>(args: SelectSubset<T, ItemQuantityDeleteArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ItemQuantity.
     * @param {ItemQuantityUpdateArgs} args - Arguments to update one ItemQuantity.
     * @example
     * // Update one ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemQuantityUpdateArgs>(args: SelectSubset<T, ItemQuantityUpdateArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ItemQuantities.
     * @param {ItemQuantityDeleteManyArgs} args - Arguments to filter ItemQuantities to delete.
     * @example
     * // Delete a few ItemQuantities
     * const { count } = await prisma.itemQuantity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemQuantityDeleteManyArgs>(args?: SelectSubset<T, ItemQuantityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemQuantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemQuantities
     * const itemQuantity = await prisma.itemQuantity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemQuantityUpdateManyArgs>(args: SelectSubset<T, ItemQuantityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ItemQuantity.
     * @param {ItemQuantityUpsertArgs} args - Arguments to update or create a ItemQuantity.
     * @example
     * // Update or create a ItemQuantity
     * const itemQuantity = await prisma.itemQuantity.upsert({
     *   create: {
     *     // ... data to create a ItemQuantity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemQuantity we want to update
     *   }
     * })
     */
    upsert<T extends ItemQuantityUpsertArgs>(args: SelectSubset<T, ItemQuantityUpsertArgs<ExtArgs>>): Prisma__ItemQuantityClient<$Result.GetResult<Prisma.$ItemQuantityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ItemQuantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityCountArgs} args - Arguments to filter ItemQuantities to count.
     * @example
     * // Count the number of ItemQuantities
     * const count = await prisma.itemQuantity.count({
     *   where: {
     *     // ... the filter for the ItemQuantities we want to count
     *   }
     * })
    **/
    count<T extends ItemQuantityCountArgs>(
      args?: Subset<T, ItemQuantityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemQuantityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemQuantity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemQuantityAggregateArgs>(args: Subset<T, ItemQuantityAggregateArgs>): Prisma.PrismaPromise<GetItemQuantityAggregateType<T>>

    /**
     * Group by ItemQuantity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemQuantityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemQuantityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemQuantityGroupByArgs['orderBy'] }
        : { orderBy?: ItemQuantityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemQuantityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemQuantityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemQuantity model
   */
  readonly fields: ItemQuantityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemQuantity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemQuantityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends ItemQuantity$registrantArgs<ExtArgs> = {}>(args?: Subset<T, ItemQuantity$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    approver<T extends ItemQuantity$approverArgs<ExtArgs> = {}>(args?: Subset<T, ItemQuantity$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemQuantity model
   */ 
  interface ItemQuantityFieldRefs {
    readonly id: FieldRef<"ItemQuantity", 'String'>
    readonly userId: FieldRef<"ItemQuantity", 'Int'>
    readonly itemId: FieldRef<"ItemQuantity", 'String'>
    readonly itemName: FieldRef<"ItemQuantity", 'String'>
    readonly amount: FieldRef<"ItemQuantity", 'Int'>
    readonly type: FieldRef<"ItemQuantity", 'ActionType'>
    readonly status: FieldRef<"ItemQuantity", 'Status'>
    readonly registrantId: FieldRef<"ItemQuantity", 'String'>
    readonly approverId: FieldRef<"ItemQuantity", 'String'>
    readonly isApproved: FieldRef<"ItemQuantity", 'Boolean'>
    readonly approvedAt: FieldRef<"ItemQuantity", 'DateTime'>
    readonly createdAt: FieldRef<"ItemQuantity", 'DateTime'>
    readonly updatedAt: FieldRef<"ItemQuantity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ItemQuantity findUnique
   */
  export type ItemQuantityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter, which ItemQuantity to fetch.
     */
    where: ItemQuantityWhereUniqueInput
  }

  /**
   * ItemQuantity findUniqueOrThrow
   */
  export type ItemQuantityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter, which ItemQuantity to fetch.
     */
    where: ItemQuantityWhereUniqueInput
  }

  /**
   * ItemQuantity findFirst
   */
  export type ItemQuantityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter, which ItemQuantity to fetch.
     */
    where?: ItemQuantityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemQuantities to fetch.
     */
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemQuantities.
     */
    cursor?: ItemQuantityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemQuantities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemQuantities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemQuantities.
     */
    distinct?: ItemQuantityScalarFieldEnum | ItemQuantityScalarFieldEnum[]
  }

  /**
   * ItemQuantity findFirstOrThrow
   */
  export type ItemQuantityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter, which ItemQuantity to fetch.
     */
    where?: ItemQuantityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemQuantities to fetch.
     */
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemQuantities.
     */
    cursor?: ItemQuantityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemQuantities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemQuantities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemQuantities.
     */
    distinct?: ItemQuantityScalarFieldEnum | ItemQuantityScalarFieldEnum[]
  }

  /**
   * ItemQuantity findMany
   */
  export type ItemQuantityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter, which ItemQuantities to fetch.
     */
    where?: ItemQuantityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemQuantities to fetch.
     */
    orderBy?: ItemQuantityOrderByWithRelationInput | ItemQuantityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemQuantities.
     */
    cursor?: ItemQuantityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemQuantities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemQuantities.
     */
    skip?: number
    distinct?: ItemQuantityScalarFieldEnum | ItemQuantityScalarFieldEnum[]
  }

  /**
   * ItemQuantity create
   */
  export type ItemQuantityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemQuantity.
     */
    data: XOR<ItemQuantityCreateInput, ItemQuantityUncheckedCreateInput>
  }

  /**
   * ItemQuantity createMany
   */
  export type ItemQuantityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemQuantities.
     */
    data: ItemQuantityCreateManyInput | ItemQuantityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemQuantity createManyAndReturn
   */
  export type ItemQuantityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ItemQuantities.
     */
    data: ItemQuantityCreateManyInput | ItemQuantityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ItemQuantity update
   */
  export type ItemQuantityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemQuantity.
     */
    data: XOR<ItemQuantityUpdateInput, ItemQuantityUncheckedUpdateInput>
    /**
     * Choose, which ItemQuantity to update.
     */
    where: ItemQuantityWhereUniqueInput
  }

  /**
   * ItemQuantity updateMany
   */
  export type ItemQuantityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemQuantities.
     */
    data: XOR<ItemQuantityUpdateManyMutationInput, ItemQuantityUncheckedUpdateManyInput>
    /**
     * Filter which ItemQuantities to update
     */
    where?: ItemQuantityWhereInput
  }

  /**
   * ItemQuantity upsert
   */
  export type ItemQuantityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemQuantity to update in case it exists.
     */
    where: ItemQuantityWhereUniqueInput
    /**
     * In case the ItemQuantity found by the `where` argument doesn't exist, create a new ItemQuantity with this data.
     */
    create: XOR<ItemQuantityCreateInput, ItemQuantityUncheckedCreateInput>
    /**
     * In case the ItemQuantity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemQuantityUpdateInput, ItemQuantityUncheckedUpdateInput>
  }

  /**
   * ItemQuantity delete
   */
  export type ItemQuantityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
    /**
     * Filter which ItemQuantity to delete.
     */
    where: ItemQuantityWhereUniqueInput
  }

  /**
   * ItemQuantity deleteMany
   */
  export type ItemQuantityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemQuantities to delete
     */
    where?: ItemQuantityWhereInput
  }

  /**
   * ItemQuantity.registrant
   */
  export type ItemQuantity$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ItemQuantity.approver
   */
  export type ItemQuantity$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ItemQuantity without action
   */
  export type ItemQuantityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemQuantity
     */
    select?: ItemQuantitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemQuantityInclude<ExtArgs> | null
  }


  /**
   * Model RewardRevoke
   */

  export type AggregateRewardRevoke = {
    _count: RewardRevokeCountAggregateOutputType | null
    _avg: RewardRevokeAvgAggregateOutputType | null
    _sum: RewardRevokeSumAggregateOutputType | null
    _min: RewardRevokeMinAggregateOutputType | null
    _max: RewardRevokeMaxAggregateOutputType | null
  }

  export type RewardRevokeAvgAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type RewardRevokeSumAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type RewardRevokeMinAggregateOutputType = {
    id: string | null
    userId: number | null
    amount: number | null
    status: $Enums.Status | null
    type: $Enums.ActionType | null
    creditType: $Enums.RewardRevokeCreditType | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RewardRevokeMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    amount: number | null
    status: $Enums.Status | null
    type: $Enums.ActionType | null
    creditType: $Enums.RewardRevokeCreditType | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RewardRevokeCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    status: number
    type: number
    creditType: number
    registrantId: number
    approverId: number
    isApproved: number
    approvedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RewardRevokeAvgAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type RewardRevokeSumAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type RewardRevokeMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    status?: true
    type?: true
    creditType?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RewardRevokeMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    status?: true
    type?: true
    creditType?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RewardRevokeCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    status?: true
    type?: true
    creditType?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RewardRevokeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RewardRevoke to aggregate.
     */
    where?: RewardRevokeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardRevokes to fetch.
     */
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RewardRevokeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardRevokes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardRevokes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RewardRevokes
    **/
    _count?: true | RewardRevokeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RewardRevokeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RewardRevokeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RewardRevokeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RewardRevokeMaxAggregateInputType
  }

  export type GetRewardRevokeAggregateType<T extends RewardRevokeAggregateArgs> = {
        [P in keyof T & keyof AggregateRewardRevoke]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRewardRevoke[P]>
      : GetScalarType<T[P], AggregateRewardRevoke[P]>
  }




  export type RewardRevokeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RewardRevokeWhereInput
    orderBy?: RewardRevokeOrderByWithAggregationInput | RewardRevokeOrderByWithAggregationInput[]
    by: RewardRevokeScalarFieldEnum[] | RewardRevokeScalarFieldEnum
    having?: RewardRevokeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RewardRevokeCountAggregateInputType | true
    _avg?: RewardRevokeAvgAggregateInputType
    _sum?: RewardRevokeSumAggregateInputType
    _min?: RewardRevokeMinAggregateInputType
    _max?: RewardRevokeMaxAggregateInputType
  }

  export type RewardRevokeGroupByOutputType = {
    id: string
    userId: number
    amount: number
    status: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    registrantId: string | null
    approverId: string | null
    isApproved: boolean
    approvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RewardRevokeCountAggregateOutputType | null
    _avg: RewardRevokeAvgAggregateOutputType | null
    _sum: RewardRevokeSumAggregateOutputType | null
    _min: RewardRevokeMinAggregateOutputType | null
    _max: RewardRevokeMaxAggregateOutputType | null
  }

  type GetRewardRevokeGroupByPayload<T extends RewardRevokeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RewardRevokeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RewardRevokeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RewardRevokeGroupByOutputType[P]>
            : GetScalarType<T[P], RewardRevokeGroupByOutputType[P]>
        }
      >
    >


  export type RewardRevokeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    status?: boolean
    type?: boolean
    creditType?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | RewardRevoke$registrantArgs<ExtArgs>
    approver?: boolean | RewardRevoke$approverArgs<ExtArgs>
  }, ExtArgs["result"]["rewardRevoke"]>

  export type RewardRevokeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    status?: boolean
    type?: boolean
    creditType?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | RewardRevoke$registrantArgs<ExtArgs>
    approver?: boolean | RewardRevoke$approverArgs<ExtArgs>
  }, ExtArgs["result"]["rewardRevoke"]>

  export type RewardRevokeSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    status?: boolean
    type?: boolean
    creditType?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RewardRevokeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | RewardRevoke$registrantArgs<ExtArgs>
    approver?: boolean | RewardRevoke$approverArgs<ExtArgs>
  }
  export type RewardRevokeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | RewardRevoke$registrantArgs<ExtArgs>
    approver?: boolean | RewardRevoke$approverArgs<ExtArgs>
  }

  export type $RewardRevokePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RewardRevoke"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      amount: number
      status: $Enums.Status
      type: $Enums.ActionType
      creditType: $Enums.RewardRevokeCreditType
      registrantId: string | null
      approverId: string | null
      isApproved: boolean
      approvedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rewardRevoke"]>
    composites: {}
  }

  type RewardRevokeGetPayload<S extends boolean | null | undefined | RewardRevokeDefaultArgs> = $Result.GetResult<Prisma.$RewardRevokePayload, S>

  type RewardRevokeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RewardRevokeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RewardRevokeCountAggregateInputType | true
    }

  export interface RewardRevokeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RewardRevoke'], meta: { name: 'RewardRevoke' } }
    /**
     * Find zero or one RewardRevoke that matches the filter.
     * @param {RewardRevokeFindUniqueArgs} args - Arguments to find a RewardRevoke
     * @example
     * // Get one RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RewardRevokeFindUniqueArgs>(args: SelectSubset<T, RewardRevokeFindUniqueArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RewardRevoke that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RewardRevokeFindUniqueOrThrowArgs} args - Arguments to find a RewardRevoke
     * @example
     * // Get one RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RewardRevokeFindUniqueOrThrowArgs>(args: SelectSubset<T, RewardRevokeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RewardRevoke that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeFindFirstArgs} args - Arguments to find a RewardRevoke
     * @example
     * // Get one RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RewardRevokeFindFirstArgs>(args?: SelectSubset<T, RewardRevokeFindFirstArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RewardRevoke that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeFindFirstOrThrowArgs} args - Arguments to find a RewardRevoke
     * @example
     * // Get one RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RewardRevokeFindFirstOrThrowArgs>(args?: SelectSubset<T, RewardRevokeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RewardRevokes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RewardRevokes
     * const rewardRevokes = await prisma.rewardRevoke.findMany()
     * 
     * // Get first 10 RewardRevokes
     * const rewardRevokes = await prisma.rewardRevoke.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rewardRevokeWithIdOnly = await prisma.rewardRevoke.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RewardRevokeFindManyArgs>(args?: SelectSubset<T, RewardRevokeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RewardRevoke.
     * @param {RewardRevokeCreateArgs} args - Arguments to create a RewardRevoke.
     * @example
     * // Create one RewardRevoke
     * const RewardRevoke = await prisma.rewardRevoke.create({
     *   data: {
     *     // ... data to create a RewardRevoke
     *   }
     * })
     * 
     */
    create<T extends RewardRevokeCreateArgs>(args: SelectSubset<T, RewardRevokeCreateArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RewardRevokes.
     * @param {RewardRevokeCreateManyArgs} args - Arguments to create many RewardRevokes.
     * @example
     * // Create many RewardRevokes
     * const rewardRevoke = await prisma.rewardRevoke.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RewardRevokeCreateManyArgs>(args?: SelectSubset<T, RewardRevokeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RewardRevokes and returns the data saved in the database.
     * @param {RewardRevokeCreateManyAndReturnArgs} args - Arguments to create many RewardRevokes.
     * @example
     * // Create many RewardRevokes
     * const rewardRevoke = await prisma.rewardRevoke.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RewardRevokes and only return the `id`
     * const rewardRevokeWithIdOnly = await prisma.rewardRevoke.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RewardRevokeCreateManyAndReturnArgs>(args?: SelectSubset<T, RewardRevokeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RewardRevoke.
     * @param {RewardRevokeDeleteArgs} args - Arguments to delete one RewardRevoke.
     * @example
     * // Delete one RewardRevoke
     * const RewardRevoke = await prisma.rewardRevoke.delete({
     *   where: {
     *     // ... filter to delete one RewardRevoke
     *   }
     * })
     * 
     */
    delete<T extends RewardRevokeDeleteArgs>(args: SelectSubset<T, RewardRevokeDeleteArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RewardRevoke.
     * @param {RewardRevokeUpdateArgs} args - Arguments to update one RewardRevoke.
     * @example
     * // Update one RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RewardRevokeUpdateArgs>(args: SelectSubset<T, RewardRevokeUpdateArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RewardRevokes.
     * @param {RewardRevokeDeleteManyArgs} args - Arguments to filter RewardRevokes to delete.
     * @example
     * // Delete a few RewardRevokes
     * const { count } = await prisma.rewardRevoke.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RewardRevokeDeleteManyArgs>(args?: SelectSubset<T, RewardRevokeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RewardRevokes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RewardRevokes
     * const rewardRevoke = await prisma.rewardRevoke.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RewardRevokeUpdateManyArgs>(args: SelectSubset<T, RewardRevokeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RewardRevoke.
     * @param {RewardRevokeUpsertArgs} args - Arguments to update or create a RewardRevoke.
     * @example
     * // Update or create a RewardRevoke
     * const rewardRevoke = await prisma.rewardRevoke.upsert({
     *   create: {
     *     // ... data to create a RewardRevoke
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RewardRevoke we want to update
     *   }
     * })
     */
    upsert<T extends RewardRevokeUpsertArgs>(args: SelectSubset<T, RewardRevokeUpsertArgs<ExtArgs>>): Prisma__RewardRevokeClient<$Result.GetResult<Prisma.$RewardRevokePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RewardRevokes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeCountArgs} args - Arguments to filter RewardRevokes to count.
     * @example
     * // Count the number of RewardRevokes
     * const count = await prisma.rewardRevoke.count({
     *   where: {
     *     // ... the filter for the RewardRevokes we want to count
     *   }
     * })
    **/
    count<T extends RewardRevokeCountArgs>(
      args?: Subset<T, RewardRevokeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RewardRevokeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RewardRevoke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RewardRevokeAggregateArgs>(args: Subset<T, RewardRevokeAggregateArgs>): Prisma.PrismaPromise<GetRewardRevokeAggregateType<T>>

    /**
     * Group by RewardRevoke.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RewardRevokeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RewardRevokeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RewardRevokeGroupByArgs['orderBy'] }
        : { orderBy?: RewardRevokeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RewardRevokeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRewardRevokeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RewardRevoke model
   */
  readonly fields: RewardRevokeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RewardRevoke.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RewardRevokeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends RewardRevoke$registrantArgs<ExtArgs> = {}>(args?: Subset<T, RewardRevoke$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    approver<T extends RewardRevoke$approverArgs<ExtArgs> = {}>(args?: Subset<T, RewardRevoke$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RewardRevoke model
   */ 
  interface RewardRevokeFieldRefs {
    readonly id: FieldRef<"RewardRevoke", 'String'>
    readonly userId: FieldRef<"RewardRevoke", 'Int'>
    readonly amount: FieldRef<"RewardRevoke", 'Int'>
    readonly status: FieldRef<"RewardRevoke", 'Status'>
    readonly type: FieldRef<"RewardRevoke", 'ActionType'>
    readonly creditType: FieldRef<"RewardRevoke", 'RewardRevokeCreditType'>
    readonly registrantId: FieldRef<"RewardRevoke", 'String'>
    readonly approverId: FieldRef<"RewardRevoke", 'String'>
    readonly isApproved: FieldRef<"RewardRevoke", 'Boolean'>
    readonly approvedAt: FieldRef<"RewardRevoke", 'DateTime'>
    readonly createdAt: FieldRef<"RewardRevoke", 'DateTime'>
    readonly updatedAt: FieldRef<"RewardRevoke", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RewardRevoke findUnique
   */
  export type RewardRevokeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter, which RewardRevoke to fetch.
     */
    where: RewardRevokeWhereUniqueInput
  }

  /**
   * RewardRevoke findUniqueOrThrow
   */
  export type RewardRevokeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter, which RewardRevoke to fetch.
     */
    where: RewardRevokeWhereUniqueInput
  }

  /**
   * RewardRevoke findFirst
   */
  export type RewardRevokeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter, which RewardRevoke to fetch.
     */
    where?: RewardRevokeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardRevokes to fetch.
     */
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RewardRevokes.
     */
    cursor?: RewardRevokeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardRevokes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardRevokes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RewardRevokes.
     */
    distinct?: RewardRevokeScalarFieldEnum | RewardRevokeScalarFieldEnum[]
  }

  /**
   * RewardRevoke findFirstOrThrow
   */
  export type RewardRevokeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter, which RewardRevoke to fetch.
     */
    where?: RewardRevokeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardRevokes to fetch.
     */
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RewardRevokes.
     */
    cursor?: RewardRevokeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardRevokes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardRevokes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RewardRevokes.
     */
    distinct?: RewardRevokeScalarFieldEnum | RewardRevokeScalarFieldEnum[]
  }

  /**
   * RewardRevoke findMany
   */
  export type RewardRevokeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter, which RewardRevokes to fetch.
     */
    where?: RewardRevokeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RewardRevokes to fetch.
     */
    orderBy?: RewardRevokeOrderByWithRelationInput | RewardRevokeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RewardRevokes.
     */
    cursor?: RewardRevokeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RewardRevokes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RewardRevokes.
     */
    skip?: number
    distinct?: RewardRevokeScalarFieldEnum | RewardRevokeScalarFieldEnum[]
  }

  /**
   * RewardRevoke create
   */
  export type RewardRevokeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * The data needed to create a RewardRevoke.
     */
    data: XOR<RewardRevokeCreateInput, RewardRevokeUncheckedCreateInput>
  }

  /**
   * RewardRevoke createMany
   */
  export type RewardRevokeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RewardRevokes.
     */
    data: RewardRevokeCreateManyInput | RewardRevokeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RewardRevoke createManyAndReturn
   */
  export type RewardRevokeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RewardRevokes.
     */
    data: RewardRevokeCreateManyInput | RewardRevokeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RewardRevoke update
   */
  export type RewardRevokeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * The data needed to update a RewardRevoke.
     */
    data: XOR<RewardRevokeUpdateInput, RewardRevokeUncheckedUpdateInput>
    /**
     * Choose, which RewardRevoke to update.
     */
    where: RewardRevokeWhereUniqueInput
  }

  /**
   * RewardRevoke updateMany
   */
  export type RewardRevokeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RewardRevokes.
     */
    data: XOR<RewardRevokeUpdateManyMutationInput, RewardRevokeUncheckedUpdateManyInput>
    /**
     * Filter which RewardRevokes to update
     */
    where?: RewardRevokeWhereInput
  }

  /**
   * RewardRevoke upsert
   */
  export type RewardRevokeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * The filter to search for the RewardRevoke to update in case it exists.
     */
    where: RewardRevokeWhereUniqueInput
    /**
     * In case the RewardRevoke found by the `where` argument doesn't exist, create a new RewardRevoke with this data.
     */
    create: XOR<RewardRevokeCreateInput, RewardRevokeUncheckedCreateInput>
    /**
     * In case the RewardRevoke was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RewardRevokeUpdateInput, RewardRevokeUncheckedUpdateInput>
  }

  /**
   * RewardRevoke delete
   */
  export type RewardRevokeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
    /**
     * Filter which RewardRevoke to delete.
     */
    where: RewardRevokeWhereUniqueInput
  }

  /**
   * RewardRevoke deleteMany
   */
  export type RewardRevokeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RewardRevokes to delete
     */
    where?: RewardRevokeWhereInput
  }

  /**
   * RewardRevoke.registrant
   */
  export type RewardRevoke$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RewardRevoke.approver
   */
  export type RewardRevoke$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RewardRevoke without action
   */
  export type RewardRevokeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RewardRevoke
     */
    select?: RewardRevokeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RewardRevokeInclude<ExtArgs> | null
  }


  /**
   * Model Items
   */

  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsMinAggregateOutputType = {
    id: string | null
    itemId: string | null
    itemName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: string | null
    itemId: string | null
    itemName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    itemId: number
    itemName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemsMinAggregateInputType = {
    id?: true
    itemId?: true
    itemName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    itemId?: true
    itemName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    itemId?: true
    itemName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to aggregate.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemsWhereInput
    orderBy?: ItemsOrderByWithAggregationInput | ItemsOrderByWithAggregationInput[]
    by: ItemsScalarFieldEnum[] | ItemsScalarFieldEnum
    having?: ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }

  export type ItemsGroupByOutputType = {
    id: string
    itemId: string
    itemName: string
    createdAt: Date
    updatedAt: Date
    _count: ItemsCountAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type ItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    itemName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    itemName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["items"]>

  export type ItemsSelectScalar = {
    id?: boolean
    itemId?: boolean
    itemName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Items"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemId: string
      itemName: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["items"]>
    composites: {}
  }

  type ItemsGetPayload<S extends boolean | null | undefined | ItemsDefaultArgs> = $Result.GetResult<Prisma.$ItemsPayload, S>

  type ItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemsCountAggregateInputType | true
    }

  export interface ItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Items'], meta: { name: 'Items' } }
    /**
     * Find zero or one Items that matches the filter.
     * @param {ItemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemsFindUniqueArgs>(args: SelectSubset<T, ItemsFindUniqueArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Items that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemsFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemsFindFirstArgs>(args?: SelectSubset<T, ItemsFindFirstArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemsFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemsFindManyArgs>(args?: SelectSubset<T, ItemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Items.
     * @param {ItemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
     */
    create<T extends ItemsCreateArgs>(args: SelectSubset<T, ItemsCreateArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemsCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const items = await prisma.items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemsCreateManyArgs>(args?: SelectSubset<T, ItemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemsCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const items = await prisma.items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `id`
     * const itemsWithIdOnly = await prisma.items.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemsCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Items.
     * @param {ItemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
     */
    delete<T extends ItemsDeleteArgs>(args: SelectSubset<T, ItemsDeleteArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Items.
     * @param {ItemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemsUpdateArgs>(args: SelectSubset<T, ItemsUpdateArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemsDeleteManyArgs>(args?: SelectSubset<T, ItemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemsUpdateManyArgs>(args: SelectSubset<T, ItemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {ItemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
     */
    upsert<T extends ItemsUpsertArgs>(args: SelectSubset<T, ItemsUpsertArgs<ExtArgs>>): Prisma__ItemsClient<$Result.GetResult<Prisma.$ItemsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountArgs>(
      args?: Subset<T, ItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): Prisma.PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Items model
   */
  readonly fields: ItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Items model
   */ 
  interface ItemsFieldRefs {
    readonly id: FieldRef<"Items", 'String'>
    readonly itemId: FieldRef<"Items", 'String'>
    readonly itemName: FieldRef<"Items", 'String'>
    readonly createdAt: FieldRef<"Items", 'DateTime'>
    readonly updatedAt: FieldRef<"Items", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Items findUnique
   */
  export type ItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items findUniqueOrThrow
   */
  export type ItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items findFirst
   */
  export type ItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items findFirstOrThrow
   */
  export type ItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items findMany
   */
  export type ItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemsOrderByWithRelationInput | ItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemsScalarFieldEnum | ItemsScalarFieldEnum[]
  }

  /**
   * Items create
   */
  export type ItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * The data needed to create a Items.
     */
    data: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
  }

  /**
   * Items createMany
   */
  export type ItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Items createManyAndReturn
   */
  export type ItemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemsCreateManyInput | ItemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Items update
   */
  export type ItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * The data needed to update a Items.
     */
    data: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
    /**
     * Choose, which Items to update.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items updateMany
   */
  export type ItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemsWhereInput
  }

  /**
   * Items upsert
   */
  export type ItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * The filter to search for the Items to update in case it exists.
     */
    where: ItemsWhereUniqueInput
    /**
     * In case the Items found by the `where` argument doesn't exist, create a new Items with this data.
     */
    create: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
    /**
     * In case the Items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
  }

  /**
   * Items delete
   */
  export type ItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
    /**
     * Filter which Items to delete.
     */
    where: ItemsWhereUniqueInput
  }

  /**
   * Items deleteMany
   */
  export type ItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemsWhereInput
  }

  /**
   * Items without action
   */
  export type ItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Items
     */
    select?: ItemsSelect<ExtArgs> | null
  }


  /**
   * Model Groups
   */

  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsMinAggregateOutputType = {
    id: string | null
    groupId: string | null
    groupBoolean: boolean | null
    minRole: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: string | null
    groupId: string | null
    groupBoolean: boolean | null
    minRole: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    groupId: number
    groupBoolean: number
    minRole: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupsMinAggregateInputType = {
    id?: true
    groupId?: true
    groupBoolean?: true
    minRole?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    groupId?: true
    groupBoolean?: true
    minRole?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    groupId?: true
    groupBoolean?: true
    minRole?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to aggregate.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupsOrderByWithRelationInput | GroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupsWhereInput
    orderBy?: GroupsOrderByWithAggregationInput | GroupsOrderByWithAggregationInput[]
    by: GroupsScalarFieldEnum[] | GroupsScalarFieldEnum
    having?: GroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }

  export type GroupsGroupByOutputType = {
    id: string
    groupId: string
    groupBoolean: boolean
    minRole: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupId?: boolean
    groupBoolean?: boolean
    minRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["groups"]>

  export type GroupsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupId?: boolean
    groupBoolean?: boolean
    minRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["groups"]>

  export type GroupsSelectScalar = {
    id?: boolean
    groupId?: boolean
    groupBoolean?: boolean
    minRole?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $GroupsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Groups"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      groupId: string
      groupBoolean: boolean
      minRole: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["groups"]>
    composites: {}
  }

  type GroupsGetPayload<S extends boolean | null | undefined | GroupsDefaultArgs> = $Result.GetResult<Prisma.$GroupsPayload, S>

  type GroupsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupsCountAggregateInputType | true
    }

  export interface GroupsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Groups'], meta: { name: 'Groups' } }
    /**
     * Find zero or one Groups that matches the filter.
     * @param {GroupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupsFindUniqueArgs>(args: SelectSubset<T, GroupsFindUniqueArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Groups that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupsFindUniqueOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupsFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupsFindFirstArgs>(args?: SelectSubset<T, GroupsFindFirstArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Groups that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupsFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupsFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupsFindManyArgs>(args?: SelectSubset<T, GroupsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Groups.
     * @param {GroupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
     */
    create<T extends GroupsCreateArgs>(args: SelectSubset<T, GroupsCreateArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupsCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const groups = await prisma.groups.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupsCreateManyArgs>(args?: SelectSubset<T, GroupsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupsCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const groups = await prisma.groups.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupsWithIdOnly = await prisma.groups.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupsCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Groups.
     * @param {GroupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
     */
    delete<T extends GroupsDeleteArgs>(args: SelectSubset<T, GroupsDeleteArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Groups.
     * @param {GroupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupsUpdateArgs>(args: SelectSubset<T, GroupsUpdateArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupsDeleteManyArgs>(args?: SelectSubset<T, GroupsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupsUpdateManyArgs>(args: SelectSubset<T, GroupsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {GroupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
     */
    upsert<T extends GroupsUpsertArgs>(args: SelectSubset<T, GroupsUpsertArgs<ExtArgs>>): Prisma__GroupsClient<$Result.GetResult<Prisma.$GroupsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupsCountArgs>(
      args?: Subset<T, GroupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): Prisma.PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Groups model
   */
  readonly fields: GroupsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Groups model
   */ 
  interface GroupsFieldRefs {
    readonly id: FieldRef<"Groups", 'String'>
    readonly groupId: FieldRef<"Groups", 'String'>
    readonly groupBoolean: FieldRef<"Groups", 'Boolean'>
    readonly minRole: FieldRef<"Groups", 'UserRole'>
    readonly createdAt: FieldRef<"Groups", 'DateTime'>
    readonly updatedAt: FieldRef<"Groups", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Groups findUnique
   */
  export type GroupsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups findUniqueOrThrow
   */
  export type GroupsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups findFirst
   */
  export type GroupsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupsOrderByWithRelationInput | GroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupsScalarFieldEnum | GroupsScalarFieldEnum[]
  }

  /**
   * Groups findFirstOrThrow
   */
  export type GroupsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupsOrderByWithRelationInput | GroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupsScalarFieldEnum | GroupsScalarFieldEnum[]
  }

  /**
   * Groups findMany
   */
  export type GroupsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupsOrderByWithRelationInput | GroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupsScalarFieldEnum | GroupsScalarFieldEnum[]
  }

  /**
   * Groups create
   */
  export type GroupsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * The data needed to create a Groups.
     */
    data: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
  }

  /**
   * Groups createMany
   */
  export type GroupsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupsCreateManyInput | GroupsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Groups createManyAndReturn
   */
  export type GroupsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupsCreateManyInput | GroupsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Groups update
   */
  export type GroupsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * The data needed to update a Groups.
     */
    data: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
    /**
     * Choose, which Groups to update.
     */
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups updateMany
   */
  export type GroupsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupsWhereInput
  }

  /**
   * Groups upsert
   */
  export type GroupsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * The filter to search for the Groups to update in case it exists.
     */
    where: GroupsWhereUniqueInput
    /**
     * In case the Groups found by the `where` argument doesn't exist, create a new Groups with this data.
     */
    create: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
    /**
     * In case the Groups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
  }

  /**
   * Groups delete
   */
  export type GroupsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
    /**
     * Filter which Groups to delete.
     */
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups deleteMany
   */
  export type GroupsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupsWhereInput
  }

  /**
   * Groups without action
   */
  export type GroupsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect<ExtArgs> | null
  }


  /**
   * Model CreditManagement
   */

  export type AggregateCreditManagement = {
    _count: CreditManagementCountAggregateOutputType | null
    _avg: CreditManagementAvgAggregateOutputType | null
    _sum: CreditManagementSumAggregateOutputType | null
    _min: CreditManagementMinAggregateOutputType | null
    _max: CreditManagementMaxAggregateOutputType | null
  }

  export type CreditManagementAvgAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type CreditManagementSumAggregateOutputType = {
    userId: number | null
    amount: number | null
  }

  export type CreditManagementMinAggregateOutputType = {
    id: string | null
    userId: number | null
    type: $Enums.ActionType | null
    creditType: $Enums.CreditType | null
    amount: number | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditManagementMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    type: $Enums.ActionType | null
    creditType: $Enums.CreditType | null
    amount: number | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditManagementCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    creditType: number
    amount: number
    status: number
    registrantId: number
    approverId: number
    isApproved: number
    approvedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CreditManagementAvgAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type CreditManagementSumAggregateInputType = {
    userId?: true
    amount?: true
  }

  export type CreditManagementMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    creditType?: true
    amount?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditManagementMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    creditType?: true
    amount?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditManagementCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    creditType?: true
    amount?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CreditManagementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditManagement to aggregate.
     */
    where?: CreditManagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditManagements to fetch.
     */
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditManagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditManagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditManagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreditManagements
    **/
    _count?: true | CreditManagementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreditManagementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreditManagementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditManagementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditManagementMaxAggregateInputType
  }

  export type GetCreditManagementAggregateType<T extends CreditManagementAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditManagement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditManagement[P]>
      : GetScalarType<T[P], AggregateCreditManagement[P]>
  }




  export type CreditManagementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditManagementWhereInput
    orderBy?: CreditManagementOrderByWithAggregationInput | CreditManagementOrderByWithAggregationInput[]
    by: CreditManagementScalarFieldEnum[] | CreditManagementScalarFieldEnum
    having?: CreditManagementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditManagementCountAggregateInputType | true
    _avg?: CreditManagementAvgAggregateInputType
    _sum?: CreditManagementSumAggregateInputType
    _min?: CreditManagementMinAggregateInputType
    _max?: CreditManagementMaxAggregateInputType
  }

  export type CreditManagementGroupByOutputType = {
    id: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status: $Enums.Status
    registrantId: string | null
    approverId: string | null
    isApproved: boolean
    approvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: CreditManagementCountAggregateOutputType | null
    _avg: CreditManagementAvgAggregateOutputType | null
    _sum: CreditManagementSumAggregateOutputType | null
    _min: CreditManagementMinAggregateOutputType | null
    _max: CreditManagementMaxAggregateOutputType | null
  }

  type GetCreditManagementGroupByPayload<T extends CreditManagementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditManagementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditManagementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditManagementGroupByOutputType[P]>
            : GetScalarType<T[P], CreditManagementGroupByOutputType[P]>
        }
      >
    >


  export type CreditManagementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    creditType?: boolean
    amount?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | CreditManagement$registrantArgs<ExtArgs>
    approver?: boolean | CreditManagement$approverArgs<ExtArgs>
  }, ExtArgs["result"]["creditManagement"]>

  export type CreditManagementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    creditType?: boolean
    amount?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | CreditManagement$registrantArgs<ExtArgs>
    approver?: boolean | CreditManagement$approverArgs<ExtArgs>
  }, ExtArgs["result"]["creditManagement"]>

  export type CreditManagementSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    creditType?: boolean
    amount?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CreditManagementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | CreditManagement$registrantArgs<ExtArgs>
    approver?: boolean | CreditManagement$approverArgs<ExtArgs>
  }
  export type CreditManagementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | CreditManagement$registrantArgs<ExtArgs>
    approver?: boolean | CreditManagement$approverArgs<ExtArgs>
  }

  export type $CreditManagementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreditManagement"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      type: $Enums.ActionType
      creditType: $Enums.CreditType
      amount: number
      status: $Enums.Status
      registrantId: string | null
      approverId: string | null
      isApproved: boolean
      approvedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["creditManagement"]>
    composites: {}
  }

  type CreditManagementGetPayload<S extends boolean | null | undefined | CreditManagementDefaultArgs> = $Result.GetResult<Prisma.$CreditManagementPayload, S>

  type CreditManagementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreditManagementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CreditManagementCountAggregateInputType | true
    }

  export interface CreditManagementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreditManagement'], meta: { name: 'CreditManagement' } }
    /**
     * Find zero or one CreditManagement that matches the filter.
     * @param {CreditManagementFindUniqueArgs} args - Arguments to find a CreditManagement
     * @example
     * // Get one CreditManagement
     * const creditManagement = await prisma.creditManagement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditManagementFindUniqueArgs>(args: SelectSubset<T, CreditManagementFindUniqueArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CreditManagement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CreditManagementFindUniqueOrThrowArgs} args - Arguments to find a CreditManagement
     * @example
     * // Get one CreditManagement
     * const creditManagement = await prisma.creditManagement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditManagementFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditManagementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CreditManagement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementFindFirstArgs} args - Arguments to find a CreditManagement
     * @example
     * // Get one CreditManagement
     * const creditManagement = await prisma.creditManagement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditManagementFindFirstArgs>(args?: SelectSubset<T, CreditManagementFindFirstArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CreditManagement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementFindFirstOrThrowArgs} args - Arguments to find a CreditManagement
     * @example
     * // Get one CreditManagement
     * const creditManagement = await prisma.creditManagement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditManagementFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditManagementFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CreditManagements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditManagements
     * const creditManagements = await prisma.creditManagement.findMany()
     * 
     * // Get first 10 CreditManagements
     * const creditManagements = await prisma.creditManagement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditManagementWithIdOnly = await prisma.creditManagement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditManagementFindManyArgs>(args?: SelectSubset<T, CreditManagementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CreditManagement.
     * @param {CreditManagementCreateArgs} args - Arguments to create a CreditManagement.
     * @example
     * // Create one CreditManagement
     * const CreditManagement = await prisma.creditManagement.create({
     *   data: {
     *     // ... data to create a CreditManagement
     *   }
     * })
     * 
     */
    create<T extends CreditManagementCreateArgs>(args: SelectSubset<T, CreditManagementCreateArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CreditManagements.
     * @param {CreditManagementCreateManyArgs} args - Arguments to create many CreditManagements.
     * @example
     * // Create many CreditManagements
     * const creditManagement = await prisma.creditManagement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditManagementCreateManyArgs>(args?: SelectSubset<T, CreditManagementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CreditManagements and returns the data saved in the database.
     * @param {CreditManagementCreateManyAndReturnArgs} args - Arguments to create many CreditManagements.
     * @example
     * // Create many CreditManagements
     * const creditManagement = await prisma.creditManagement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CreditManagements and only return the `id`
     * const creditManagementWithIdOnly = await prisma.creditManagement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CreditManagementCreateManyAndReturnArgs>(args?: SelectSubset<T, CreditManagementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CreditManagement.
     * @param {CreditManagementDeleteArgs} args - Arguments to delete one CreditManagement.
     * @example
     * // Delete one CreditManagement
     * const CreditManagement = await prisma.creditManagement.delete({
     *   where: {
     *     // ... filter to delete one CreditManagement
     *   }
     * })
     * 
     */
    delete<T extends CreditManagementDeleteArgs>(args: SelectSubset<T, CreditManagementDeleteArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CreditManagement.
     * @param {CreditManagementUpdateArgs} args - Arguments to update one CreditManagement.
     * @example
     * // Update one CreditManagement
     * const creditManagement = await prisma.creditManagement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditManagementUpdateArgs>(args: SelectSubset<T, CreditManagementUpdateArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CreditManagements.
     * @param {CreditManagementDeleteManyArgs} args - Arguments to filter CreditManagements to delete.
     * @example
     * // Delete a few CreditManagements
     * const { count } = await prisma.creditManagement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditManagementDeleteManyArgs>(args?: SelectSubset<T, CreditManagementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditManagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditManagements
     * const creditManagement = await prisma.creditManagement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditManagementUpdateManyArgs>(args: SelectSubset<T, CreditManagementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreditManagement.
     * @param {CreditManagementUpsertArgs} args - Arguments to update or create a CreditManagement.
     * @example
     * // Update or create a CreditManagement
     * const creditManagement = await prisma.creditManagement.upsert({
     *   create: {
     *     // ... data to create a CreditManagement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditManagement we want to update
     *   }
     * })
     */
    upsert<T extends CreditManagementUpsertArgs>(args: SelectSubset<T, CreditManagementUpsertArgs<ExtArgs>>): Prisma__CreditManagementClient<$Result.GetResult<Prisma.$CreditManagementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CreditManagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementCountArgs} args - Arguments to filter CreditManagements to count.
     * @example
     * // Count the number of CreditManagements
     * const count = await prisma.creditManagement.count({
     *   where: {
     *     // ... the filter for the CreditManagements we want to count
     *   }
     * })
    **/
    count<T extends CreditManagementCountArgs>(
      args?: Subset<T, CreditManagementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditManagementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditManagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditManagementAggregateArgs>(args: Subset<T, CreditManagementAggregateArgs>): Prisma.PrismaPromise<GetCreditManagementAggregateType<T>>

    /**
     * Group by CreditManagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditManagementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditManagementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditManagementGroupByArgs['orderBy'] }
        : { orderBy?: CreditManagementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditManagementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditManagementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreditManagement model
   */
  readonly fields: CreditManagementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreditManagement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditManagementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends CreditManagement$registrantArgs<ExtArgs> = {}>(args?: Subset<T, CreditManagement$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    approver<T extends CreditManagement$approverArgs<ExtArgs> = {}>(args?: Subset<T, CreditManagement$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CreditManagement model
   */ 
  interface CreditManagementFieldRefs {
    readonly id: FieldRef<"CreditManagement", 'String'>
    readonly userId: FieldRef<"CreditManagement", 'Int'>
    readonly type: FieldRef<"CreditManagement", 'ActionType'>
    readonly creditType: FieldRef<"CreditManagement", 'CreditType'>
    readonly amount: FieldRef<"CreditManagement", 'Int'>
    readonly status: FieldRef<"CreditManagement", 'Status'>
    readonly registrantId: FieldRef<"CreditManagement", 'String'>
    readonly approverId: FieldRef<"CreditManagement", 'String'>
    readonly isApproved: FieldRef<"CreditManagement", 'Boolean'>
    readonly approvedAt: FieldRef<"CreditManagement", 'DateTime'>
    readonly createdAt: FieldRef<"CreditManagement", 'DateTime'>
    readonly updatedAt: FieldRef<"CreditManagement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CreditManagement findUnique
   */
  export type CreditManagementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter, which CreditManagement to fetch.
     */
    where: CreditManagementWhereUniqueInput
  }

  /**
   * CreditManagement findUniqueOrThrow
   */
  export type CreditManagementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter, which CreditManagement to fetch.
     */
    where: CreditManagementWhereUniqueInput
  }

  /**
   * CreditManagement findFirst
   */
  export type CreditManagementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter, which CreditManagement to fetch.
     */
    where?: CreditManagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditManagements to fetch.
     */
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditManagements.
     */
    cursor?: CreditManagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditManagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditManagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditManagements.
     */
    distinct?: CreditManagementScalarFieldEnum | CreditManagementScalarFieldEnum[]
  }

  /**
   * CreditManagement findFirstOrThrow
   */
  export type CreditManagementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter, which CreditManagement to fetch.
     */
    where?: CreditManagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditManagements to fetch.
     */
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditManagements.
     */
    cursor?: CreditManagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditManagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditManagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditManagements.
     */
    distinct?: CreditManagementScalarFieldEnum | CreditManagementScalarFieldEnum[]
  }

  /**
   * CreditManagement findMany
   */
  export type CreditManagementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter, which CreditManagements to fetch.
     */
    where?: CreditManagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditManagements to fetch.
     */
    orderBy?: CreditManagementOrderByWithRelationInput | CreditManagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreditManagements.
     */
    cursor?: CreditManagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditManagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditManagements.
     */
    skip?: number
    distinct?: CreditManagementScalarFieldEnum | CreditManagementScalarFieldEnum[]
  }

  /**
   * CreditManagement create
   */
  export type CreditManagementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * The data needed to create a CreditManagement.
     */
    data: XOR<CreditManagementCreateInput, CreditManagementUncheckedCreateInput>
  }

  /**
   * CreditManagement createMany
   */
  export type CreditManagementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreditManagements.
     */
    data: CreditManagementCreateManyInput | CreditManagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CreditManagement createManyAndReturn
   */
  export type CreditManagementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CreditManagements.
     */
    data: CreditManagementCreateManyInput | CreditManagementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditManagement update
   */
  export type CreditManagementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * The data needed to update a CreditManagement.
     */
    data: XOR<CreditManagementUpdateInput, CreditManagementUncheckedUpdateInput>
    /**
     * Choose, which CreditManagement to update.
     */
    where: CreditManagementWhereUniqueInput
  }

  /**
   * CreditManagement updateMany
   */
  export type CreditManagementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreditManagements.
     */
    data: XOR<CreditManagementUpdateManyMutationInput, CreditManagementUncheckedUpdateManyInput>
    /**
     * Filter which CreditManagements to update
     */
    where?: CreditManagementWhereInput
  }

  /**
   * CreditManagement upsert
   */
  export type CreditManagementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * The filter to search for the CreditManagement to update in case it exists.
     */
    where: CreditManagementWhereUniqueInput
    /**
     * In case the CreditManagement found by the `where` argument doesn't exist, create a new CreditManagement with this data.
     */
    create: XOR<CreditManagementCreateInput, CreditManagementUncheckedCreateInput>
    /**
     * In case the CreditManagement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditManagementUpdateInput, CreditManagementUncheckedUpdateInput>
  }

  /**
   * CreditManagement delete
   */
  export type CreditManagementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
    /**
     * Filter which CreditManagement to delete.
     */
    where: CreditManagementWhereUniqueInput
  }

  /**
   * CreditManagement deleteMany
   */
  export type CreditManagementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditManagements to delete
     */
    where?: CreditManagementWhereInput
  }

  /**
   * CreditManagement.registrant
   */
  export type CreditManagement$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CreditManagement.approver
   */
  export type CreditManagement$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CreditManagement without action
   */
  export type CreditManagementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditManagement
     */
    select?: CreditManagementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditManagementInclude<ExtArgs> | null
  }


  /**
   * Model BlockTicket
   */

  export type AggregateBlockTicket = {
    _count: BlockTicketCountAggregateOutputType | null
    _avg: BlockTicketAvgAggregateOutputType | null
    _sum: BlockTicketSumAggregateOutputType | null
    _min: BlockTicketMinAggregateOutputType | null
    _max: BlockTicketMaxAggregateOutputType | null
  }

  export type BlockTicketAvgAggregateOutputType = {
    reportId: number | null
  }

  export type BlockTicketSumAggregateOutputType = {
    reportId: number | null
  }

  export type BlockTicketMinAggregateOutputType = {
    id: string | null
    reportId: number | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlockTicketMaxAggregateOutputType = {
    id: string | null
    reportId: number | null
    status: $Enums.Status | null
    registrantId: string | null
    approverId: string | null
    isApproved: boolean | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlockTicketCountAggregateOutputType = {
    id: number
    reportId: number
    status: number
    registrantId: number
    approverId: number
    isApproved: number
    approvedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BlockTicketAvgAggregateInputType = {
    reportId?: true
  }

  export type BlockTicketSumAggregateInputType = {
    reportId?: true
  }

  export type BlockTicketMinAggregateInputType = {
    id?: true
    reportId?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlockTicketMaxAggregateInputType = {
    id?: true
    reportId?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlockTicketCountAggregateInputType = {
    id?: true
    reportId?: true
    status?: true
    registrantId?: true
    approverId?: true
    isApproved?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BlockTicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlockTicket to aggregate.
     */
    where?: BlockTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTickets to fetch.
     */
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlockTickets
    **/
    _count?: true | BlockTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlockTicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlockTicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockTicketMaxAggregateInputType
  }

  export type GetBlockTicketAggregateType<T extends BlockTicketAggregateArgs> = {
        [P in keyof T & keyof AggregateBlockTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlockTicket[P]>
      : GetScalarType<T[P], AggregateBlockTicket[P]>
  }




  export type BlockTicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlockTicketWhereInput
    orderBy?: BlockTicketOrderByWithAggregationInput | BlockTicketOrderByWithAggregationInput[]
    by: BlockTicketScalarFieldEnum[] | BlockTicketScalarFieldEnum
    having?: BlockTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockTicketCountAggregateInputType | true
    _avg?: BlockTicketAvgAggregateInputType
    _sum?: BlockTicketSumAggregateInputType
    _min?: BlockTicketMinAggregateInputType
    _max?: BlockTicketMaxAggregateInputType
  }

  export type BlockTicketGroupByOutputType = {
    id: string
    reportId: number
    status: $Enums.Status
    registrantId: string | null
    approverId: string | null
    isApproved: boolean
    approvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BlockTicketCountAggregateOutputType | null
    _avg: BlockTicketAvgAggregateOutputType | null
    _sum: BlockTicketSumAggregateOutputType | null
    _min: BlockTicketMinAggregateOutputType | null
    _max: BlockTicketMaxAggregateOutputType | null
  }

  type GetBlockTicketGroupByPayload<T extends BlockTicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlockTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockTicketGroupByOutputType[P]>
            : GetScalarType<T[P], BlockTicketGroupByOutputType[P]>
        }
      >
    >


  export type BlockTicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | BlockTicket$registrantArgs<ExtArgs>
    approver?: boolean | BlockTicket$approverArgs<ExtArgs>
  }, ExtArgs["result"]["blockTicket"]>

  export type BlockTicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | BlockTicket$registrantArgs<ExtArgs>
    approver?: boolean | BlockTicket$approverArgs<ExtArgs>
  }, ExtArgs["result"]["blockTicket"]>

  export type BlockTicketSelectScalar = {
    id?: boolean
    reportId?: boolean
    status?: boolean
    registrantId?: boolean
    approverId?: boolean
    isApproved?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BlockTicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | BlockTicket$registrantArgs<ExtArgs>
    approver?: boolean | BlockTicket$approverArgs<ExtArgs>
  }
  export type BlockTicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | BlockTicket$registrantArgs<ExtArgs>
    approver?: boolean | BlockTicket$approverArgs<ExtArgs>
  }

  export type $BlockTicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlockTicket"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportId: number
      status: $Enums.Status
      registrantId: string | null
      approverId: string | null
      isApproved: boolean
      approvedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["blockTicket"]>
    composites: {}
  }

  type BlockTicketGetPayload<S extends boolean | null | undefined | BlockTicketDefaultArgs> = $Result.GetResult<Prisma.$BlockTicketPayload, S>

  type BlockTicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlockTicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BlockTicketCountAggregateInputType | true
    }

  export interface BlockTicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlockTicket'], meta: { name: 'BlockTicket' } }
    /**
     * Find zero or one BlockTicket that matches the filter.
     * @param {BlockTicketFindUniqueArgs} args - Arguments to find a BlockTicket
     * @example
     * // Get one BlockTicket
     * const blockTicket = await prisma.blockTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BlockTicketFindUniqueArgs>(args: SelectSubset<T, BlockTicketFindUniqueArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BlockTicket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BlockTicketFindUniqueOrThrowArgs} args - Arguments to find a BlockTicket
     * @example
     * // Get one BlockTicket
     * const blockTicket = await prisma.blockTicket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BlockTicketFindUniqueOrThrowArgs>(args: SelectSubset<T, BlockTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BlockTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketFindFirstArgs} args - Arguments to find a BlockTicket
     * @example
     * // Get one BlockTicket
     * const blockTicket = await prisma.blockTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BlockTicketFindFirstArgs>(args?: SelectSubset<T, BlockTicketFindFirstArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BlockTicket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketFindFirstOrThrowArgs} args - Arguments to find a BlockTicket
     * @example
     * // Get one BlockTicket
     * const blockTicket = await prisma.blockTicket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BlockTicketFindFirstOrThrowArgs>(args?: SelectSubset<T, BlockTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BlockTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlockTickets
     * const blockTickets = await prisma.blockTicket.findMany()
     * 
     * // Get first 10 BlockTickets
     * const blockTickets = await prisma.blockTicket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blockTicketWithIdOnly = await prisma.blockTicket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BlockTicketFindManyArgs>(args?: SelectSubset<T, BlockTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BlockTicket.
     * @param {BlockTicketCreateArgs} args - Arguments to create a BlockTicket.
     * @example
     * // Create one BlockTicket
     * const BlockTicket = await prisma.blockTicket.create({
     *   data: {
     *     // ... data to create a BlockTicket
     *   }
     * })
     * 
     */
    create<T extends BlockTicketCreateArgs>(args: SelectSubset<T, BlockTicketCreateArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BlockTickets.
     * @param {BlockTicketCreateManyArgs} args - Arguments to create many BlockTickets.
     * @example
     * // Create many BlockTickets
     * const blockTicket = await prisma.blockTicket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BlockTicketCreateManyArgs>(args?: SelectSubset<T, BlockTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BlockTickets and returns the data saved in the database.
     * @param {BlockTicketCreateManyAndReturnArgs} args - Arguments to create many BlockTickets.
     * @example
     * // Create many BlockTickets
     * const blockTicket = await prisma.blockTicket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BlockTickets and only return the `id`
     * const blockTicketWithIdOnly = await prisma.blockTicket.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BlockTicketCreateManyAndReturnArgs>(args?: SelectSubset<T, BlockTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BlockTicket.
     * @param {BlockTicketDeleteArgs} args - Arguments to delete one BlockTicket.
     * @example
     * // Delete one BlockTicket
     * const BlockTicket = await prisma.blockTicket.delete({
     *   where: {
     *     // ... filter to delete one BlockTicket
     *   }
     * })
     * 
     */
    delete<T extends BlockTicketDeleteArgs>(args: SelectSubset<T, BlockTicketDeleteArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BlockTicket.
     * @param {BlockTicketUpdateArgs} args - Arguments to update one BlockTicket.
     * @example
     * // Update one BlockTicket
     * const blockTicket = await prisma.blockTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BlockTicketUpdateArgs>(args: SelectSubset<T, BlockTicketUpdateArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BlockTickets.
     * @param {BlockTicketDeleteManyArgs} args - Arguments to filter BlockTickets to delete.
     * @example
     * // Delete a few BlockTickets
     * const { count } = await prisma.blockTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BlockTicketDeleteManyArgs>(args?: SelectSubset<T, BlockTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlockTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlockTickets
     * const blockTicket = await prisma.blockTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BlockTicketUpdateManyArgs>(args: SelectSubset<T, BlockTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlockTicket.
     * @param {BlockTicketUpsertArgs} args - Arguments to update or create a BlockTicket.
     * @example
     * // Update or create a BlockTicket
     * const blockTicket = await prisma.blockTicket.upsert({
     *   create: {
     *     // ... data to create a BlockTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlockTicket we want to update
     *   }
     * })
     */
    upsert<T extends BlockTicketUpsertArgs>(args: SelectSubset<T, BlockTicketUpsertArgs<ExtArgs>>): Prisma__BlockTicketClient<$Result.GetResult<Prisma.$BlockTicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BlockTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketCountArgs} args - Arguments to filter BlockTickets to count.
     * @example
     * // Count the number of BlockTickets
     * const count = await prisma.blockTicket.count({
     *   where: {
     *     // ... the filter for the BlockTickets we want to count
     *   }
     * })
    **/
    count<T extends BlockTicketCountArgs>(
      args?: Subset<T, BlockTicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlockTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockTicketAggregateArgs>(args: Subset<T, BlockTicketAggregateArgs>): Prisma.PrismaPromise<GetBlockTicketAggregateType<T>>

    /**
     * Group by BlockTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockTicketGroupByArgs['orderBy'] }
        : { orderBy?: BlockTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlockTicket model
   */
  readonly fields: BlockTicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlockTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlockTicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends BlockTicket$registrantArgs<ExtArgs> = {}>(args?: Subset<T, BlockTicket$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    approver<T extends BlockTicket$approverArgs<ExtArgs> = {}>(args?: Subset<T, BlockTicket$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BlockTicket model
   */ 
  interface BlockTicketFieldRefs {
    readonly id: FieldRef<"BlockTicket", 'String'>
    readonly reportId: FieldRef<"BlockTicket", 'Int'>
    readonly status: FieldRef<"BlockTicket", 'Status'>
    readonly registrantId: FieldRef<"BlockTicket", 'String'>
    readonly approverId: FieldRef<"BlockTicket", 'String'>
    readonly isApproved: FieldRef<"BlockTicket", 'Boolean'>
    readonly approvedAt: FieldRef<"BlockTicket", 'DateTime'>
    readonly createdAt: FieldRef<"BlockTicket", 'DateTime'>
    readonly updatedAt: FieldRef<"BlockTicket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BlockTicket findUnique
   */
  export type BlockTicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter, which BlockTicket to fetch.
     */
    where: BlockTicketWhereUniqueInput
  }

  /**
   * BlockTicket findUniqueOrThrow
   */
  export type BlockTicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter, which BlockTicket to fetch.
     */
    where: BlockTicketWhereUniqueInput
  }

  /**
   * BlockTicket findFirst
   */
  export type BlockTicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter, which BlockTicket to fetch.
     */
    where?: BlockTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTickets to fetch.
     */
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockTickets.
     */
    cursor?: BlockTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockTickets.
     */
    distinct?: BlockTicketScalarFieldEnum | BlockTicketScalarFieldEnum[]
  }

  /**
   * BlockTicket findFirstOrThrow
   */
  export type BlockTicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter, which BlockTicket to fetch.
     */
    where?: BlockTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTickets to fetch.
     */
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockTickets.
     */
    cursor?: BlockTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockTickets.
     */
    distinct?: BlockTicketScalarFieldEnum | BlockTicketScalarFieldEnum[]
  }

  /**
   * BlockTicket findMany
   */
  export type BlockTicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter, which BlockTickets to fetch.
     */
    where?: BlockTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockTickets to fetch.
     */
    orderBy?: BlockTicketOrderByWithRelationInput | BlockTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlockTickets.
     */
    cursor?: BlockTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockTickets.
     */
    skip?: number
    distinct?: BlockTicketScalarFieldEnum | BlockTicketScalarFieldEnum[]
  }

  /**
   * BlockTicket create
   */
  export type BlockTicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * The data needed to create a BlockTicket.
     */
    data: XOR<BlockTicketCreateInput, BlockTicketUncheckedCreateInput>
  }

  /**
   * BlockTicket createMany
   */
  export type BlockTicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlockTickets.
     */
    data: BlockTicketCreateManyInput | BlockTicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BlockTicket createManyAndReturn
   */
  export type BlockTicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BlockTickets.
     */
    data: BlockTicketCreateManyInput | BlockTicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BlockTicket update
   */
  export type BlockTicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * The data needed to update a BlockTicket.
     */
    data: XOR<BlockTicketUpdateInput, BlockTicketUncheckedUpdateInput>
    /**
     * Choose, which BlockTicket to update.
     */
    where: BlockTicketWhereUniqueInput
  }

  /**
   * BlockTicket updateMany
   */
  export type BlockTicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlockTickets.
     */
    data: XOR<BlockTicketUpdateManyMutationInput, BlockTicketUncheckedUpdateManyInput>
    /**
     * Filter which BlockTickets to update
     */
    where?: BlockTicketWhereInput
  }

  /**
   * BlockTicket upsert
   */
  export type BlockTicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * The filter to search for the BlockTicket to update in case it exists.
     */
    where: BlockTicketWhereUniqueInput
    /**
     * In case the BlockTicket found by the `where` argument doesn't exist, create a new BlockTicket with this data.
     */
    create: XOR<BlockTicketCreateInput, BlockTicketUncheckedCreateInput>
    /**
     * In case the BlockTicket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockTicketUpdateInput, BlockTicketUncheckedUpdateInput>
  }

  /**
   * BlockTicket delete
   */
  export type BlockTicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
    /**
     * Filter which BlockTicket to delete.
     */
    where: BlockTicketWhereUniqueInput
  }

  /**
   * BlockTicket deleteMany
   */
  export type BlockTicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlockTickets to delete
     */
    where?: BlockTicketWhereInput
  }

  /**
   * BlockTicket.registrant
   */
  export type BlockTicket$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BlockTicket.approver
   */
  export type BlockTicket$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * BlockTicket without action
   */
  export type BlockTicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlockTicket
     */
    select?: BlockTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BlockTicketInclude<ExtArgs> | null
  }


  /**
   * Model Board
   */

  export type AggregateBoard = {
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  export type BoardAvgAggregateOutputType = {
    views: number | null
  }

  export type BoardSumAggregateOutputType = {
    views: number | null
  }

  export type BoardMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    views: number | null
    registrantId: string | null
    isNotice: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    views: number | null
    registrantId: string | null
    isNotice: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardCountAggregateOutputType = {
    id: number
    title: number
    content: number
    views: number
    registrantId: number
    isNotice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BoardAvgAggregateInputType = {
    views?: true
  }

  export type BoardSumAggregateInputType = {
    views?: true
  }

  export type BoardMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    views?: true
    registrantId?: true
    isNotice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    views?: true
    registrantId?: true
    isNotice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    views?: true
    registrantId?: true
    isNotice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Board to aggregate.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMaxAggregateInputType
  }

  export type GetBoardAggregateType<T extends BoardAggregateArgs> = {
        [P in keyof T & keyof AggregateBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoard[P]>
      : GetScalarType<T[P], AggregateBoard[P]>
  }




  export type BoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithAggregationInput | BoardOrderByWithAggregationInput[]
    by: BoardScalarFieldEnum[] | BoardScalarFieldEnum
    having?: BoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardCountAggregateInputType | true
    _avg?: BoardAvgAggregateInputType
    _sum?: BoardSumAggregateInputType
    _min?: BoardMinAggregateInputType
    _max?: BoardMaxAggregateInputType
  }

  export type BoardGroupByOutputType = {
    id: string
    title: string
    content: string
    views: number
    registrantId: string | null
    isNotice: boolean
    createdAt: Date
    updatedAt: Date
    _count: BoardCountAggregateOutputType | null
    _avg: BoardAvgAggregateOutputType | null
    _sum: BoardSumAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  type GetBoardGroupByPayload<T extends BoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardGroupByOutputType[P]>
            : GetScalarType<T[P], BoardGroupByOutputType[P]>
        }
      >
    >


  export type BoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    views?: boolean
    registrantId?: boolean
    isNotice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | Board$registrantArgs<ExtArgs>
    comments?: boolean | Board$commentsArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    views?: boolean
    registrantId?: boolean
    isNotice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | Board$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    views?: boolean
    registrantId?: boolean
    isNotice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | Board$registrantArgs<ExtArgs>
    comments?: boolean | Board$commentsArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | Board$registrantArgs<ExtArgs>
  }

  export type $BoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Board"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
      comments: Prisma.$BoardCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      views: number
      registrantId: string | null
      isNotice: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["board"]>
    composites: {}
  }

  type BoardGetPayload<S extends boolean | null | undefined | BoardDefaultArgs> = $Result.GetResult<Prisma.$BoardPayload, S>

  type BoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardCountAggregateInputType | true
    }

  export interface BoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Board'], meta: { name: 'Board' } }
    /**
     * Find zero or one Board that matches the filter.
     * @param {BoardFindUniqueArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardFindUniqueArgs>(args: SelectSubset<T, BoardFindUniqueArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Board that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoardFindUniqueOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Board that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardFindFirstArgs>(args?: SelectSubset<T, BoardFindFirstArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Board that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.board.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.board.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardWithIdOnly = await prisma.board.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoardFindManyArgs>(args?: SelectSubset<T, BoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Board.
     * @param {BoardCreateArgs} args - Arguments to create a Board.
     * @example
     * // Create one Board
     * const Board = await prisma.board.create({
     *   data: {
     *     // ... data to create a Board
     *   }
     * })
     * 
     */
    create<T extends BoardCreateArgs>(args: SelectSubset<T, BoardCreateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Boards.
     * @param {BoardCreateManyArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardCreateManyArgs>(args?: SelectSubset<T, BoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boards and returns the data saved in the database.
     * @param {BoardCreateManyAndReturnArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boards and only return the `id`
     * const boardWithIdOnly = await prisma.board.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Board.
     * @param {BoardDeleteArgs} args - Arguments to delete one Board.
     * @example
     * // Delete one Board
     * const Board = await prisma.board.delete({
     *   where: {
     *     // ... filter to delete one Board
     *   }
     * })
     * 
     */
    delete<T extends BoardDeleteArgs>(args: SelectSubset<T, BoardDeleteArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Board.
     * @param {BoardUpdateArgs} args - Arguments to update one Board.
     * @example
     * // Update one Board
     * const board = await prisma.board.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardUpdateArgs>(args: SelectSubset<T, BoardUpdateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Boards.
     * @param {BoardDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.board.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardDeleteManyArgs>(args?: SelectSubset<T, BoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const board = await prisma.board.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardUpdateManyArgs>(args: SelectSubset<T, BoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Board.
     * @param {BoardUpsertArgs} args - Arguments to update or create a Board.
     * @example
     * // Update or create a Board
     * const board = await prisma.board.upsert({
     *   create: {
     *     // ... data to create a Board
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board we want to update
     *   }
     * })
     */
    upsert<T extends BoardUpsertArgs>(args: SelectSubset<T, BoardUpsertArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.board.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardCountArgs>(
      args?: Subset<T, BoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardAggregateArgs>(args: Subset<T, BoardAggregateArgs>): Prisma.PrismaPromise<GetBoardAggregateType<T>>

    /**
     * Group by Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardGroupByArgs['orderBy'] }
        : { orderBy?: BoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Board model
   */
  readonly fields: BoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Board.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends Board$registrantArgs<ExtArgs> = {}>(args?: Subset<T, Board$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comments<T extends Board$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Board$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Board model
   */ 
  interface BoardFieldRefs {
    readonly id: FieldRef<"Board", 'String'>
    readonly title: FieldRef<"Board", 'String'>
    readonly content: FieldRef<"Board", 'String'>
    readonly views: FieldRef<"Board", 'Int'>
    readonly registrantId: FieldRef<"Board", 'String'>
    readonly isNotice: FieldRef<"Board", 'Boolean'>
    readonly createdAt: FieldRef<"Board", 'DateTime'>
    readonly updatedAt: FieldRef<"Board", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Board findUnique
   */
  export type BoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findUniqueOrThrow
   */
  export type BoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findFirst
   */
  export type BoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findFirstOrThrow
   */
  export type BoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findMany
   */
  export type BoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board create
   */
  export type BoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to create a Board.
     */
    data: XOR<BoardCreateInput, BoardUncheckedCreateInput>
  }

  /**
   * Board createMany
   */
  export type BoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Board createManyAndReturn
   */
  export type BoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Board update
   */
  export type BoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to update a Board.
     */
    data: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
    /**
     * Choose, which Board to update.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board updateMany
   */
  export type BoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardWhereInput
  }

  /**
   * Board upsert
   */
  export type BoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The filter to search for the Board to update in case it exists.
     */
    where: BoardWhereUniqueInput
    /**
     * In case the Board found by the `where` argument doesn't exist, create a new Board with this data.
     */
    create: XOR<BoardCreateInput, BoardUncheckedCreateInput>
    /**
     * In case the Board was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
  }

  /**
   * Board delete
   */
  export type BoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter which Board to delete.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board deleteMany
   */
  export type BoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardWhereInput
  }

  /**
   * Board.registrant
   */
  export type Board$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Board.comments
   */
  export type Board$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    where?: BoardCommentWhereInput
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    cursor?: BoardCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardCommentScalarFieldEnum | BoardCommentScalarFieldEnum[]
  }

  /**
   * Board without action
   */
  export type BoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
  }


  /**
   * Model BoardComment
   */

  export type AggregateBoardComment = {
    _count: BoardCommentCountAggregateOutputType | null
    _min: BoardCommentMinAggregateOutputType | null
    _max: BoardCommentMaxAggregateOutputType | null
  }

  export type BoardCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    boardId: string | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    boardId: string | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardCommentCountAggregateOutputType = {
    id: number
    content: number
    boardId: number
    registrantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BoardCommentMinAggregateInputType = {
    id?: true
    content?: true
    boardId?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardCommentMaxAggregateInputType = {
    id?: true
    content?: true
    boardId?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardCommentCountAggregateInputType = {
    id?: true
    content?: true
    boardId?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BoardCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardComment to aggregate.
     */
    where?: BoardCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardComments to fetch.
     */
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardComments
    **/
    _count?: true | BoardCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardCommentMaxAggregateInputType
  }

  export type GetBoardCommentAggregateType<T extends BoardCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardComment[P]>
      : GetScalarType<T[P], AggregateBoardComment[P]>
  }




  export type BoardCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardCommentWhereInput
    orderBy?: BoardCommentOrderByWithAggregationInput | BoardCommentOrderByWithAggregationInput[]
    by: BoardCommentScalarFieldEnum[] | BoardCommentScalarFieldEnum
    having?: BoardCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardCommentCountAggregateInputType | true
    _min?: BoardCommentMinAggregateInputType
    _max?: BoardCommentMaxAggregateInputType
  }

  export type BoardCommentGroupByOutputType = {
    id: string
    content: string
    boardId: string
    registrantId: string
    createdAt: Date
    updatedAt: Date
    _count: BoardCommentCountAggregateOutputType | null
    _min: BoardCommentMinAggregateOutputType | null
    _max: BoardCommentMaxAggregateOutputType | null
  }

  type GetBoardCommentGroupByPayload<T extends BoardCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardCommentGroupByOutputType[P]>
            : GetScalarType<T[P], BoardCommentGroupByOutputType[P]>
        }
      >
    >


  export type BoardCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    boardId?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    registrant?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardComment"]>

  export type BoardCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    boardId?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    registrant?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardComment"]>

  export type BoardCommentSelectScalar = {
    id?: boolean
    content?: boolean
    boardId?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BoardCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    registrant?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BoardCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    registrant?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BoardCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardComment"
    objects: {
      board: Prisma.$BoardPayload<ExtArgs>
      registrant: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      boardId: string
      registrantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["boardComment"]>
    composites: {}
  }

  type BoardCommentGetPayload<S extends boolean | null | undefined | BoardCommentDefaultArgs> = $Result.GetResult<Prisma.$BoardCommentPayload, S>

  type BoardCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardCommentCountAggregateInputType | true
    }

  export interface BoardCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardComment'], meta: { name: 'BoardComment' } }
    /**
     * Find zero or one BoardComment that matches the filter.
     * @param {BoardCommentFindUniqueArgs} args - Arguments to find a BoardComment
     * @example
     * // Get one BoardComment
     * const boardComment = await prisma.boardComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardCommentFindUniqueArgs>(args: SelectSubset<T, BoardCommentFindUniqueArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BoardComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoardCommentFindUniqueOrThrowArgs} args - Arguments to find a BoardComment
     * @example
     * // Get one BoardComment
     * const boardComment = await prisma.boardComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BoardComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentFindFirstArgs} args - Arguments to find a BoardComment
     * @example
     * // Get one BoardComment
     * const boardComment = await prisma.boardComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardCommentFindFirstArgs>(args?: SelectSubset<T, BoardCommentFindFirstArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BoardComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentFindFirstOrThrowArgs} args - Arguments to find a BoardComment
     * @example
     * // Get one BoardComment
     * const boardComment = await prisma.boardComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BoardComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardComments
     * const boardComments = await prisma.boardComment.findMany()
     * 
     * // Get first 10 BoardComments
     * const boardComments = await prisma.boardComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardCommentWithIdOnly = await prisma.boardComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoardCommentFindManyArgs>(args?: SelectSubset<T, BoardCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BoardComment.
     * @param {BoardCommentCreateArgs} args - Arguments to create a BoardComment.
     * @example
     * // Create one BoardComment
     * const BoardComment = await prisma.boardComment.create({
     *   data: {
     *     // ... data to create a BoardComment
     *   }
     * })
     * 
     */
    create<T extends BoardCommentCreateArgs>(args: SelectSubset<T, BoardCommentCreateArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BoardComments.
     * @param {BoardCommentCreateManyArgs} args - Arguments to create many BoardComments.
     * @example
     * // Create many BoardComments
     * const boardComment = await prisma.boardComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardCommentCreateManyArgs>(args?: SelectSubset<T, BoardCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BoardComments and returns the data saved in the database.
     * @param {BoardCommentCreateManyAndReturnArgs} args - Arguments to create many BoardComments.
     * @example
     * // Create many BoardComments
     * const boardComment = await prisma.boardComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BoardComments and only return the `id`
     * const boardCommentWithIdOnly = await prisma.boardComment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BoardComment.
     * @param {BoardCommentDeleteArgs} args - Arguments to delete one BoardComment.
     * @example
     * // Delete one BoardComment
     * const BoardComment = await prisma.boardComment.delete({
     *   where: {
     *     // ... filter to delete one BoardComment
     *   }
     * })
     * 
     */
    delete<T extends BoardCommentDeleteArgs>(args: SelectSubset<T, BoardCommentDeleteArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BoardComment.
     * @param {BoardCommentUpdateArgs} args - Arguments to update one BoardComment.
     * @example
     * // Update one BoardComment
     * const boardComment = await prisma.boardComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardCommentUpdateArgs>(args: SelectSubset<T, BoardCommentUpdateArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BoardComments.
     * @param {BoardCommentDeleteManyArgs} args - Arguments to filter BoardComments to delete.
     * @example
     * // Delete a few BoardComments
     * const { count } = await prisma.boardComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardCommentDeleteManyArgs>(args?: SelectSubset<T, BoardCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardComments
     * const boardComment = await prisma.boardComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardCommentUpdateManyArgs>(args: SelectSubset<T, BoardCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardComment.
     * @param {BoardCommentUpsertArgs} args - Arguments to update or create a BoardComment.
     * @example
     * // Update or create a BoardComment
     * const boardComment = await prisma.boardComment.upsert({
     *   create: {
     *     // ... data to create a BoardComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardComment we want to update
     *   }
     * })
     */
    upsert<T extends BoardCommentUpsertArgs>(args: SelectSubset<T, BoardCommentUpsertArgs<ExtArgs>>): Prisma__BoardCommentClient<$Result.GetResult<Prisma.$BoardCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BoardComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentCountArgs} args - Arguments to filter BoardComments to count.
     * @example
     * // Count the number of BoardComments
     * const count = await prisma.boardComment.count({
     *   where: {
     *     // ... the filter for the BoardComments we want to count
     *   }
     * })
    **/
    count<T extends BoardCommentCountArgs>(
      args?: Subset<T, BoardCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardCommentAggregateArgs>(args: Subset<T, BoardCommentAggregateArgs>): Prisma.PrismaPromise<GetBoardCommentAggregateType<T>>

    /**
     * Group by BoardComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardCommentGroupByArgs['orderBy'] }
        : { orderBy?: BoardCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardComment model
   */
  readonly fields: BoardCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    registrant<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BoardComment model
   */ 
  interface BoardCommentFieldRefs {
    readonly id: FieldRef<"BoardComment", 'String'>
    readonly content: FieldRef<"BoardComment", 'String'>
    readonly boardId: FieldRef<"BoardComment", 'String'>
    readonly registrantId: FieldRef<"BoardComment", 'String'>
    readonly createdAt: FieldRef<"BoardComment", 'DateTime'>
    readonly updatedAt: FieldRef<"BoardComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BoardComment findUnique
   */
  export type BoardCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter, which BoardComment to fetch.
     */
    where: BoardCommentWhereUniqueInput
  }

  /**
   * BoardComment findUniqueOrThrow
   */
  export type BoardCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter, which BoardComment to fetch.
     */
    where: BoardCommentWhereUniqueInput
  }

  /**
   * BoardComment findFirst
   */
  export type BoardCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter, which BoardComment to fetch.
     */
    where?: BoardCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardComments to fetch.
     */
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardComments.
     */
    cursor?: BoardCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardComments.
     */
    distinct?: BoardCommentScalarFieldEnum | BoardCommentScalarFieldEnum[]
  }

  /**
   * BoardComment findFirstOrThrow
   */
  export type BoardCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter, which BoardComment to fetch.
     */
    where?: BoardCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardComments to fetch.
     */
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardComments.
     */
    cursor?: BoardCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardComments.
     */
    distinct?: BoardCommentScalarFieldEnum | BoardCommentScalarFieldEnum[]
  }

  /**
   * BoardComment findMany
   */
  export type BoardCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter, which BoardComments to fetch.
     */
    where?: BoardCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardComments to fetch.
     */
    orderBy?: BoardCommentOrderByWithRelationInput | BoardCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardComments.
     */
    cursor?: BoardCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardComments.
     */
    skip?: number
    distinct?: BoardCommentScalarFieldEnum | BoardCommentScalarFieldEnum[]
  }

  /**
   * BoardComment create
   */
  export type BoardCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardComment.
     */
    data: XOR<BoardCommentCreateInput, BoardCommentUncheckedCreateInput>
  }

  /**
   * BoardComment createMany
   */
  export type BoardCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardComments.
     */
    data: BoardCommentCreateManyInput | BoardCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardComment createManyAndReturn
   */
  export type BoardCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BoardComments.
     */
    data: BoardCommentCreateManyInput | BoardCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BoardComment update
   */
  export type BoardCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardComment.
     */
    data: XOR<BoardCommentUpdateInput, BoardCommentUncheckedUpdateInput>
    /**
     * Choose, which BoardComment to update.
     */
    where: BoardCommentWhereUniqueInput
  }

  /**
   * BoardComment updateMany
   */
  export type BoardCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardComments.
     */
    data: XOR<BoardCommentUpdateManyMutationInput, BoardCommentUncheckedUpdateManyInput>
    /**
     * Filter which BoardComments to update
     */
    where?: BoardCommentWhereInput
  }

  /**
   * BoardComment upsert
   */
  export type BoardCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardComment to update in case it exists.
     */
    where: BoardCommentWhereUniqueInput
    /**
     * In case the BoardComment found by the `where` argument doesn't exist, create a new BoardComment with this data.
     */
    create: XOR<BoardCommentCreateInput, BoardCommentUncheckedCreateInput>
    /**
     * In case the BoardComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardCommentUpdateInput, BoardCommentUncheckedUpdateInput>
  }

  /**
   * BoardComment delete
   */
  export type BoardCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
    /**
     * Filter which BoardComment to delete.
     */
    where: BoardCommentWhereUniqueInput
  }

  /**
   * BoardComment deleteMany
   */
  export type BoardCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardComments to delete
     */
    where?: BoardCommentWhereInput
  }

  /**
   * BoardComment without action
   */
  export type BoardCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardComment
     */
    select?: BoardCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardCommentInclude<ExtArgs> | null
  }


  /**
   * Model AccountUsingQuerylog
   */

  export type AggregateAccountUsingQuerylog = {
    _count: AccountUsingQuerylogCountAggregateOutputType | null
    _min: AccountUsingQuerylogMinAggregateOutputType | null
    _max: AccountUsingQuerylogMaxAggregateOutputType | null
  }

  export type AccountUsingQuerylogMinAggregateOutputType = {
    id: string | null
    content: string | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountUsingQuerylogMaxAggregateOutputType = {
    id: string | null
    content: string | null
    registrantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountUsingQuerylogCountAggregateOutputType = {
    id: number
    content: number
    registrantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountUsingQuerylogMinAggregateInputType = {
    id?: true
    content?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountUsingQuerylogMaxAggregateInputType = {
    id?: true
    content?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountUsingQuerylogCountAggregateInputType = {
    id?: true
    content?: true
    registrantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountUsingQuerylogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountUsingQuerylog to aggregate.
     */
    where?: AccountUsingQuerylogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountUsingQuerylogs to fetch.
     */
    orderBy?: AccountUsingQuerylogOrderByWithRelationInput | AccountUsingQuerylogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountUsingQuerylogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountUsingQuerylogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountUsingQuerylogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountUsingQuerylogs
    **/
    _count?: true | AccountUsingQuerylogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountUsingQuerylogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountUsingQuerylogMaxAggregateInputType
  }

  export type GetAccountUsingQuerylogAggregateType<T extends AccountUsingQuerylogAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountUsingQuerylog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountUsingQuerylog[P]>
      : GetScalarType<T[P], AggregateAccountUsingQuerylog[P]>
  }




  export type AccountUsingQuerylogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountUsingQuerylogWhereInput
    orderBy?: AccountUsingQuerylogOrderByWithAggregationInput | AccountUsingQuerylogOrderByWithAggregationInput[]
    by: AccountUsingQuerylogScalarFieldEnum[] | AccountUsingQuerylogScalarFieldEnum
    having?: AccountUsingQuerylogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountUsingQuerylogCountAggregateInputType | true
    _min?: AccountUsingQuerylogMinAggregateInputType
    _max?: AccountUsingQuerylogMaxAggregateInputType
  }

  export type AccountUsingQuerylogGroupByOutputType = {
    id: string
    content: string
    registrantId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountUsingQuerylogCountAggregateOutputType | null
    _min: AccountUsingQuerylogMinAggregateOutputType | null
    _max: AccountUsingQuerylogMaxAggregateOutputType | null
  }

  type GetAccountUsingQuerylogGroupByPayload<T extends AccountUsingQuerylogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountUsingQuerylogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountUsingQuerylogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountUsingQuerylogGroupByOutputType[P]>
            : GetScalarType<T[P], AccountUsingQuerylogGroupByOutputType[P]>
        }
      >
    >


  export type AccountUsingQuerylogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | AccountUsingQuerylog$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["accountUsingQuerylog"]>

  export type AccountUsingQuerylogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrant?: boolean | AccountUsingQuerylog$registrantArgs<ExtArgs>
  }, ExtArgs["result"]["accountUsingQuerylog"]>

  export type AccountUsingQuerylogSelectScalar = {
    id?: boolean
    content?: boolean
    registrantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountUsingQuerylogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | AccountUsingQuerylog$registrantArgs<ExtArgs>
  }
  export type AccountUsingQuerylogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrant?: boolean | AccountUsingQuerylog$registrantArgs<ExtArgs>
  }

  export type $AccountUsingQuerylogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountUsingQuerylog"
    objects: {
      registrant: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      registrantId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["accountUsingQuerylog"]>
    composites: {}
  }

  type AccountUsingQuerylogGetPayload<S extends boolean | null | undefined | AccountUsingQuerylogDefaultArgs> = $Result.GetResult<Prisma.$AccountUsingQuerylogPayload, S>

  type AccountUsingQuerylogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountUsingQuerylogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountUsingQuerylogCountAggregateInputType | true
    }

  export interface AccountUsingQuerylogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountUsingQuerylog'], meta: { name: 'AccountUsingQuerylog' } }
    /**
     * Find zero or one AccountUsingQuerylog that matches the filter.
     * @param {AccountUsingQuerylogFindUniqueArgs} args - Arguments to find a AccountUsingQuerylog
     * @example
     * // Get one AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountUsingQuerylogFindUniqueArgs>(args: SelectSubset<T, AccountUsingQuerylogFindUniqueArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountUsingQuerylog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountUsingQuerylogFindUniqueOrThrowArgs} args - Arguments to find a AccountUsingQuerylog
     * @example
     * // Get one AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountUsingQuerylogFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountUsingQuerylogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountUsingQuerylog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogFindFirstArgs} args - Arguments to find a AccountUsingQuerylog
     * @example
     * // Get one AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountUsingQuerylogFindFirstArgs>(args?: SelectSubset<T, AccountUsingQuerylogFindFirstArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountUsingQuerylog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogFindFirstOrThrowArgs} args - Arguments to find a AccountUsingQuerylog
     * @example
     * // Get one AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountUsingQuerylogFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountUsingQuerylogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountUsingQuerylogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountUsingQuerylogs
     * const accountUsingQuerylogs = await prisma.accountUsingQuerylog.findMany()
     * 
     * // Get first 10 AccountUsingQuerylogs
     * const accountUsingQuerylogs = await prisma.accountUsingQuerylog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountUsingQuerylogWithIdOnly = await prisma.accountUsingQuerylog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountUsingQuerylogFindManyArgs>(args?: SelectSubset<T, AccountUsingQuerylogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountUsingQuerylog.
     * @param {AccountUsingQuerylogCreateArgs} args - Arguments to create a AccountUsingQuerylog.
     * @example
     * // Create one AccountUsingQuerylog
     * const AccountUsingQuerylog = await prisma.accountUsingQuerylog.create({
     *   data: {
     *     // ... data to create a AccountUsingQuerylog
     *   }
     * })
     * 
     */
    create<T extends AccountUsingQuerylogCreateArgs>(args: SelectSubset<T, AccountUsingQuerylogCreateArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountUsingQuerylogs.
     * @param {AccountUsingQuerylogCreateManyArgs} args - Arguments to create many AccountUsingQuerylogs.
     * @example
     * // Create many AccountUsingQuerylogs
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountUsingQuerylogCreateManyArgs>(args?: SelectSubset<T, AccountUsingQuerylogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountUsingQuerylogs and returns the data saved in the database.
     * @param {AccountUsingQuerylogCreateManyAndReturnArgs} args - Arguments to create many AccountUsingQuerylogs.
     * @example
     * // Create many AccountUsingQuerylogs
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountUsingQuerylogs and only return the `id`
     * const accountUsingQuerylogWithIdOnly = await prisma.accountUsingQuerylog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountUsingQuerylogCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountUsingQuerylogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountUsingQuerylog.
     * @param {AccountUsingQuerylogDeleteArgs} args - Arguments to delete one AccountUsingQuerylog.
     * @example
     * // Delete one AccountUsingQuerylog
     * const AccountUsingQuerylog = await prisma.accountUsingQuerylog.delete({
     *   where: {
     *     // ... filter to delete one AccountUsingQuerylog
     *   }
     * })
     * 
     */
    delete<T extends AccountUsingQuerylogDeleteArgs>(args: SelectSubset<T, AccountUsingQuerylogDeleteArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountUsingQuerylog.
     * @param {AccountUsingQuerylogUpdateArgs} args - Arguments to update one AccountUsingQuerylog.
     * @example
     * // Update one AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUsingQuerylogUpdateArgs>(args: SelectSubset<T, AccountUsingQuerylogUpdateArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountUsingQuerylogs.
     * @param {AccountUsingQuerylogDeleteManyArgs} args - Arguments to filter AccountUsingQuerylogs to delete.
     * @example
     * // Delete a few AccountUsingQuerylogs
     * const { count } = await prisma.accountUsingQuerylog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountUsingQuerylogDeleteManyArgs>(args?: SelectSubset<T, AccountUsingQuerylogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountUsingQuerylogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountUsingQuerylogs
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUsingQuerylogUpdateManyArgs>(args: SelectSubset<T, AccountUsingQuerylogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountUsingQuerylog.
     * @param {AccountUsingQuerylogUpsertArgs} args - Arguments to update or create a AccountUsingQuerylog.
     * @example
     * // Update or create a AccountUsingQuerylog
     * const accountUsingQuerylog = await prisma.accountUsingQuerylog.upsert({
     *   create: {
     *     // ... data to create a AccountUsingQuerylog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountUsingQuerylog we want to update
     *   }
     * })
     */
    upsert<T extends AccountUsingQuerylogUpsertArgs>(args: SelectSubset<T, AccountUsingQuerylogUpsertArgs<ExtArgs>>): Prisma__AccountUsingQuerylogClient<$Result.GetResult<Prisma.$AccountUsingQuerylogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountUsingQuerylogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogCountArgs} args - Arguments to filter AccountUsingQuerylogs to count.
     * @example
     * // Count the number of AccountUsingQuerylogs
     * const count = await prisma.accountUsingQuerylog.count({
     *   where: {
     *     // ... the filter for the AccountUsingQuerylogs we want to count
     *   }
     * })
    **/
    count<T extends AccountUsingQuerylogCountArgs>(
      args?: Subset<T, AccountUsingQuerylogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountUsingQuerylogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountUsingQuerylog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountUsingQuerylogAggregateArgs>(args: Subset<T, AccountUsingQuerylogAggregateArgs>): Prisma.PrismaPromise<GetAccountUsingQuerylogAggregateType<T>>

    /**
     * Group by AccountUsingQuerylog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUsingQuerylogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountUsingQuerylogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountUsingQuerylogGroupByArgs['orderBy'] }
        : { orderBy?: AccountUsingQuerylogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountUsingQuerylogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountUsingQuerylogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountUsingQuerylog model
   */
  readonly fields: AccountUsingQuerylogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountUsingQuerylog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountUsingQuerylogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrant<T extends AccountUsingQuerylog$registrantArgs<ExtArgs> = {}>(args?: Subset<T, AccountUsingQuerylog$registrantArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountUsingQuerylog model
   */ 
  interface AccountUsingQuerylogFieldRefs {
    readonly id: FieldRef<"AccountUsingQuerylog", 'String'>
    readonly content: FieldRef<"AccountUsingQuerylog", 'String'>
    readonly registrantId: FieldRef<"AccountUsingQuerylog", 'String'>
    readonly createdAt: FieldRef<"AccountUsingQuerylog", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountUsingQuerylog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountUsingQuerylog findUnique
   */
  export type AccountUsingQuerylogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter, which AccountUsingQuerylog to fetch.
     */
    where: AccountUsingQuerylogWhereUniqueInput
  }

  /**
   * AccountUsingQuerylog findUniqueOrThrow
   */
  export type AccountUsingQuerylogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter, which AccountUsingQuerylog to fetch.
     */
    where: AccountUsingQuerylogWhereUniqueInput
  }

  /**
   * AccountUsingQuerylog findFirst
   */
  export type AccountUsingQuerylogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter, which AccountUsingQuerylog to fetch.
     */
    where?: AccountUsingQuerylogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountUsingQuerylogs to fetch.
     */
    orderBy?: AccountUsingQuerylogOrderByWithRelationInput | AccountUsingQuerylogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountUsingQuerylogs.
     */
    cursor?: AccountUsingQuerylogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountUsingQuerylogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountUsingQuerylogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountUsingQuerylogs.
     */
    distinct?: AccountUsingQuerylogScalarFieldEnum | AccountUsingQuerylogScalarFieldEnum[]
  }

  /**
   * AccountUsingQuerylog findFirstOrThrow
   */
  export type AccountUsingQuerylogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter, which AccountUsingQuerylog to fetch.
     */
    where?: AccountUsingQuerylogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountUsingQuerylogs to fetch.
     */
    orderBy?: AccountUsingQuerylogOrderByWithRelationInput | AccountUsingQuerylogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountUsingQuerylogs.
     */
    cursor?: AccountUsingQuerylogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountUsingQuerylogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountUsingQuerylogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountUsingQuerylogs.
     */
    distinct?: AccountUsingQuerylogScalarFieldEnum | AccountUsingQuerylogScalarFieldEnum[]
  }

  /**
   * AccountUsingQuerylog findMany
   */
  export type AccountUsingQuerylogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter, which AccountUsingQuerylogs to fetch.
     */
    where?: AccountUsingQuerylogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountUsingQuerylogs to fetch.
     */
    orderBy?: AccountUsingQuerylogOrderByWithRelationInput | AccountUsingQuerylogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountUsingQuerylogs.
     */
    cursor?: AccountUsingQuerylogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountUsingQuerylogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountUsingQuerylogs.
     */
    skip?: number
    distinct?: AccountUsingQuerylogScalarFieldEnum | AccountUsingQuerylogScalarFieldEnum[]
  }

  /**
   * AccountUsingQuerylog create
   */
  export type AccountUsingQuerylogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountUsingQuerylog.
     */
    data: XOR<AccountUsingQuerylogCreateInput, AccountUsingQuerylogUncheckedCreateInput>
  }

  /**
   * AccountUsingQuerylog createMany
   */
  export type AccountUsingQuerylogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountUsingQuerylogs.
     */
    data: AccountUsingQuerylogCreateManyInput | AccountUsingQuerylogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountUsingQuerylog createManyAndReturn
   */
  export type AccountUsingQuerylogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountUsingQuerylogs.
     */
    data: AccountUsingQuerylogCreateManyInput | AccountUsingQuerylogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountUsingQuerylog update
   */
  export type AccountUsingQuerylogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountUsingQuerylog.
     */
    data: XOR<AccountUsingQuerylogUpdateInput, AccountUsingQuerylogUncheckedUpdateInput>
    /**
     * Choose, which AccountUsingQuerylog to update.
     */
    where: AccountUsingQuerylogWhereUniqueInput
  }

  /**
   * AccountUsingQuerylog updateMany
   */
  export type AccountUsingQuerylogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountUsingQuerylogs.
     */
    data: XOR<AccountUsingQuerylogUpdateManyMutationInput, AccountUsingQuerylogUncheckedUpdateManyInput>
    /**
     * Filter which AccountUsingQuerylogs to update
     */
    where?: AccountUsingQuerylogWhereInput
  }

  /**
   * AccountUsingQuerylog upsert
   */
  export type AccountUsingQuerylogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountUsingQuerylog to update in case it exists.
     */
    where: AccountUsingQuerylogWhereUniqueInput
    /**
     * In case the AccountUsingQuerylog found by the `where` argument doesn't exist, create a new AccountUsingQuerylog with this data.
     */
    create: XOR<AccountUsingQuerylogCreateInput, AccountUsingQuerylogUncheckedCreateInput>
    /**
     * In case the AccountUsingQuerylog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUsingQuerylogUpdateInput, AccountUsingQuerylogUncheckedUpdateInput>
  }

  /**
   * AccountUsingQuerylog delete
   */
  export type AccountUsingQuerylogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
    /**
     * Filter which AccountUsingQuerylog to delete.
     */
    where: AccountUsingQuerylogWhereUniqueInput
  }

  /**
   * AccountUsingQuerylog deleteMany
   */
  export type AccountUsingQuerylogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountUsingQuerylogs to delete
     */
    where?: AccountUsingQuerylogWhereInput
  }

  /**
   * AccountUsingQuerylog.registrant
   */
  export type AccountUsingQuerylog$registrantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AccountUsingQuerylog without action
   */
  export type AccountUsingQuerylogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountUsingQuerylog
     */
    select?: AccountUsingQuerylogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountUsingQuerylogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    hashedPassword: 'hashedPassword',
    email: 'email',
    userId: 'userId',
    emailVerified: 'emailVerified',
    nickname: 'nickname',
    image: 'image',
    role: 'role',
    isPermissive: 'isPermissive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires',
    updatedAt: 'updatedAt'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const GroupMailScalarFieldEnum: {
    id: 'id',
    reason: 'reason',
    content: 'content',
    reward: 'reward',
    startDate: 'startDate',
    endDate: 'endDate',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupMailScalarFieldEnum = (typeof GroupMailScalarFieldEnum)[keyof typeof GroupMailScalarFieldEnum]


  export const PersonalMailScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    reason: 'reason',
    content: 'content',
    reward: 'reward',
    startDate: 'startDate',
    endDate: 'endDate',
    registrantId: 'registrantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PersonalMailScalarFieldEnum = (typeof PersonalMailScalarFieldEnum)[keyof typeof PersonalMailScalarFieldEnum]


  export const IpBlockScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    reason: 'reason',
    registrantId: 'registrantId',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IpBlockScalarFieldEnum = (typeof IpBlockScalarFieldEnum)[keyof typeof IpBlockScalarFieldEnum]


  export const AccountBlockScalarFieldEnum: {
    id: 'id',
    reason: 'reason',
    userId: 'userId',
    type: 'type',
    blockDuration: 'blockDuration',
    isPermanent: 'isPermanent',
    registrantId: 'registrantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountBlockScalarFieldEnum = (typeof AccountBlockScalarFieldEnum)[keyof typeof AccountBlockScalarFieldEnum]


  export const CouponGroupScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    groupType: 'groupType',
    rewards: 'rewards',
    code: 'code',
    isIssued: 'isIssued',
    usageLimit: 'usageLimit',
    groupReason: 'groupReason',
    groupStatus: 'groupStatus',
    quantity: 'quantity',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CouponGroupScalarFieldEnum = (typeof CouponGroupScalarFieldEnum)[keyof typeof CouponGroupScalarFieldEnum]


  export const CouponScalarFieldEnum: {
    id: 'id',
    rewards: 'rewards',
    isUsed: 'isUsed',
    code: 'code',
    couponGroupId: 'couponGroupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CouponScalarFieldEnum = (typeof CouponScalarFieldEnum)[keyof typeof CouponScalarFieldEnum]


  export const CouponLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nickname: 'nickname',
    couponId: 'couponId',
    usedAt: 'usedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CouponLogScalarFieldEnum = (typeof CouponLogScalarFieldEnum)[keyof typeof CouponLogScalarFieldEnum]


  export const ItemQuantityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    itemId: 'itemId',
    itemName: 'itemName',
    amount: 'amount',
    type: 'type',
    status: 'status',
    registrantId: 'registrantId',
    approverId: 'approverId',
    isApproved: 'isApproved',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemQuantityScalarFieldEnum = (typeof ItemQuantityScalarFieldEnum)[keyof typeof ItemQuantityScalarFieldEnum]


  export const RewardRevokeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    status: 'status',
    type: 'type',
    creditType: 'creditType',
    registrantId: 'registrantId',
    approverId: 'approverId',
    isApproved: 'isApproved',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RewardRevokeScalarFieldEnum = (typeof RewardRevokeScalarFieldEnum)[keyof typeof RewardRevokeScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    itemName: 'itemName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    id: 'id',
    groupId: 'groupId',
    groupBoolean: 'groupBoolean',
    minRole: 'minRole',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const CreditManagementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    creditType: 'creditType',
    amount: 'amount',
    status: 'status',
    registrantId: 'registrantId',
    approverId: 'approverId',
    isApproved: 'isApproved',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CreditManagementScalarFieldEnum = (typeof CreditManagementScalarFieldEnum)[keyof typeof CreditManagementScalarFieldEnum]


  export const BlockTicketScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    status: 'status',
    registrantId: 'registrantId',
    approverId: 'approverId',
    isApproved: 'isApproved',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BlockTicketScalarFieldEnum = (typeof BlockTicketScalarFieldEnum)[keyof typeof BlockTicketScalarFieldEnum]


  export const BoardScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    views: 'views',
    registrantId: 'registrantId',
    isNotice: 'isNotice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BoardScalarFieldEnum = (typeof BoardScalarFieldEnum)[keyof typeof BoardScalarFieldEnum]


  export const BoardCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    boardId: 'boardId',
    registrantId: 'registrantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BoardCommentScalarFieldEnum = (typeof BoardCommentScalarFieldEnum)[keyof typeof BoardCommentScalarFieldEnum]


  export const AccountUsingQuerylogScalarFieldEnum: {
    id: 'id',
    content: 'content',
    registrantId: 'registrantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountUsingQuerylogScalarFieldEnum = (typeof AccountUsingQuerylogScalarFieldEnum)[keyof typeof AccountUsingQuerylogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'IpBlockType'
   */
  export type EnumIpBlockTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IpBlockType'>
    


  /**
   * Reference to a field of type 'IpBlockType[]'
   */
  export type ListEnumIpBlockTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IpBlockType[]'>
    


  /**
   * Reference to a field of type 'AccountBlockType'
   */
  export type EnumAccountBlockTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountBlockType'>
    


  /**
   * Reference to a field of type 'AccountBlockType[]'
   */
  export type ListEnumAccountBlockTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountBlockType[]'>
    


  /**
   * Reference to a field of type 'CouponGroupType'
   */
  export type EnumCouponGroupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CouponGroupType'>
    


  /**
   * Reference to a field of type 'CouponGroupType[]'
   */
  export type ListEnumCouponGroupTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CouponGroupType[]'>
    


  /**
   * Reference to a field of type 'CouponGroupStatus'
   */
  export type EnumCouponGroupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CouponGroupStatus'>
    


  /**
   * Reference to a field of type 'CouponGroupStatus[]'
   */
  export type ListEnumCouponGroupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CouponGroupStatus[]'>
    


  /**
   * Reference to a field of type 'ActionType'
   */
  export type EnumActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionType'>
    


  /**
   * Reference to a field of type 'ActionType[]'
   */
  export type ListEnumActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionType[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'RewardRevokeCreditType'
   */
  export type EnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardRevokeCreditType'>
    


  /**
   * Reference to a field of type 'RewardRevokeCreditType[]'
   */
  export type ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardRevokeCreditType[]'>
    


  /**
   * Reference to a field of type 'CreditType'
   */
  export type EnumCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreditType'>
    


  /**
   * Reference to a field of type 'CreditType[]'
   */
  export type ListEnumCreditTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreditType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    hashedPassword?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    userId?: IntFilter<"User"> | number
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    nickname?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isPermissive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    accountUsingQuerylogs?: AccountUsingQuerylogListRelationFilter
    groupMails?: GroupMailListRelationFilter
    personalMails?: PersonalMailListRelationFilter
    ipBlocks?: IpBlockListRelationFilter
    accountBlocks?: AccountBlockListRelationFilter
    registeredItemQuantities?: ItemQuantityListRelationFilter
    approvedItemQuantities?: ItemQuantityListRelationFilter
    registeredCreditManagements?: CreditManagementListRelationFilter
    approvedCreditManagements?: CreditManagementListRelationFilter
    registeredBlockTickets?: BlockTicketListRelationFilter
    approvedBlockTickets?: BlockTicketListRelationFilter
    registeredRewardRevokes?: RewardRevokeListRelationFilter
    approvedRewardRevokes?: RewardRevokeListRelationFilter
    boards?: BoardListRelationFilter
    boardComments?: BoardCommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    userId?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    nickname?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    isPermissive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    accountUsingQuerylogs?: AccountUsingQuerylogOrderByRelationAggregateInput
    groupMails?: GroupMailOrderByRelationAggregateInput
    personalMails?: PersonalMailOrderByRelationAggregateInput
    ipBlocks?: IpBlockOrderByRelationAggregateInput
    accountBlocks?: AccountBlockOrderByRelationAggregateInput
    registeredItemQuantities?: ItemQuantityOrderByRelationAggregateInput
    approvedItemQuantities?: ItemQuantityOrderByRelationAggregateInput
    registeredCreditManagements?: CreditManagementOrderByRelationAggregateInput
    approvedCreditManagements?: CreditManagementOrderByRelationAggregateInput
    registeredBlockTickets?: BlockTicketOrderByRelationAggregateInput
    approvedBlockTickets?: BlockTicketOrderByRelationAggregateInput
    registeredRewardRevokes?: RewardRevokeOrderByRelationAggregateInput
    approvedRewardRevokes?: RewardRevokeOrderByRelationAggregateInput
    boards?: BoardOrderByRelationAggregateInput
    boardComments?: BoardCommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    userId?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    hashedPassword?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    nickname?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isPermissive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    accountUsingQuerylogs?: AccountUsingQuerylogListRelationFilter
    groupMails?: GroupMailListRelationFilter
    personalMails?: PersonalMailListRelationFilter
    ipBlocks?: IpBlockListRelationFilter
    accountBlocks?: AccountBlockListRelationFilter
    registeredItemQuantities?: ItemQuantityListRelationFilter
    approvedItemQuantities?: ItemQuantityListRelationFilter
    registeredCreditManagements?: CreditManagementListRelationFilter
    approvedCreditManagements?: CreditManagementListRelationFilter
    registeredBlockTickets?: BlockTicketListRelationFilter
    approvedBlockTickets?: BlockTicketListRelationFilter
    registeredRewardRevokes?: RewardRevokeListRelationFilter
    approvedRewardRevokes?: RewardRevokeListRelationFilter
    boards?: BoardListRelationFilter
    boardComments?: BoardCommentListRelationFilter
  }, "id" | "email" | "userId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    userId?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    nickname?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    isPermissive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    hashedPassword?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    userId?: IntWithAggregatesFilter<"User"> | number
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    nickname?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isPermissive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type GroupMailWhereInput = {
    AND?: GroupMailWhereInput | GroupMailWhereInput[]
    OR?: GroupMailWhereInput[]
    NOT?: GroupMailWhereInput | GroupMailWhereInput[]
    id?: StringFilter<"GroupMail"> | string
    reason?: StringFilter<"GroupMail"> | string
    content?: StringFilter<"GroupMail"> | string
    reward?: JsonFilter<"GroupMail">
    startDate?: DateTimeFilter<"GroupMail"> | Date | string
    endDate?: DateTimeFilter<"GroupMail"> | Date | string
    userId?: StringNullableFilter<"GroupMail"> | string | null
    createdAt?: DateTimeFilter<"GroupMail"> | Date | string
    updatedAt?: DateTimeFilter<"GroupMail"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type GroupMailOrderByWithRelationInput = {
    id?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GroupMailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupMailWhereInput | GroupMailWhereInput[]
    OR?: GroupMailWhereInput[]
    NOT?: GroupMailWhereInput | GroupMailWhereInput[]
    reason?: StringFilter<"GroupMail"> | string
    content?: StringFilter<"GroupMail"> | string
    reward?: JsonFilter<"GroupMail">
    startDate?: DateTimeFilter<"GroupMail"> | Date | string
    endDate?: DateTimeFilter<"GroupMail"> | Date | string
    userId?: StringNullableFilter<"GroupMail"> | string | null
    createdAt?: DateTimeFilter<"GroupMail"> | Date | string
    updatedAt?: DateTimeFilter<"GroupMail"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type GroupMailOrderByWithAggregationInput = {
    id?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupMailCountOrderByAggregateInput
    _max?: GroupMailMaxOrderByAggregateInput
    _min?: GroupMailMinOrderByAggregateInput
  }

  export type GroupMailScalarWhereWithAggregatesInput = {
    AND?: GroupMailScalarWhereWithAggregatesInput | GroupMailScalarWhereWithAggregatesInput[]
    OR?: GroupMailScalarWhereWithAggregatesInput[]
    NOT?: GroupMailScalarWhereWithAggregatesInput | GroupMailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GroupMail"> | string
    reason?: StringWithAggregatesFilter<"GroupMail"> | string
    content?: StringWithAggregatesFilter<"GroupMail"> | string
    reward?: JsonWithAggregatesFilter<"GroupMail">
    startDate?: DateTimeWithAggregatesFilter<"GroupMail"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"GroupMail"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"GroupMail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GroupMail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GroupMail"> | Date | string
  }

  export type PersonalMailWhereInput = {
    AND?: PersonalMailWhereInput | PersonalMailWhereInput[]
    OR?: PersonalMailWhereInput[]
    NOT?: PersonalMailWhereInput | PersonalMailWhereInput[]
    id?: StringFilter<"PersonalMail"> | string
    userId?: IntFilter<"PersonalMail"> | number
    reason?: StringFilter<"PersonalMail"> | string
    content?: StringFilter<"PersonalMail"> | string
    reward?: JsonFilter<"PersonalMail">
    startDate?: DateTimeFilter<"PersonalMail"> | Date | string
    endDate?: DateTimeFilter<"PersonalMail"> | Date | string
    registrantId?: StringNullableFilter<"PersonalMail"> | string | null
    createdAt?: DateTimeFilter<"PersonalMail"> | Date | string
    updatedAt?: DateTimeFilter<"PersonalMail"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type PersonalMailOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
  }

  export type PersonalMailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonalMailWhereInput | PersonalMailWhereInput[]
    OR?: PersonalMailWhereInput[]
    NOT?: PersonalMailWhereInput | PersonalMailWhereInput[]
    userId?: IntFilter<"PersonalMail"> | number
    reason?: StringFilter<"PersonalMail"> | string
    content?: StringFilter<"PersonalMail"> | string
    reward?: JsonFilter<"PersonalMail">
    startDate?: DateTimeFilter<"PersonalMail"> | Date | string
    endDate?: DateTimeFilter<"PersonalMail"> | Date | string
    registrantId?: StringNullableFilter<"PersonalMail"> | string | null
    createdAt?: DateTimeFilter<"PersonalMail"> | Date | string
    updatedAt?: DateTimeFilter<"PersonalMail"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type PersonalMailOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PersonalMailCountOrderByAggregateInput
    _avg?: PersonalMailAvgOrderByAggregateInput
    _max?: PersonalMailMaxOrderByAggregateInput
    _min?: PersonalMailMinOrderByAggregateInput
    _sum?: PersonalMailSumOrderByAggregateInput
  }

  export type PersonalMailScalarWhereWithAggregatesInput = {
    AND?: PersonalMailScalarWhereWithAggregatesInput | PersonalMailScalarWhereWithAggregatesInput[]
    OR?: PersonalMailScalarWhereWithAggregatesInput[]
    NOT?: PersonalMailScalarWhereWithAggregatesInput | PersonalMailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PersonalMail"> | string
    userId?: IntWithAggregatesFilter<"PersonalMail"> | number
    reason?: StringWithAggregatesFilter<"PersonalMail"> | string
    content?: StringWithAggregatesFilter<"PersonalMail"> | string
    reward?: JsonWithAggregatesFilter<"PersonalMail">
    startDate?: DateTimeWithAggregatesFilter<"PersonalMail"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PersonalMail"> | Date | string
    registrantId?: StringNullableWithAggregatesFilter<"PersonalMail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PersonalMail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PersonalMail"> | Date | string
  }

  export type IpBlockWhereInput = {
    AND?: IpBlockWhereInput | IpBlockWhereInput[]
    OR?: IpBlockWhereInput[]
    NOT?: IpBlockWhereInput | IpBlockWhereInput[]
    id?: StringFilter<"IpBlock"> | string
    ip?: StringFilter<"IpBlock"> | string
    reason?: StringFilter<"IpBlock"> | string
    registrantId?: StringNullableFilter<"IpBlock"> | string | null
    type?: EnumIpBlockTypeFilter<"IpBlock"> | $Enums.IpBlockType
    createdAt?: DateTimeFilter<"IpBlock"> | Date | string
    updatedAt?: DateTimeFilter<"IpBlock"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type IpBlockOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    reason?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
  }

  export type IpBlockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IpBlockWhereInput | IpBlockWhereInput[]
    OR?: IpBlockWhereInput[]
    NOT?: IpBlockWhereInput | IpBlockWhereInput[]
    ip?: StringFilter<"IpBlock"> | string
    reason?: StringFilter<"IpBlock"> | string
    registrantId?: StringNullableFilter<"IpBlock"> | string | null
    type?: EnumIpBlockTypeFilter<"IpBlock"> | $Enums.IpBlockType
    createdAt?: DateTimeFilter<"IpBlock"> | Date | string
    updatedAt?: DateTimeFilter<"IpBlock"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type IpBlockOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    reason?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IpBlockCountOrderByAggregateInput
    _max?: IpBlockMaxOrderByAggregateInput
    _min?: IpBlockMinOrderByAggregateInput
  }

  export type IpBlockScalarWhereWithAggregatesInput = {
    AND?: IpBlockScalarWhereWithAggregatesInput | IpBlockScalarWhereWithAggregatesInput[]
    OR?: IpBlockScalarWhereWithAggregatesInput[]
    NOT?: IpBlockScalarWhereWithAggregatesInput | IpBlockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IpBlock"> | string
    ip?: StringWithAggregatesFilter<"IpBlock"> | string
    reason?: StringWithAggregatesFilter<"IpBlock"> | string
    registrantId?: StringNullableWithAggregatesFilter<"IpBlock"> | string | null
    type?: EnumIpBlockTypeWithAggregatesFilter<"IpBlock"> | $Enums.IpBlockType
    createdAt?: DateTimeWithAggregatesFilter<"IpBlock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IpBlock"> | Date | string
  }

  export type AccountBlockWhereInput = {
    AND?: AccountBlockWhereInput | AccountBlockWhereInput[]
    OR?: AccountBlockWhereInput[]
    NOT?: AccountBlockWhereInput | AccountBlockWhereInput[]
    id?: StringFilter<"AccountBlock"> | string
    reason?: StringFilter<"AccountBlock"> | string
    userId?: IntFilter<"AccountBlock"> | number
    type?: EnumAccountBlockTypeFilter<"AccountBlock"> | $Enums.AccountBlockType
    blockDuration?: IntNullableFilter<"AccountBlock"> | number | null
    isPermanent?: BoolFilter<"AccountBlock"> | boolean
    registrantId?: StringNullableFilter<"AccountBlock"> | string | null
    createdAt?: DateTimeFilter<"AccountBlock"> | Date | string
    updatedAt?: DateTimeFilter<"AccountBlock"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AccountBlockOrderByWithRelationInput = {
    id?: SortOrder
    reason?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    blockDuration?: SortOrderInput | SortOrder
    isPermanent?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
  }

  export type AccountBlockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountBlockWhereInput | AccountBlockWhereInput[]
    OR?: AccountBlockWhereInput[]
    NOT?: AccountBlockWhereInput | AccountBlockWhereInput[]
    reason?: StringFilter<"AccountBlock"> | string
    userId?: IntFilter<"AccountBlock"> | number
    type?: EnumAccountBlockTypeFilter<"AccountBlock"> | $Enums.AccountBlockType
    blockDuration?: IntNullableFilter<"AccountBlock"> | number | null
    isPermanent?: BoolFilter<"AccountBlock"> | boolean
    registrantId?: StringNullableFilter<"AccountBlock"> | string | null
    createdAt?: DateTimeFilter<"AccountBlock"> | Date | string
    updatedAt?: DateTimeFilter<"AccountBlock"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountBlockOrderByWithAggregationInput = {
    id?: SortOrder
    reason?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    blockDuration?: SortOrderInput | SortOrder
    isPermanent?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountBlockCountOrderByAggregateInput
    _avg?: AccountBlockAvgOrderByAggregateInput
    _max?: AccountBlockMaxOrderByAggregateInput
    _min?: AccountBlockMinOrderByAggregateInput
    _sum?: AccountBlockSumOrderByAggregateInput
  }

  export type AccountBlockScalarWhereWithAggregatesInput = {
    AND?: AccountBlockScalarWhereWithAggregatesInput | AccountBlockScalarWhereWithAggregatesInput[]
    OR?: AccountBlockScalarWhereWithAggregatesInput[]
    NOT?: AccountBlockScalarWhereWithAggregatesInput | AccountBlockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountBlock"> | string
    reason?: StringWithAggregatesFilter<"AccountBlock"> | string
    userId?: IntWithAggregatesFilter<"AccountBlock"> | number
    type?: EnumAccountBlockTypeWithAggregatesFilter<"AccountBlock"> | $Enums.AccountBlockType
    blockDuration?: IntNullableWithAggregatesFilter<"AccountBlock"> | number | null
    isPermanent?: BoolWithAggregatesFilter<"AccountBlock"> | boolean
    registrantId?: StringNullableWithAggregatesFilter<"AccountBlock"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountBlock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountBlock"> | Date | string
  }

  export type CouponGroupWhereInput = {
    AND?: CouponGroupWhereInput | CouponGroupWhereInput[]
    OR?: CouponGroupWhereInput[]
    NOT?: CouponGroupWhereInput | CouponGroupWhereInput[]
    id?: StringFilter<"CouponGroup"> | string
    groupName?: StringFilter<"CouponGroup"> | string
    groupType?: EnumCouponGroupTypeFilter<"CouponGroup"> | $Enums.CouponGroupType
    rewards?: JsonFilter<"CouponGroup">
    code?: StringNullableFilter<"CouponGroup"> | string | null
    isIssued?: BoolFilter<"CouponGroup"> | boolean
    usageLimit?: IntNullableFilter<"CouponGroup"> | number | null
    groupReason?: StringFilter<"CouponGroup"> | string
    groupStatus?: EnumCouponGroupStatusFilter<"CouponGroup"> | $Enums.CouponGroupStatus
    quantity?: IntFilter<"CouponGroup"> | number
    startDate?: DateTimeFilter<"CouponGroup"> | Date | string
    endDate?: DateTimeFilter<"CouponGroup"> | Date | string
    createdAt?: DateTimeFilter<"CouponGroup"> | Date | string
    updatedAt?: DateTimeFilter<"CouponGroup"> | Date | string
    coupons?: CouponListRelationFilter
  }

  export type CouponGroupOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupType?: SortOrder
    rewards?: SortOrder
    code?: SortOrderInput | SortOrder
    isIssued?: SortOrder
    usageLimit?: SortOrderInput | SortOrder
    groupReason?: SortOrder
    groupStatus?: SortOrder
    quantity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coupons?: CouponOrderByRelationAggregateInput
  }

  export type CouponGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    groupName?: string
    AND?: CouponGroupWhereInput | CouponGroupWhereInput[]
    OR?: CouponGroupWhereInput[]
    NOT?: CouponGroupWhereInput | CouponGroupWhereInput[]
    groupType?: EnumCouponGroupTypeFilter<"CouponGroup"> | $Enums.CouponGroupType
    rewards?: JsonFilter<"CouponGroup">
    code?: StringNullableFilter<"CouponGroup"> | string | null
    isIssued?: BoolFilter<"CouponGroup"> | boolean
    usageLimit?: IntNullableFilter<"CouponGroup"> | number | null
    groupReason?: StringFilter<"CouponGroup"> | string
    groupStatus?: EnumCouponGroupStatusFilter<"CouponGroup"> | $Enums.CouponGroupStatus
    quantity?: IntFilter<"CouponGroup"> | number
    startDate?: DateTimeFilter<"CouponGroup"> | Date | string
    endDate?: DateTimeFilter<"CouponGroup"> | Date | string
    createdAt?: DateTimeFilter<"CouponGroup"> | Date | string
    updatedAt?: DateTimeFilter<"CouponGroup"> | Date | string
    coupons?: CouponListRelationFilter
  }, "id" | "groupName">

  export type CouponGroupOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupType?: SortOrder
    rewards?: SortOrder
    code?: SortOrderInput | SortOrder
    isIssued?: SortOrder
    usageLimit?: SortOrderInput | SortOrder
    groupReason?: SortOrder
    groupStatus?: SortOrder
    quantity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CouponGroupCountOrderByAggregateInput
    _avg?: CouponGroupAvgOrderByAggregateInput
    _max?: CouponGroupMaxOrderByAggregateInput
    _min?: CouponGroupMinOrderByAggregateInput
    _sum?: CouponGroupSumOrderByAggregateInput
  }

  export type CouponGroupScalarWhereWithAggregatesInput = {
    AND?: CouponGroupScalarWhereWithAggregatesInput | CouponGroupScalarWhereWithAggregatesInput[]
    OR?: CouponGroupScalarWhereWithAggregatesInput[]
    NOT?: CouponGroupScalarWhereWithAggregatesInput | CouponGroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CouponGroup"> | string
    groupName?: StringWithAggregatesFilter<"CouponGroup"> | string
    groupType?: EnumCouponGroupTypeWithAggregatesFilter<"CouponGroup"> | $Enums.CouponGroupType
    rewards?: JsonWithAggregatesFilter<"CouponGroup">
    code?: StringNullableWithAggregatesFilter<"CouponGroup"> | string | null
    isIssued?: BoolWithAggregatesFilter<"CouponGroup"> | boolean
    usageLimit?: IntNullableWithAggregatesFilter<"CouponGroup"> | number | null
    groupReason?: StringWithAggregatesFilter<"CouponGroup"> | string
    groupStatus?: EnumCouponGroupStatusWithAggregatesFilter<"CouponGroup"> | $Enums.CouponGroupStatus
    quantity?: IntWithAggregatesFilter<"CouponGroup"> | number
    startDate?: DateTimeWithAggregatesFilter<"CouponGroup"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"CouponGroup"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CouponGroup"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CouponGroup"> | Date | string
  }

  export type CouponWhereInput = {
    AND?: CouponWhereInput | CouponWhereInput[]
    OR?: CouponWhereInput[]
    NOT?: CouponWhereInput | CouponWhereInput[]
    id?: StringFilter<"Coupon"> | string
    rewards?: JsonFilter<"Coupon">
    isUsed?: BoolFilter<"Coupon"> | boolean
    code?: StringNullableFilter<"Coupon"> | string | null
    couponGroupId?: StringNullableFilter<"Coupon"> | string | null
    createdAt?: DateTimeFilter<"Coupon"> | Date | string
    updatedAt?: DateTimeFilter<"Coupon"> | Date | string
    couponGroup?: XOR<CouponGroupNullableRelationFilter, CouponGroupWhereInput> | null
    couponLogs?: CouponLogListRelationFilter
  }

  export type CouponOrderByWithRelationInput = {
    id?: SortOrder
    rewards?: SortOrder
    isUsed?: SortOrder
    code?: SortOrderInput | SortOrder
    couponGroupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    couponGroup?: CouponGroupOrderByWithRelationInput
    couponLogs?: CouponLogOrderByRelationAggregateInput
  }

  export type CouponWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CouponWhereInput | CouponWhereInput[]
    OR?: CouponWhereInput[]
    NOT?: CouponWhereInput | CouponWhereInput[]
    rewards?: JsonFilter<"Coupon">
    isUsed?: BoolFilter<"Coupon"> | boolean
    code?: StringNullableFilter<"Coupon"> | string | null
    couponGroupId?: StringNullableFilter<"Coupon"> | string | null
    createdAt?: DateTimeFilter<"Coupon"> | Date | string
    updatedAt?: DateTimeFilter<"Coupon"> | Date | string
    couponGroup?: XOR<CouponGroupNullableRelationFilter, CouponGroupWhereInput> | null
    couponLogs?: CouponLogListRelationFilter
  }, "id">

  export type CouponOrderByWithAggregationInput = {
    id?: SortOrder
    rewards?: SortOrder
    isUsed?: SortOrder
    code?: SortOrderInput | SortOrder
    couponGroupId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CouponCountOrderByAggregateInput
    _max?: CouponMaxOrderByAggregateInput
    _min?: CouponMinOrderByAggregateInput
  }

  export type CouponScalarWhereWithAggregatesInput = {
    AND?: CouponScalarWhereWithAggregatesInput | CouponScalarWhereWithAggregatesInput[]
    OR?: CouponScalarWhereWithAggregatesInput[]
    NOT?: CouponScalarWhereWithAggregatesInput | CouponScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Coupon"> | string
    rewards?: JsonWithAggregatesFilter<"Coupon">
    isUsed?: BoolWithAggregatesFilter<"Coupon"> | boolean
    code?: StringNullableWithAggregatesFilter<"Coupon"> | string | null
    couponGroupId?: StringNullableWithAggregatesFilter<"Coupon"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Coupon"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Coupon"> | Date | string
  }

  export type CouponLogWhereInput = {
    AND?: CouponLogWhereInput | CouponLogWhereInput[]
    OR?: CouponLogWhereInput[]
    NOT?: CouponLogWhereInput | CouponLogWhereInput[]
    id?: StringFilter<"CouponLog"> | string
    userId?: IntFilter<"CouponLog"> | number
    nickname?: StringFilter<"CouponLog"> | string
    couponId?: StringNullableFilter<"CouponLog"> | string | null
    usedAt?: DateTimeFilter<"CouponLog"> | Date | string
    createdAt?: DateTimeFilter<"CouponLog"> | Date | string
    updatedAt?: DateTimeFilter<"CouponLog"> | Date | string
    coupon?: XOR<CouponNullableRelationFilter, CouponWhereInput> | null
  }

  export type CouponLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nickname?: SortOrder
    couponId?: SortOrderInput | SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coupon?: CouponOrderByWithRelationInput
  }

  export type CouponLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CouponLogWhereInput | CouponLogWhereInput[]
    OR?: CouponLogWhereInput[]
    NOT?: CouponLogWhereInput | CouponLogWhereInput[]
    userId?: IntFilter<"CouponLog"> | number
    nickname?: StringFilter<"CouponLog"> | string
    couponId?: StringNullableFilter<"CouponLog"> | string | null
    usedAt?: DateTimeFilter<"CouponLog"> | Date | string
    createdAt?: DateTimeFilter<"CouponLog"> | Date | string
    updatedAt?: DateTimeFilter<"CouponLog"> | Date | string
    coupon?: XOR<CouponNullableRelationFilter, CouponWhereInput> | null
  }, "id">

  export type CouponLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nickname?: SortOrder
    couponId?: SortOrderInput | SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CouponLogCountOrderByAggregateInput
    _avg?: CouponLogAvgOrderByAggregateInput
    _max?: CouponLogMaxOrderByAggregateInput
    _min?: CouponLogMinOrderByAggregateInput
    _sum?: CouponLogSumOrderByAggregateInput
  }

  export type CouponLogScalarWhereWithAggregatesInput = {
    AND?: CouponLogScalarWhereWithAggregatesInput | CouponLogScalarWhereWithAggregatesInput[]
    OR?: CouponLogScalarWhereWithAggregatesInput[]
    NOT?: CouponLogScalarWhereWithAggregatesInput | CouponLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CouponLog"> | string
    userId?: IntWithAggregatesFilter<"CouponLog"> | number
    nickname?: StringWithAggregatesFilter<"CouponLog"> | string
    couponId?: StringNullableWithAggregatesFilter<"CouponLog"> | string | null
    usedAt?: DateTimeWithAggregatesFilter<"CouponLog"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CouponLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CouponLog"> | Date | string
  }

  export type ItemQuantityWhereInput = {
    AND?: ItemQuantityWhereInput | ItemQuantityWhereInput[]
    OR?: ItemQuantityWhereInput[]
    NOT?: ItemQuantityWhereInput | ItemQuantityWhereInput[]
    id?: StringFilter<"ItemQuantity"> | string
    userId?: IntFilter<"ItemQuantity"> | number
    itemId?: StringFilter<"ItemQuantity"> | string
    itemName?: StringFilter<"ItemQuantity"> | string
    amount?: IntFilter<"ItemQuantity"> | number
    type?: EnumActionTypeFilter<"ItemQuantity"> | $Enums.ActionType
    status?: EnumStatusFilter<"ItemQuantity"> | $Enums.Status
    registrantId?: StringNullableFilter<"ItemQuantity"> | string | null
    approverId?: StringNullableFilter<"ItemQuantity"> | string | null
    isApproved?: BoolFilter<"ItemQuantity"> | boolean
    approvedAt?: DateTimeNullableFilter<"ItemQuantity"> | Date | string | null
    createdAt?: DateTimeFilter<"ItemQuantity"> | Date | string
    updatedAt?: DateTimeFilter<"ItemQuantity"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ItemQuantityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type ItemQuantityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ItemQuantityWhereInput | ItemQuantityWhereInput[]
    OR?: ItemQuantityWhereInput[]
    NOT?: ItemQuantityWhereInput | ItemQuantityWhereInput[]
    userId?: IntFilter<"ItemQuantity"> | number
    itemId?: StringFilter<"ItemQuantity"> | string
    itemName?: StringFilter<"ItemQuantity"> | string
    amount?: IntFilter<"ItemQuantity"> | number
    type?: EnumActionTypeFilter<"ItemQuantity"> | $Enums.ActionType
    status?: EnumStatusFilter<"ItemQuantity"> | $Enums.Status
    registrantId?: StringNullableFilter<"ItemQuantity"> | string | null
    approverId?: StringNullableFilter<"ItemQuantity"> | string | null
    isApproved?: BoolFilter<"ItemQuantity"> | boolean
    approvedAt?: DateTimeNullableFilter<"ItemQuantity"> | Date | string | null
    createdAt?: DateTimeFilter<"ItemQuantity"> | Date | string
    updatedAt?: DateTimeFilter<"ItemQuantity"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ItemQuantityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemQuantityCountOrderByAggregateInput
    _avg?: ItemQuantityAvgOrderByAggregateInput
    _max?: ItemQuantityMaxOrderByAggregateInput
    _min?: ItemQuantityMinOrderByAggregateInput
    _sum?: ItemQuantitySumOrderByAggregateInput
  }

  export type ItemQuantityScalarWhereWithAggregatesInput = {
    AND?: ItemQuantityScalarWhereWithAggregatesInput | ItemQuantityScalarWhereWithAggregatesInput[]
    OR?: ItemQuantityScalarWhereWithAggregatesInput[]
    NOT?: ItemQuantityScalarWhereWithAggregatesInput | ItemQuantityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ItemQuantity"> | string
    userId?: IntWithAggregatesFilter<"ItemQuantity"> | number
    itemId?: StringWithAggregatesFilter<"ItemQuantity"> | string
    itemName?: StringWithAggregatesFilter<"ItemQuantity"> | string
    amount?: IntWithAggregatesFilter<"ItemQuantity"> | number
    type?: EnumActionTypeWithAggregatesFilter<"ItemQuantity"> | $Enums.ActionType
    status?: EnumStatusWithAggregatesFilter<"ItemQuantity"> | $Enums.Status
    registrantId?: StringNullableWithAggregatesFilter<"ItemQuantity"> | string | null
    approverId?: StringNullableWithAggregatesFilter<"ItemQuantity"> | string | null
    isApproved?: BoolWithAggregatesFilter<"ItemQuantity"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"ItemQuantity"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ItemQuantity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ItemQuantity"> | Date | string
  }

  export type RewardRevokeWhereInput = {
    AND?: RewardRevokeWhereInput | RewardRevokeWhereInput[]
    OR?: RewardRevokeWhereInput[]
    NOT?: RewardRevokeWhereInput | RewardRevokeWhereInput[]
    id?: StringFilter<"RewardRevoke"> | string
    userId?: IntFilter<"RewardRevoke"> | number
    amount?: IntFilter<"RewardRevoke"> | number
    status?: EnumStatusFilter<"RewardRevoke"> | $Enums.Status
    type?: EnumActionTypeFilter<"RewardRevoke"> | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFilter<"RewardRevoke"> | $Enums.RewardRevokeCreditType
    registrantId?: StringNullableFilter<"RewardRevoke"> | string | null
    approverId?: StringNullableFilter<"RewardRevoke"> | string | null
    isApproved?: BoolFilter<"RewardRevoke"> | boolean
    approvedAt?: DateTimeNullableFilter<"RewardRevoke"> | Date | string | null
    createdAt?: DateTimeFilter<"RewardRevoke"> | Date | string
    updatedAt?: DateTimeFilter<"RewardRevoke"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type RewardRevokeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type RewardRevokeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RewardRevokeWhereInput | RewardRevokeWhereInput[]
    OR?: RewardRevokeWhereInput[]
    NOT?: RewardRevokeWhereInput | RewardRevokeWhereInput[]
    userId?: IntFilter<"RewardRevoke"> | number
    amount?: IntFilter<"RewardRevoke"> | number
    status?: EnumStatusFilter<"RewardRevoke"> | $Enums.Status
    type?: EnumActionTypeFilter<"RewardRevoke"> | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFilter<"RewardRevoke"> | $Enums.RewardRevokeCreditType
    registrantId?: StringNullableFilter<"RewardRevoke"> | string | null
    approverId?: StringNullableFilter<"RewardRevoke"> | string | null
    isApproved?: BoolFilter<"RewardRevoke"> | boolean
    approvedAt?: DateTimeNullableFilter<"RewardRevoke"> | Date | string | null
    createdAt?: DateTimeFilter<"RewardRevoke"> | Date | string
    updatedAt?: DateTimeFilter<"RewardRevoke"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type RewardRevokeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RewardRevokeCountOrderByAggregateInput
    _avg?: RewardRevokeAvgOrderByAggregateInput
    _max?: RewardRevokeMaxOrderByAggregateInput
    _min?: RewardRevokeMinOrderByAggregateInput
    _sum?: RewardRevokeSumOrderByAggregateInput
  }

  export type RewardRevokeScalarWhereWithAggregatesInput = {
    AND?: RewardRevokeScalarWhereWithAggregatesInput | RewardRevokeScalarWhereWithAggregatesInput[]
    OR?: RewardRevokeScalarWhereWithAggregatesInput[]
    NOT?: RewardRevokeScalarWhereWithAggregatesInput | RewardRevokeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RewardRevoke"> | string
    userId?: IntWithAggregatesFilter<"RewardRevoke"> | number
    amount?: IntWithAggregatesFilter<"RewardRevoke"> | number
    status?: EnumStatusWithAggregatesFilter<"RewardRevoke"> | $Enums.Status
    type?: EnumActionTypeWithAggregatesFilter<"RewardRevoke"> | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeWithAggregatesFilter<"RewardRevoke"> | $Enums.RewardRevokeCreditType
    registrantId?: StringNullableWithAggregatesFilter<"RewardRevoke"> | string | null
    approverId?: StringNullableWithAggregatesFilter<"RewardRevoke"> | string | null
    isApproved?: BoolWithAggregatesFilter<"RewardRevoke"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"RewardRevoke"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RewardRevoke"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RewardRevoke"> | Date | string
  }

  export type ItemsWhereInput = {
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    id?: StringFilter<"Items"> | string
    itemId?: StringFilter<"Items"> | string
    itemName?: StringFilter<"Items"> | string
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
  }

  export type ItemsOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    itemId?: string
    AND?: ItemsWhereInput | ItemsWhereInput[]
    OR?: ItemsWhereInput[]
    NOT?: ItemsWhereInput | ItemsWhereInput[]
    itemName?: StringFilter<"Items"> | string
    createdAt?: DateTimeFilter<"Items"> | Date | string
    updatedAt?: DateTimeFilter<"Items"> | Date | string
  }, "id" | "itemId">

  export type ItemsOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemsCountOrderByAggregateInput
    _max?: ItemsMaxOrderByAggregateInput
    _min?: ItemsMinOrderByAggregateInput
  }

  export type ItemsScalarWhereWithAggregatesInput = {
    AND?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    OR?: ItemsScalarWhereWithAggregatesInput[]
    NOT?: ItemsScalarWhereWithAggregatesInput | ItemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Items"> | string
    itemId?: StringWithAggregatesFilter<"Items"> | string
    itemName?: StringWithAggregatesFilter<"Items"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Items"> | Date | string
  }

  export type GroupsWhereInput = {
    AND?: GroupsWhereInput | GroupsWhereInput[]
    OR?: GroupsWhereInput[]
    NOT?: GroupsWhereInput | GroupsWhereInput[]
    id?: StringFilter<"Groups"> | string
    groupId?: StringFilter<"Groups"> | string
    groupBoolean?: BoolFilter<"Groups"> | boolean
    minRole?: EnumUserRoleFilter<"Groups"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"Groups"> | Date | string
    updatedAt?: DateTimeFilter<"Groups"> | Date | string
  }

  export type GroupsOrderByWithRelationInput = {
    id?: SortOrder
    groupId?: SortOrder
    groupBoolean?: SortOrder
    minRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    groupId?: string
    AND?: GroupsWhereInput | GroupsWhereInput[]
    OR?: GroupsWhereInput[]
    NOT?: GroupsWhereInput | GroupsWhereInput[]
    groupBoolean?: BoolFilter<"Groups"> | boolean
    minRole?: EnumUserRoleFilter<"Groups"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"Groups"> | Date | string
    updatedAt?: DateTimeFilter<"Groups"> | Date | string
  }, "id" | "groupId">

  export type GroupsOrderByWithAggregationInput = {
    id?: SortOrder
    groupId?: SortOrder
    groupBoolean?: SortOrder
    minRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupsCountOrderByAggregateInput
    _max?: GroupsMaxOrderByAggregateInput
    _min?: GroupsMinOrderByAggregateInput
  }

  export type GroupsScalarWhereWithAggregatesInput = {
    AND?: GroupsScalarWhereWithAggregatesInput | GroupsScalarWhereWithAggregatesInput[]
    OR?: GroupsScalarWhereWithAggregatesInput[]
    NOT?: GroupsScalarWhereWithAggregatesInput | GroupsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Groups"> | string
    groupId?: StringWithAggregatesFilter<"Groups"> | string
    groupBoolean?: BoolWithAggregatesFilter<"Groups"> | boolean
    minRole?: EnumUserRoleWithAggregatesFilter<"Groups"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"Groups"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Groups"> | Date | string
  }

  export type CreditManagementWhereInput = {
    AND?: CreditManagementWhereInput | CreditManagementWhereInput[]
    OR?: CreditManagementWhereInput[]
    NOT?: CreditManagementWhereInput | CreditManagementWhereInput[]
    id?: StringFilter<"CreditManagement"> | string
    userId?: IntFilter<"CreditManagement"> | number
    type?: EnumActionTypeFilter<"CreditManagement"> | $Enums.ActionType
    creditType?: EnumCreditTypeFilter<"CreditManagement"> | $Enums.CreditType
    amount?: IntFilter<"CreditManagement"> | number
    status?: EnumStatusFilter<"CreditManagement"> | $Enums.Status
    registrantId?: StringNullableFilter<"CreditManagement"> | string | null
    approverId?: StringNullableFilter<"CreditManagement"> | string | null
    isApproved?: BoolFilter<"CreditManagement"> | boolean
    approvedAt?: DateTimeNullableFilter<"CreditManagement"> | Date | string | null
    createdAt?: DateTimeFilter<"CreditManagement"> | Date | string
    updatedAt?: DateTimeFilter<"CreditManagement"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type CreditManagementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type CreditManagementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CreditManagementWhereInput | CreditManagementWhereInput[]
    OR?: CreditManagementWhereInput[]
    NOT?: CreditManagementWhereInput | CreditManagementWhereInput[]
    userId?: IntFilter<"CreditManagement"> | number
    type?: EnumActionTypeFilter<"CreditManagement"> | $Enums.ActionType
    creditType?: EnumCreditTypeFilter<"CreditManagement"> | $Enums.CreditType
    amount?: IntFilter<"CreditManagement"> | number
    status?: EnumStatusFilter<"CreditManagement"> | $Enums.Status
    registrantId?: StringNullableFilter<"CreditManagement"> | string | null
    approverId?: StringNullableFilter<"CreditManagement"> | string | null
    isApproved?: BoolFilter<"CreditManagement"> | boolean
    approvedAt?: DateTimeNullableFilter<"CreditManagement"> | Date | string | null
    createdAt?: DateTimeFilter<"CreditManagement"> | Date | string
    updatedAt?: DateTimeFilter<"CreditManagement"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type CreditManagementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CreditManagementCountOrderByAggregateInput
    _avg?: CreditManagementAvgOrderByAggregateInput
    _max?: CreditManagementMaxOrderByAggregateInput
    _min?: CreditManagementMinOrderByAggregateInput
    _sum?: CreditManagementSumOrderByAggregateInput
  }

  export type CreditManagementScalarWhereWithAggregatesInput = {
    AND?: CreditManagementScalarWhereWithAggregatesInput | CreditManagementScalarWhereWithAggregatesInput[]
    OR?: CreditManagementScalarWhereWithAggregatesInput[]
    NOT?: CreditManagementScalarWhereWithAggregatesInput | CreditManagementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CreditManagement"> | string
    userId?: IntWithAggregatesFilter<"CreditManagement"> | number
    type?: EnumActionTypeWithAggregatesFilter<"CreditManagement"> | $Enums.ActionType
    creditType?: EnumCreditTypeWithAggregatesFilter<"CreditManagement"> | $Enums.CreditType
    amount?: IntWithAggregatesFilter<"CreditManagement"> | number
    status?: EnumStatusWithAggregatesFilter<"CreditManagement"> | $Enums.Status
    registrantId?: StringNullableWithAggregatesFilter<"CreditManagement"> | string | null
    approverId?: StringNullableWithAggregatesFilter<"CreditManagement"> | string | null
    isApproved?: BoolWithAggregatesFilter<"CreditManagement"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"CreditManagement"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CreditManagement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CreditManagement"> | Date | string
  }

  export type BlockTicketWhereInput = {
    AND?: BlockTicketWhereInput | BlockTicketWhereInput[]
    OR?: BlockTicketWhereInput[]
    NOT?: BlockTicketWhereInput | BlockTicketWhereInput[]
    id?: StringFilter<"BlockTicket"> | string
    reportId?: IntFilter<"BlockTicket"> | number
    status?: EnumStatusFilter<"BlockTicket"> | $Enums.Status
    registrantId?: StringNullableFilter<"BlockTicket"> | string | null
    approverId?: StringNullableFilter<"BlockTicket"> | string | null
    isApproved?: BoolFilter<"BlockTicket"> | boolean
    approvedAt?: DateTimeNullableFilter<"BlockTicket"> | Date | string | null
    createdAt?: DateTimeFilter<"BlockTicket"> | Date | string
    updatedAt?: DateTimeFilter<"BlockTicket"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type BlockTicketOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type BlockTicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BlockTicketWhereInput | BlockTicketWhereInput[]
    OR?: BlockTicketWhereInput[]
    NOT?: BlockTicketWhereInput | BlockTicketWhereInput[]
    reportId?: IntFilter<"BlockTicket"> | number
    status?: EnumStatusFilter<"BlockTicket"> | $Enums.Status
    registrantId?: StringNullableFilter<"BlockTicket"> | string | null
    approverId?: StringNullableFilter<"BlockTicket"> | string | null
    isApproved?: BoolFilter<"BlockTicket"> | boolean
    approvedAt?: DateTimeNullableFilter<"BlockTicket"> | Date | string | null
    createdAt?: DateTimeFilter<"BlockTicket"> | Date | string
    updatedAt?: DateTimeFilter<"BlockTicket"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type BlockTicketOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    status?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BlockTicketCountOrderByAggregateInput
    _avg?: BlockTicketAvgOrderByAggregateInput
    _max?: BlockTicketMaxOrderByAggregateInput
    _min?: BlockTicketMinOrderByAggregateInput
    _sum?: BlockTicketSumOrderByAggregateInput
  }

  export type BlockTicketScalarWhereWithAggregatesInput = {
    AND?: BlockTicketScalarWhereWithAggregatesInput | BlockTicketScalarWhereWithAggregatesInput[]
    OR?: BlockTicketScalarWhereWithAggregatesInput[]
    NOT?: BlockTicketScalarWhereWithAggregatesInput | BlockTicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BlockTicket"> | string
    reportId?: IntWithAggregatesFilter<"BlockTicket"> | number
    status?: EnumStatusWithAggregatesFilter<"BlockTicket"> | $Enums.Status
    registrantId?: StringNullableWithAggregatesFilter<"BlockTicket"> | string | null
    approverId?: StringNullableWithAggregatesFilter<"BlockTicket"> | string | null
    isApproved?: BoolWithAggregatesFilter<"BlockTicket"> | boolean
    approvedAt?: DateTimeNullableWithAggregatesFilter<"BlockTicket"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BlockTicket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BlockTicket"> | Date | string
  }

  export type BoardWhereInput = {
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    id?: StringFilter<"Board"> | string
    title?: StringFilter<"Board"> | string
    content?: StringFilter<"Board"> | string
    views?: IntFilter<"Board"> | number
    registrantId?: StringNullableFilter<"Board"> | string | null
    isNotice?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    comments?: BoardCommentListRelationFilter
  }

  export type BoardOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    views?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    isNotice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
    comments?: BoardCommentOrderByRelationAggregateInput
  }

  export type BoardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    title?: StringFilter<"Board"> | string
    content?: StringFilter<"Board"> | string
    views?: IntFilter<"Board"> | number
    registrantId?: StringNullableFilter<"Board"> | string | null
    isNotice?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    comments?: BoardCommentListRelationFilter
  }, "id">

  export type BoardOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    views?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    isNotice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BoardCountOrderByAggregateInput
    _avg?: BoardAvgOrderByAggregateInput
    _max?: BoardMaxOrderByAggregateInput
    _min?: BoardMinOrderByAggregateInput
    _sum?: BoardSumOrderByAggregateInput
  }

  export type BoardScalarWhereWithAggregatesInput = {
    AND?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    OR?: BoardScalarWhereWithAggregatesInput[]
    NOT?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Board"> | string
    title?: StringWithAggregatesFilter<"Board"> | string
    content?: StringWithAggregatesFilter<"Board"> | string
    views?: IntWithAggregatesFilter<"Board"> | number
    registrantId?: StringNullableWithAggregatesFilter<"Board"> | string | null
    isNotice?: BoolWithAggregatesFilter<"Board"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
  }

  export type BoardCommentWhereInput = {
    AND?: BoardCommentWhereInput | BoardCommentWhereInput[]
    OR?: BoardCommentWhereInput[]
    NOT?: BoardCommentWhereInput | BoardCommentWhereInput[]
    id?: StringFilter<"BoardComment"> | string
    content?: StringFilter<"BoardComment"> | string
    boardId?: StringFilter<"BoardComment"> | string
    registrantId?: StringFilter<"BoardComment"> | string
    createdAt?: DateTimeFilter<"BoardComment"> | Date | string
    updatedAt?: DateTimeFilter<"BoardComment"> | Date | string
    board?: XOR<BoardRelationFilter, BoardWhereInput>
    registrant?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BoardCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    boardId?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    board?: BoardOrderByWithRelationInput
    registrant?: UserOrderByWithRelationInput
  }

  export type BoardCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BoardCommentWhereInput | BoardCommentWhereInput[]
    OR?: BoardCommentWhereInput[]
    NOT?: BoardCommentWhereInput | BoardCommentWhereInput[]
    content?: StringFilter<"BoardComment"> | string
    boardId?: StringFilter<"BoardComment"> | string
    registrantId?: StringFilter<"BoardComment"> | string
    createdAt?: DateTimeFilter<"BoardComment"> | Date | string
    updatedAt?: DateTimeFilter<"BoardComment"> | Date | string
    board?: XOR<BoardRelationFilter, BoardWhereInput>
    registrant?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BoardCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    boardId?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BoardCommentCountOrderByAggregateInput
    _max?: BoardCommentMaxOrderByAggregateInput
    _min?: BoardCommentMinOrderByAggregateInput
  }

  export type BoardCommentScalarWhereWithAggregatesInput = {
    AND?: BoardCommentScalarWhereWithAggregatesInput | BoardCommentScalarWhereWithAggregatesInput[]
    OR?: BoardCommentScalarWhereWithAggregatesInput[]
    NOT?: BoardCommentScalarWhereWithAggregatesInput | BoardCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BoardComment"> | string
    content?: StringWithAggregatesFilter<"BoardComment"> | string
    boardId?: StringWithAggregatesFilter<"BoardComment"> | string
    registrantId?: StringWithAggregatesFilter<"BoardComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BoardComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BoardComment"> | Date | string
  }

  export type AccountUsingQuerylogWhereInput = {
    AND?: AccountUsingQuerylogWhereInput | AccountUsingQuerylogWhereInput[]
    OR?: AccountUsingQuerylogWhereInput[]
    NOT?: AccountUsingQuerylogWhereInput | AccountUsingQuerylogWhereInput[]
    id?: StringFilter<"AccountUsingQuerylog"> | string
    content?: StringFilter<"AccountUsingQuerylog"> | string
    registrantId?: StringNullableFilter<"AccountUsingQuerylog"> | string | null
    createdAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
    updatedAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AccountUsingQuerylogOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrant?: UserOrderByWithRelationInput
  }

  export type AccountUsingQuerylogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountUsingQuerylogWhereInput | AccountUsingQuerylogWhereInput[]
    OR?: AccountUsingQuerylogWhereInput[]
    NOT?: AccountUsingQuerylogWhereInput | AccountUsingQuerylogWhereInput[]
    content?: StringFilter<"AccountUsingQuerylog"> | string
    registrantId?: StringNullableFilter<"AccountUsingQuerylog"> | string | null
    createdAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
    updatedAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
    registrant?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountUsingQuerylogOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    registrantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountUsingQuerylogCountOrderByAggregateInput
    _max?: AccountUsingQuerylogMaxOrderByAggregateInput
    _min?: AccountUsingQuerylogMinOrderByAggregateInput
  }

  export type AccountUsingQuerylogScalarWhereWithAggregatesInput = {
    AND?: AccountUsingQuerylogScalarWhereWithAggregatesInput | AccountUsingQuerylogScalarWhereWithAggregatesInput[]
    OR?: AccountUsingQuerylogScalarWhereWithAggregatesInput[]
    NOT?: AccountUsingQuerylogScalarWhereWithAggregatesInput | AccountUsingQuerylogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountUsingQuerylog"> | string
    content?: StringWithAggregatesFilter<"AccountUsingQuerylog"> | string
    registrantId?: StringNullableWithAggregatesFilter<"AccountUsingQuerylog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountUsingQuerylog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountUsingQuerylog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailCreateInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutGroupMailsInput
  }

  export type GroupMailUncheckedCreateInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupMailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGroupMailsNestedInput
  }

  export type GroupMailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailCreateManyInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupMailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailCreateInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutPersonalMailsInput
  }

  export type PersonalMailUncheckedCreateInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalMailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutPersonalMailsNestedInput
  }

  export type PersonalMailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailCreateManyInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalMailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockCreateInput = {
    id?: string
    ip: string
    reason: string
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutIpBlocksInput
  }

  export type IpBlockUncheckedCreateInput = {
    id?: string
    ip: string
    reason: string
    registrantId?: string | null
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpBlockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutIpBlocksNestedInput
  }

  export type IpBlockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockCreateManyInput = {
    id?: string
    ip: string
    reason: string
    registrantId?: string | null
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpBlockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockCreateInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutAccountBlocksInput
  }

  export type AccountBlockUncheckedCreateInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountBlockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutAccountBlocksNestedInput
  }

  export type AccountBlockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockCreateManyInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountBlockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponGroupCreateInput = {
    id?: string
    groupName: string
    groupType?: $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: string | null
    isIssued?: boolean
    usageLimit?: number | null
    groupReason: string
    groupStatus?: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    coupons?: CouponCreateNestedManyWithoutCouponGroupInput
  }

  export type CouponGroupUncheckedCreateInput = {
    id?: string
    groupName: string
    groupType?: $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: string | null
    isIssued?: boolean
    usageLimit?: number | null
    groupReason: string
    groupStatus?: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    coupons?: CouponUncheckedCreateNestedManyWithoutCouponGroupInput
  }

  export type CouponGroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupons?: CouponUpdateManyWithoutCouponGroupNestedInput
  }

  export type CouponGroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupons?: CouponUncheckedUpdateManyWithoutCouponGroupNestedInput
  }

  export type CouponGroupCreateManyInput = {
    id?: string
    groupName: string
    groupType?: $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: string | null
    isIssued?: boolean
    usageLimit?: number | null
    groupReason: string
    groupStatus?: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponGroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponGroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponCreateInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    couponGroup?: CouponGroupCreateNestedOneWithoutCouponsInput
    couponLogs?: CouponLogCreateNestedManyWithoutCouponInput
  }

  export type CouponUncheckedCreateInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    couponGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    couponLogs?: CouponLogUncheckedCreateNestedManyWithoutCouponInput
  }

  export type CouponUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    couponGroup?: CouponGroupUpdateOneWithoutCouponsNestedInput
    couponLogs?: CouponLogUpdateManyWithoutCouponNestedInput
  }

  export type CouponUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    couponGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    couponLogs?: CouponLogUncheckedUpdateManyWithoutCouponNestedInput
  }

  export type CouponCreateManyInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    couponGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    couponGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogCreateInput = {
    id?: string
    userId: number
    nickname: string
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    coupon?: CouponCreateNestedOneWithoutCouponLogsInput
  }

  export type CouponLogUncheckedCreateInput = {
    id?: string
    userId: number
    nickname: string
    couponId?: string | null
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupon?: CouponUpdateOneWithoutCouponLogsNestedInput
  }

  export type CouponLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    couponId?: NullableStringFieldUpdateOperationsInput | string | null
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogCreateManyInput = {
    id?: string
    userId: number
    nickname: string
    couponId?: string | null
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    couponId?: NullableStringFieldUpdateOperationsInput | string | null
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityCreateInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredItemQuantitiesInput
    approver?: UserCreateNestedOneWithoutApprovedItemQuantitiesInput
  }

  export type ItemQuantityUncheckedCreateInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredItemQuantitiesNestedInput
    approver?: UserUpdateOneWithoutApprovedItemQuantitiesNestedInput
  }

  export type ItemQuantityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityCreateManyInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeCreateInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredRewardRevokesInput
    approver?: UserCreateNestedOneWithoutApprovedRewardRevokesInput
  }

  export type RewardRevokeUncheckedCreateInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredRewardRevokesNestedInput
    approver?: UserUpdateOneWithoutApprovedRewardRevokesNestedInput
  }

  export type RewardRevokeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeCreateManyInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsCreateInput = {
    id?: string
    itemId: string
    itemName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemsUncheckedCreateInput = {
    id?: string
    itemId: string
    itemName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsCreateManyInput = {
    id?: string
    itemId: string
    itemName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsCreateInput = {
    id?: string
    groupId: string
    groupBoolean: boolean
    minRole?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupsUncheckedCreateInput = {
    id?: string
    groupId: string
    groupBoolean: boolean
    minRole?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    groupBoolean?: BoolFieldUpdateOperationsInput | boolean
    minRole?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    groupBoolean?: BoolFieldUpdateOperationsInput | boolean
    minRole?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsCreateManyInput = {
    id?: string
    groupId: string
    groupBoolean: boolean
    minRole?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    groupBoolean?: BoolFieldUpdateOperationsInput | boolean
    minRole?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    groupBoolean?: BoolFieldUpdateOperationsInput | boolean
    minRole?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementCreateInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredCreditManagementsInput
    approver?: UserCreateNestedOneWithoutApprovedCreditManagementsInput
  }

  export type CreditManagementUncheckedCreateInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredCreditManagementsNestedInput
    approver?: UserUpdateOneWithoutApprovedCreditManagementsNestedInput
  }

  export type CreditManagementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementCreateManyInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketCreateInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredBlockTicketsInput
    approver?: UserCreateNestedOneWithoutApprovedBlockTicketsInput
  }

  export type BlockTicketUncheckedCreateInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredBlockTicketsNestedInput
    approver?: UserUpdateOneWithoutApprovedBlockTicketsNestedInput
  }

  export type BlockTicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketCreateManyInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    registrantId?: string | null
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateInput = {
    id?: string
    title: string
    content: string
    views?: number
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutBoardsInput
    comments?: BoardCommentCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    views?: number
    registrantId?: string | null
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: BoardCommentUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutBoardsNestedInput
    comments?: BoardCommentUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: BoardCommentUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardCreateManyInput = {
    id?: string
    title: string
    content: string
    views?: number
    registrantId?: string | null
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    board: BoardCreateNestedOneWithoutCommentsInput
    registrant: UserCreateNestedOneWithoutBoardCommentsInput
  }

  export type BoardCommentUncheckedCreateInput = {
    id?: string
    content: string
    boardId: string
    registrantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutCommentsNestedInput
    registrant?: UserUpdateOneRequiredWithoutBoardCommentsNestedInput
  }

  export type BoardCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    registrantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentCreateManyInput = {
    id?: string
    content: string
    boardId: string
    registrantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    registrantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutAccountUsingQuerylogsInput
  }

  export type AccountUsingQuerylogUncheckedCreateInput = {
    id?: string
    content: string
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUsingQuerylogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutAccountUsingQuerylogsNestedInput
  }

  export type AccountUsingQuerylogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogCreateManyInput = {
    id?: string
    content: string
    registrantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUsingQuerylogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountUsingQuerylogListRelationFilter = {
    every?: AccountUsingQuerylogWhereInput
    some?: AccountUsingQuerylogWhereInput
    none?: AccountUsingQuerylogWhereInput
  }

  export type GroupMailListRelationFilter = {
    every?: GroupMailWhereInput
    some?: GroupMailWhereInput
    none?: GroupMailWhereInput
  }

  export type PersonalMailListRelationFilter = {
    every?: PersonalMailWhereInput
    some?: PersonalMailWhereInput
    none?: PersonalMailWhereInput
  }

  export type IpBlockListRelationFilter = {
    every?: IpBlockWhereInput
    some?: IpBlockWhereInput
    none?: IpBlockWhereInput
  }

  export type AccountBlockListRelationFilter = {
    every?: AccountBlockWhereInput
    some?: AccountBlockWhereInput
    none?: AccountBlockWhereInput
  }

  export type ItemQuantityListRelationFilter = {
    every?: ItemQuantityWhereInput
    some?: ItemQuantityWhereInput
    none?: ItemQuantityWhereInput
  }

  export type CreditManagementListRelationFilter = {
    every?: CreditManagementWhereInput
    some?: CreditManagementWhereInput
    none?: CreditManagementWhereInput
  }

  export type BlockTicketListRelationFilter = {
    every?: BlockTicketWhereInput
    some?: BlockTicketWhereInput
    none?: BlockTicketWhereInput
  }

  export type RewardRevokeListRelationFilter = {
    every?: RewardRevokeWhereInput
    some?: RewardRevokeWhereInput
    none?: RewardRevokeWhereInput
  }

  export type BoardListRelationFilter = {
    every?: BoardWhereInput
    some?: BoardWhereInput
    none?: BoardWhereInput
  }

  export type BoardCommentListRelationFilter = {
    every?: BoardCommentWhereInput
    some?: BoardCommentWhereInput
    none?: BoardCommentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountUsingQuerylogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupMailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonalMailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IpBlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountBlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemQuantityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CreditManagementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RewardRevokeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    emailVerified?: SortOrder
    nickname?: SortOrder
    image?: SortOrder
    role?: SortOrder
    isPermissive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    emailVerified?: SortOrder
    nickname?: SortOrder
    image?: SortOrder
    role?: SortOrder
    isPermissive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hashedPassword?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    emailVerified?: SortOrder
    nickname?: SortOrder
    image?: SortOrder
    role?: SortOrder
    isPermissive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GroupMailCountOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMailMaxOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMailMinOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PersonalMailCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    reward?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonalMailAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type PersonalMailMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonalMailMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonalMailSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumIpBlockTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IpBlockType | EnumIpBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIpBlockTypeFilter<$PrismaModel> | $Enums.IpBlockType
  }

  export type IpBlockCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    reason?: SortOrder
    registrantId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IpBlockMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    reason?: SortOrder
    registrantId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IpBlockMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    reason?: SortOrder
    registrantId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumIpBlockTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IpBlockType | EnumIpBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIpBlockTypeWithAggregatesFilter<$PrismaModel> | $Enums.IpBlockType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIpBlockTypeFilter<$PrismaModel>
    _max?: NestedEnumIpBlockTypeFilter<$PrismaModel>
  }

  export type EnumAccountBlockTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountBlockType | EnumAccountBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountBlockTypeFilter<$PrismaModel> | $Enums.AccountBlockType
  }

  export type AccountBlockCountOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    blockDuration?: SortOrder
    isPermanent?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountBlockAvgOrderByAggregateInput = {
    userId?: SortOrder
    blockDuration?: SortOrder
  }

  export type AccountBlockMaxOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    blockDuration?: SortOrder
    isPermanent?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountBlockMinOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    blockDuration?: SortOrder
    isPermanent?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountBlockSumOrderByAggregateInput = {
    userId?: SortOrder
    blockDuration?: SortOrder
  }

  export type EnumAccountBlockTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountBlockType | EnumAccountBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountBlockTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountBlockType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountBlockTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountBlockTypeFilter<$PrismaModel>
  }

  export type EnumCouponGroupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupType | EnumCouponGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupTypeFilter<$PrismaModel> | $Enums.CouponGroupType
  }

  export type EnumCouponGroupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupStatus | EnumCouponGroupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupStatusFilter<$PrismaModel> | $Enums.CouponGroupStatus
  }

  export type CouponListRelationFilter = {
    every?: CouponWhereInput
    some?: CouponWhereInput
    none?: CouponWhereInput
  }

  export type CouponOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CouponGroupCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupType?: SortOrder
    rewards?: SortOrder
    code?: SortOrder
    isIssued?: SortOrder
    usageLimit?: SortOrder
    groupReason?: SortOrder
    groupStatus?: SortOrder
    quantity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponGroupAvgOrderByAggregateInput = {
    usageLimit?: SortOrder
    quantity?: SortOrder
  }

  export type CouponGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupType?: SortOrder
    code?: SortOrder
    isIssued?: SortOrder
    usageLimit?: SortOrder
    groupReason?: SortOrder
    groupStatus?: SortOrder
    quantity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponGroupMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupType?: SortOrder
    code?: SortOrder
    isIssued?: SortOrder
    usageLimit?: SortOrder
    groupReason?: SortOrder
    groupStatus?: SortOrder
    quantity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponGroupSumOrderByAggregateInput = {
    usageLimit?: SortOrder
    quantity?: SortOrder
  }

  export type EnumCouponGroupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupType | EnumCouponGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupTypeWithAggregatesFilter<$PrismaModel> | $Enums.CouponGroupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCouponGroupTypeFilter<$PrismaModel>
    _max?: NestedEnumCouponGroupTypeFilter<$PrismaModel>
  }

  export type EnumCouponGroupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupStatus | EnumCouponGroupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupStatusWithAggregatesFilter<$PrismaModel> | $Enums.CouponGroupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCouponGroupStatusFilter<$PrismaModel>
    _max?: NestedEnumCouponGroupStatusFilter<$PrismaModel>
  }

  export type CouponGroupNullableRelationFilter = {
    is?: CouponGroupWhereInput | null
    isNot?: CouponGroupWhereInput | null
  }

  export type CouponLogListRelationFilter = {
    every?: CouponLogWhereInput
    some?: CouponLogWhereInput
    none?: CouponLogWhereInput
  }

  export type CouponLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CouponCountOrderByAggregateInput = {
    id?: SortOrder
    rewards?: SortOrder
    isUsed?: SortOrder
    code?: SortOrder
    couponGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponMaxOrderByAggregateInput = {
    id?: SortOrder
    isUsed?: SortOrder
    code?: SortOrder
    couponGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponMinOrderByAggregateInput = {
    id?: SortOrder
    isUsed?: SortOrder
    code?: SortOrder
    couponGroupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponNullableRelationFilter = {
    is?: CouponWhereInput | null
    isNot?: CouponWhereInput | null
  }

  export type CouponLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nickname?: SortOrder
    couponId?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponLogAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type CouponLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nickname?: SortOrder
    couponId?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nickname?: SortOrder
    couponId?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CouponLogSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type ItemQuantityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemQuantityAvgOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type ItemQuantityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemQuantityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemQuantitySumOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type EnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumRewardRevokeCreditTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardRevokeCreditType | EnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel> | $Enums.RewardRevokeCreditType
  }

  export type RewardRevokeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardRevokeAvgOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type RewardRevokeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardRevokeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RewardRevokeSumOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type EnumRewardRevokeCreditTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardRevokeCreditType | EnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardRevokeCreditTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardRevokeCreditType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel>
  }

  export type ItemsCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemsMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    itemName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupsCountOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    groupBoolean?: SortOrder
    minRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    groupBoolean?: SortOrder
    minRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupsMinOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    groupBoolean?: SortOrder
    minRole?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCreditTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CreditType | EnumCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCreditTypeFilter<$PrismaModel> | $Enums.CreditType
  }

  export type CreditManagementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditManagementAvgOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type CreditManagementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditManagementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    creditType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditManagementSumOrderByAggregateInput = {
    userId?: SortOrder
    amount?: SortOrder
  }

  export type EnumCreditTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CreditType | EnumCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCreditTypeWithAggregatesFilter<$PrismaModel> | $Enums.CreditType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCreditTypeFilter<$PrismaModel>
    _max?: NestedEnumCreditTypeFilter<$PrismaModel>
  }

  export type BlockTicketCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockTicketAvgOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type BlockTicketMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockTicketMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    status?: SortOrder
    registrantId?: SortOrder
    approverId?: SortOrder
    isApproved?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlockTicketSumOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type BoardCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    views?: SortOrder
    registrantId?: SortOrder
    isNotice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardAvgOrderByAggregateInput = {
    views?: SortOrder
  }

  export type BoardMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    views?: SortOrder
    registrantId?: SortOrder
    isNotice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    views?: SortOrder
    registrantId?: SortOrder
    isNotice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardSumOrderByAggregateInput = {
    views?: SortOrder
  }

  export type BoardRelationFilter = {
    is?: BoardWhereInput
    isNot?: BoardWhereInput
  }

  export type BoardCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    boardId?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    boardId?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    boardId?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountUsingQuerylogCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountUsingQuerylogMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountUsingQuerylogMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    registrantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput> | AccountUsingQuerylogCreateWithoutRegistrantInput[] | AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput | AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput[]
    createMany?: AccountUsingQuerylogCreateManyRegistrantInputEnvelope
    connect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
  }

  export type GroupMailCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput> | GroupMailCreateWithoutUserInput[] | GroupMailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMailCreateOrConnectWithoutUserInput | GroupMailCreateOrConnectWithoutUserInput[]
    createMany?: GroupMailCreateManyUserInputEnvelope
    connect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
  }

  export type PersonalMailCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput> | PersonalMailCreateWithoutRegistrantInput[] | PersonalMailUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: PersonalMailCreateOrConnectWithoutRegistrantInput | PersonalMailCreateOrConnectWithoutRegistrantInput[]
    createMany?: PersonalMailCreateManyRegistrantInputEnvelope
    connect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
  }

  export type IpBlockCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput> | IpBlockCreateWithoutRegistrantInput[] | IpBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: IpBlockCreateOrConnectWithoutRegistrantInput | IpBlockCreateOrConnectWithoutRegistrantInput[]
    createMany?: IpBlockCreateManyRegistrantInputEnvelope
    connect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
  }

  export type AccountBlockCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput> | AccountBlockCreateWithoutRegistrantInput[] | AccountBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountBlockCreateOrConnectWithoutRegistrantInput | AccountBlockCreateOrConnectWithoutRegistrantInput[]
    createMany?: AccountBlockCreateManyRegistrantInputEnvelope
    connect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
  }

  export type ItemQuantityCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput> | ItemQuantityCreateWithoutRegistrantInput[] | ItemQuantityUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutRegistrantInput | ItemQuantityCreateOrConnectWithoutRegistrantInput[]
    createMany?: ItemQuantityCreateManyRegistrantInputEnvelope
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
  }

  export type ItemQuantityCreateNestedManyWithoutApproverInput = {
    create?: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput> | ItemQuantityCreateWithoutApproverInput[] | ItemQuantityUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutApproverInput | ItemQuantityCreateOrConnectWithoutApproverInput[]
    createMany?: ItemQuantityCreateManyApproverInputEnvelope
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
  }

  export type CreditManagementCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput> | CreditManagementCreateWithoutRegistrantInput[] | CreditManagementUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutRegistrantInput | CreditManagementCreateOrConnectWithoutRegistrantInput[]
    createMany?: CreditManagementCreateManyRegistrantInputEnvelope
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
  }

  export type CreditManagementCreateNestedManyWithoutApproverInput = {
    create?: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput> | CreditManagementCreateWithoutApproverInput[] | CreditManagementUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutApproverInput | CreditManagementCreateOrConnectWithoutApproverInput[]
    createMany?: CreditManagementCreateManyApproverInputEnvelope
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
  }

  export type BlockTicketCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput> | BlockTicketCreateWithoutRegistrantInput[] | BlockTicketUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutRegistrantInput | BlockTicketCreateOrConnectWithoutRegistrantInput[]
    createMany?: BlockTicketCreateManyRegistrantInputEnvelope
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
  }

  export type BlockTicketCreateNestedManyWithoutApproverInput = {
    create?: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput> | BlockTicketCreateWithoutApproverInput[] | BlockTicketUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutApproverInput | BlockTicketCreateOrConnectWithoutApproverInput[]
    createMany?: BlockTicketCreateManyApproverInputEnvelope
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
  }

  export type RewardRevokeCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput> | RewardRevokeCreateWithoutRegistrantInput[] | RewardRevokeUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutRegistrantInput | RewardRevokeCreateOrConnectWithoutRegistrantInput[]
    createMany?: RewardRevokeCreateManyRegistrantInputEnvelope
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
  }

  export type RewardRevokeCreateNestedManyWithoutApproverInput = {
    create?: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput> | RewardRevokeCreateWithoutApproverInput[] | RewardRevokeUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutApproverInput | RewardRevokeCreateOrConnectWithoutApproverInput[]
    createMany?: RewardRevokeCreateManyApproverInputEnvelope
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
  }

  export type BoardCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput> | BoardCreateWithoutRegistrantInput[] | BoardUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRegistrantInput | BoardCreateOrConnectWithoutRegistrantInput[]
    createMany?: BoardCreateManyRegistrantInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoardCommentCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput> | BoardCommentCreateWithoutRegistrantInput[] | BoardCommentUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutRegistrantInput | BoardCommentCreateOrConnectWithoutRegistrantInput[]
    createMany?: BoardCommentCreateManyRegistrantInputEnvelope
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput> | AccountUsingQuerylogCreateWithoutRegistrantInput[] | AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput | AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput[]
    createMany?: AccountUsingQuerylogCreateManyRegistrantInputEnvelope
    connect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
  }

  export type GroupMailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput> | GroupMailCreateWithoutUserInput[] | GroupMailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMailCreateOrConnectWithoutUserInput | GroupMailCreateOrConnectWithoutUserInput[]
    createMany?: GroupMailCreateManyUserInputEnvelope
    connect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
  }

  export type PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput> | PersonalMailCreateWithoutRegistrantInput[] | PersonalMailUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: PersonalMailCreateOrConnectWithoutRegistrantInput | PersonalMailCreateOrConnectWithoutRegistrantInput[]
    createMany?: PersonalMailCreateManyRegistrantInputEnvelope
    connect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
  }

  export type IpBlockUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput> | IpBlockCreateWithoutRegistrantInput[] | IpBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: IpBlockCreateOrConnectWithoutRegistrantInput | IpBlockCreateOrConnectWithoutRegistrantInput[]
    createMany?: IpBlockCreateManyRegistrantInputEnvelope
    connect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
  }

  export type AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput> | AccountBlockCreateWithoutRegistrantInput[] | AccountBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountBlockCreateOrConnectWithoutRegistrantInput | AccountBlockCreateOrConnectWithoutRegistrantInput[]
    createMany?: AccountBlockCreateManyRegistrantInputEnvelope
    connect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
  }

  export type ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput> | ItemQuantityCreateWithoutRegistrantInput[] | ItemQuantityUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutRegistrantInput | ItemQuantityCreateOrConnectWithoutRegistrantInput[]
    createMany?: ItemQuantityCreateManyRegistrantInputEnvelope
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
  }

  export type ItemQuantityUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput> | ItemQuantityCreateWithoutApproverInput[] | ItemQuantityUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutApproverInput | ItemQuantityCreateOrConnectWithoutApproverInput[]
    createMany?: ItemQuantityCreateManyApproverInputEnvelope
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
  }

  export type CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput> | CreditManagementCreateWithoutRegistrantInput[] | CreditManagementUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutRegistrantInput | CreditManagementCreateOrConnectWithoutRegistrantInput[]
    createMany?: CreditManagementCreateManyRegistrantInputEnvelope
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
  }

  export type CreditManagementUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput> | CreditManagementCreateWithoutApproverInput[] | CreditManagementUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutApproverInput | CreditManagementCreateOrConnectWithoutApproverInput[]
    createMany?: CreditManagementCreateManyApproverInputEnvelope
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
  }

  export type BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput> | BlockTicketCreateWithoutRegistrantInput[] | BlockTicketUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutRegistrantInput | BlockTicketCreateOrConnectWithoutRegistrantInput[]
    createMany?: BlockTicketCreateManyRegistrantInputEnvelope
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
  }

  export type BlockTicketUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput> | BlockTicketCreateWithoutApproverInput[] | BlockTicketUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutApproverInput | BlockTicketCreateOrConnectWithoutApproverInput[]
    createMany?: BlockTicketCreateManyApproverInputEnvelope
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
  }

  export type RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput> | RewardRevokeCreateWithoutRegistrantInput[] | RewardRevokeUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutRegistrantInput | RewardRevokeCreateOrConnectWithoutRegistrantInput[]
    createMany?: RewardRevokeCreateManyRegistrantInputEnvelope
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
  }

  export type RewardRevokeUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput> | RewardRevokeCreateWithoutApproverInput[] | RewardRevokeUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutApproverInput | RewardRevokeCreateOrConnectWithoutApproverInput[]
    createMany?: RewardRevokeCreateManyApproverInputEnvelope
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
  }

  export type BoardUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput> | BoardCreateWithoutRegistrantInput[] | BoardUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRegistrantInput | BoardCreateOrConnectWithoutRegistrantInput[]
    createMany?: BoardCreateManyRegistrantInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput = {
    create?: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput> | BoardCommentCreateWithoutRegistrantInput[] | BoardCommentUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutRegistrantInput | BoardCommentCreateOrConnectWithoutRegistrantInput[]
    createMany?: BoardCommentCreateManyRegistrantInputEnvelope
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput> | AccountUsingQuerylogCreateWithoutRegistrantInput[] | AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput | AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput[]
    upsert?: AccountUsingQuerylogUpsertWithWhereUniqueWithoutRegistrantInput | AccountUsingQuerylogUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: AccountUsingQuerylogCreateManyRegistrantInputEnvelope
    set?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    disconnect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    delete?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    connect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    update?: AccountUsingQuerylogUpdateWithWhereUniqueWithoutRegistrantInput | AccountUsingQuerylogUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: AccountUsingQuerylogUpdateManyWithWhereWithoutRegistrantInput | AccountUsingQuerylogUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: AccountUsingQuerylogScalarWhereInput | AccountUsingQuerylogScalarWhereInput[]
  }

  export type GroupMailUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput> | GroupMailCreateWithoutUserInput[] | GroupMailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMailCreateOrConnectWithoutUserInput | GroupMailCreateOrConnectWithoutUserInput[]
    upsert?: GroupMailUpsertWithWhereUniqueWithoutUserInput | GroupMailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupMailCreateManyUserInputEnvelope
    set?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    disconnect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    delete?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    connect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    update?: GroupMailUpdateWithWhereUniqueWithoutUserInput | GroupMailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupMailUpdateManyWithWhereWithoutUserInput | GroupMailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupMailScalarWhereInput | GroupMailScalarWhereInput[]
  }

  export type PersonalMailUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput> | PersonalMailCreateWithoutRegistrantInput[] | PersonalMailUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: PersonalMailCreateOrConnectWithoutRegistrantInput | PersonalMailCreateOrConnectWithoutRegistrantInput[]
    upsert?: PersonalMailUpsertWithWhereUniqueWithoutRegistrantInput | PersonalMailUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: PersonalMailCreateManyRegistrantInputEnvelope
    set?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    disconnect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    delete?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    connect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    update?: PersonalMailUpdateWithWhereUniqueWithoutRegistrantInput | PersonalMailUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: PersonalMailUpdateManyWithWhereWithoutRegistrantInput | PersonalMailUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: PersonalMailScalarWhereInput | PersonalMailScalarWhereInput[]
  }

  export type IpBlockUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput> | IpBlockCreateWithoutRegistrantInput[] | IpBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: IpBlockCreateOrConnectWithoutRegistrantInput | IpBlockCreateOrConnectWithoutRegistrantInput[]
    upsert?: IpBlockUpsertWithWhereUniqueWithoutRegistrantInput | IpBlockUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: IpBlockCreateManyRegistrantInputEnvelope
    set?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    disconnect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    delete?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    connect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    update?: IpBlockUpdateWithWhereUniqueWithoutRegistrantInput | IpBlockUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: IpBlockUpdateManyWithWhereWithoutRegistrantInput | IpBlockUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: IpBlockScalarWhereInput | IpBlockScalarWhereInput[]
  }

  export type AccountBlockUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput> | AccountBlockCreateWithoutRegistrantInput[] | AccountBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountBlockCreateOrConnectWithoutRegistrantInput | AccountBlockCreateOrConnectWithoutRegistrantInput[]
    upsert?: AccountBlockUpsertWithWhereUniqueWithoutRegistrantInput | AccountBlockUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: AccountBlockCreateManyRegistrantInputEnvelope
    set?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    disconnect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    delete?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    connect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    update?: AccountBlockUpdateWithWhereUniqueWithoutRegistrantInput | AccountBlockUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: AccountBlockUpdateManyWithWhereWithoutRegistrantInput | AccountBlockUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: AccountBlockScalarWhereInput | AccountBlockScalarWhereInput[]
  }

  export type ItemQuantityUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput> | ItemQuantityCreateWithoutRegistrantInput[] | ItemQuantityUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutRegistrantInput | ItemQuantityCreateOrConnectWithoutRegistrantInput[]
    upsert?: ItemQuantityUpsertWithWhereUniqueWithoutRegistrantInput | ItemQuantityUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: ItemQuantityCreateManyRegistrantInputEnvelope
    set?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    disconnect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    delete?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    update?: ItemQuantityUpdateWithWhereUniqueWithoutRegistrantInput | ItemQuantityUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: ItemQuantityUpdateManyWithWhereWithoutRegistrantInput | ItemQuantityUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
  }

  export type ItemQuantityUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput> | ItemQuantityCreateWithoutApproverInput[] | ItemQuantityUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutApproverInput | ItemQuantityCreateOrConnectWithoutApproverInput[]
    upsert?: ItemQuantityUpsertWithWhereUniqueWithoutApproverInput | ItemQuantityUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ItemQuantityCreateManyApproverInputEnvelope
    set?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    disconnect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    delete?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    update?: ItemQuantityUpdateWithWhereUniqueWithoutApproverInput | ItemQuantityUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ItemQuantityUpdateManyWithWhereWithoutApproverInput | ItemQuantityUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
  }

  export type CreditManagementUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput> | CreditManagementCreateWithoutRegistrantInput[] | CreditManagementUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutRegistrantInput | CreditManagementCreateOrConnectWithoutRegistrantInput[]
    upsert?: CreditManagementUpsertWithWhereUniqueWithoutRegistrantInput | CreditManagementUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: CreditManagementCreateManyRegistrantInputEnvelope
    set?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    disconnect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    delete?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    update?: CreditManagementUpdateWithWhereUniqueWithoutRegistrantInput | CreditManagementUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: CreditManagementUpdateManyWithWhereWithoutRegistrantInput | CreditManagementUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
  }

  export type CreditManagementUpdateManyWithoutApproverNestedInput = {
    create?: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput> | CreditManagementCreateWithoutApproverInput[] | CreditManagementUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutApproverInput | CreditManagementCreateOrConnectWithoutApproverInput[]
    upsert?: CreditManagementUpsertWithWhereUniqueWithoutApproverInput | CreditManagementUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: CreditManagementCreateManyApproverInputEnvelope
    set?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    disconnect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    delete?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    update?: CreditManagementUpdateWithWhereUniqueWithoutApproverInput | CreditManagementUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: CreditManagementUpdateManyWithWhereWithoutApproverInput | CreditManagementUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
  }

  export type BlockTicketUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput> | BlockTicketCreateWithoutRegistrantInput[] | BlockTicketUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutRegistrantInput | BlockTicketCreateOrConnectWithoutRegistrantInput[]
    upsert?: BlockTicketUpsertWithWhereUniqueWithoutRegistrantInput | BlockTicketUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BlockTicketCreateManyRegistrantInputEnvelope
    set?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    disconnect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    delete?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    update?: BlockTicketUpdateWithWhereUniqueWithoutRegistrantInput | BlockTicketUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BlockTicketUpdateManyWithWhereWithoutRegistrantInput | BlockTicketUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
  }

  export type BlockTicketUpdateManyWithoutApproverNestedInput = {
    create?: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput> | BlockTicketCreateWithoutApproverInput[] | BlockTicketUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutApproverInput | BlockTicketCreateOrConnectWithoutApproverInput[]
    upsert?: BlockTicketUpsertWithWhereUniqueWithoutApproverInput | BlockTicketUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: BlockTicketCreateManyApproverInputEnvelope
    set?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    disconnect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    delete?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    update?: BlockTicketUpdateWithWhereUniqueWithoutApproverInput | BlockTicketUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: BlockTicketUpdateManyWithWhereWithoutApproverInput | BlockTicketUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
  }

  export type RewardRevokeUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput> | RewardRevokeCreateWithoutRegistrantInput[] | RewardRevokeUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutRegistrantInput | RewardRevokeCreateOrConnectWithoutRegistrantInput[]
    upsert?: RewardRevokeUpsertWithWhereUniqueWithoutRegistrantInput | RewardRevokeUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: RewardRevokeCreateManyRegistrantInputEnvelope
    set?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    disconnect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    delete?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    update?: RewardRevokeUpdateWithWhereUniqueWithoutRegistrantInput | RewardRevokeUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: RewardRevokeUpdateManyWithWhereWithoutRegistrantInput | RewardRevokeUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
  }

  export type RewardRevokeUpdateManyWithoutApproverNestedInput = {
    create?: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput> | RewardRevokeCreateWithoutApproverInput[] | RewardRevokeUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutApproverInput | RewardRevokeCreateOrConnectWithoutApproverInput[]
    upsert?: RewardRevokeUpsertWithWhereUniqueWithoutApproverInput | RewardRevokeUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: RewardRevokeCreateManyApproverInputEnvelope
    set?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    disconnect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    delete?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    update?: RewardRevokeUpdateWithWhereUniqueWithoutApproverInput | RewardRevokeUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: RewardRevokeUpdateManyWithWhereWithoutApproverInput | RewardRevokeUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
  }

  export type BoardUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput> | BoardCreateWithoutRegistrantInput[] | BoardUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRegistrantInput | BoardCreateOrConnectWithoutRegistrantInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutRegistrantInput | BoardUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BoardCreateManyRegistrantInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutRegistrantInput | BoardUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutRegistrantInput | BoardUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type BoardCommentUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput> | BoardCommentCreateWithoutRegistrantInput[] | BoardCommentUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutRegistrantInput | BoardCommentCreateOrConnectWithoutRegistrantInput[]
    upsert?: BoardCommentUpsertWithWhereUniqueWithoutRegistrantInput | BoardCommentUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BoardCommentCreateManyRegistrantInputEnvelope
    set?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    disconnect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    delete?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    update?: BoardCommentUpdateWithWhereUniqueWithoutRegistrantInput | BoardCommentUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BoardCommentUpdateManyWithWhereWithoutRegistrantInput | BoardCommentUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput> | AccountUsingQuerylogCreateWithoutRegistrantInput[] | AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput | AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput[]
    upsert?: AccountUsingQuerylogUpsertWithWhereUniqueWithoutRegistrantInput | AccountUsingQuerylogUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: AccountUsingQuerylogCreateManyRegistrantInputEnvelope
    set?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    disconnect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    delete?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    connect?: AccountUsingQuerylogWhereUniqueInput | AccountUsingQuerylogWhereUniqueInput[]
    update?: AccountUsingQuerylogUpdateWithWhereUniqueWithoutRegistrantInput | AccountUsingQuerylogUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: AccountUsingQuerylogUpdateManyWithWhereWithoutRegistrantInput | AccountUsingQuerylogUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: AccountUsingQuerylogScalarWhereInput | AccountUsingQuerylogScalarWhereInput[]
  }

  export type GroupMailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput> | GroupMailCreateWithoutUserInput[] | GroupMailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupMailCreateOrConnectWithoutUserInput | GroupMailCreateOrConnectWithoutUserInput[]
    upsert?: GroupMailUpsertWithWhereUniqueWithoutUserInput | GroupMailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupMailCreateManyUserInputEnvelope
    set?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    disconnect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    delete?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    connect?: GroupMailWhereUniqueInput | GroupMailWhereUniqueInput[]
    update?: GroupMailUpdateWithWhereUniqueWithoutUserInput | GroupMailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupMailUpdateManyWithWhereWithoutUserInput | GroupMailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupMailScalarWhereInput | GroupMailScalarWhereInput[]
  }

  export type PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput> | PersonalMailCreateWithoutRegistrantInput[] | PersonalMailUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: PersonalMailCreateOrConnectWithoutRegistrantInput | PersonalMailCreateOrConnectWithoutRegistrantInput[]
    upsert?: PersonalMailUpsertWithWhereUniqueWithoutRegistrantInput | PersonalMailUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: PersonalMailCreateManyRegistrantInputEnvelope
    set?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    disconnect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    delete?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    connect?: PersonalMailWhereUniqueInput | PersonalMailWhereUniqueInput[]
    update?: PersonalMailUpdateWithWhereUniqueWithoutRegistrantInput | PersonalMailUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: PersonalMailUpdateManyWithWhereWithoutRegistrantInput | PersonalMailUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: PersonalMailScalarWhereInput | PersonalMailScalarWhereInput[]
  }

  export type IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput> | IpBlockCreateWithoutRegistrantInput[] | IpBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: IpBlockCreateOrConnectWithoutRegistrantInput | IpBlockCreateOrConnectWithoutRegistrantInput[]
    upsert?: IpBlockUpsertWithWhereUniqueWithoutRegistrantInput | IpBlockUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: IpBlockCreateManyRegistrantInputEnvelope
    set?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    disconnect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    delete?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    connect?: IpBlockWhereUniqueInput | IpBlockWhereUniqueInput[]
    update?: IpBlockUpdateWithWhereUniqueWithoutRegistrantInput | IpBlockUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: IpBlockUpdateManyWithWhereWithoutRegistrantInput | IpBlockUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: IpBlockScalarWhereInput | IpBlockScalarWhereInput[]
  }

  export type AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput> | AccountBlockCreateWithoutRegistrantInput[] | AccountBlockUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: AccountBlockCreateOrConnectWithoutRegistrantInput | AccountBlockCreateOrConnectWithoutRegistrantInput[]
    upsert?: AccountBlockUpsertWithWhereUniqueWithoutRegistrantInput | AccountBlockUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: AccountBlockCreateManyRegistrantInputEnvelope
    set?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    disconnect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    delete?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    connect?: AccountBlockWhereUniqueInput | AccountBlockWhereUniqueInput[]
    update?: AccountBlockUpdateWithWhereUniqueWithoutRegistrantInput | AccountBlockUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: AccountBlockUpdateManyWithWhereWithoutRegistrantInput | AccountBlockUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: AccountBlockScalarWhereInput | AccountBlockScalarWhereInput[]
  }

  export type ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput> | ItemQuantityCreateWithoutRegistrantInput[] | ItemQuantityUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutRegistrantInput | ItemQuantityCreateOrConnectWithoutRegistrantInput[]
    upsert?: ItemQuantityUpsertWithWhereUniqueWithoutRegistrantInput | ItemQuantityUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: ItemQuantityCreateManyRegistrantInputEnvelope
    set?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    disconnect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    delete?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    update?: ItemQuantityUpdateWithWhereUniqueWithoutRegistrantInput | ItemQuantityUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: ItemQuantityUpdateManyWithWhereWithoutRegistrantInput | ItemQuantityUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
  }

  export type ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput> | ItemQuantityCreateWithoutApproverInput[] | ItemQuantityUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ItemQuantityCreateOrConnectWithoutApproverInput | ItemQuantityCreateOrConnectWithoutApproverInput[]
    upsert?: ItemQuantityUpsertWithWhereUniqueWithoutApproverInput | ItemQuantityUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ItemQuantityCreateManyApproverInputEnvelope
    set?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    disconnect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    delete?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    connect?: ItemQuantityWhereUniqueInput | ItemQuantityWhereUniqueInput[]
    update?: ItemQuantityUpdateWithWhereUniqueWithoutApproverInput | ItemQuantityUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ItemQuantityUpdateManyWithWhereWithoutApproverInput | ItemQuantityUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
  }

  export type CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput> | CreditManagementCreateWithoutRegistrantInput[] | CreditManagementUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutRegistrantInput | CreditManagementCreateOrConnectWithoutRegistrantInput[]
    upsert?: CreditManagementUpsertWithWhereUniqueWithoutRegistrantInput | CreditManagementUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: CreditManagementCreateManyRegistrantInputEnvelope
    set?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    disconnect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    delete?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    update?: CreditManagementUpdateWithWhereUniqueWithoutRegistrantInput | CreditManagementUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: CreditManagementUpdateManyWithWhereWithoutRegistrantInput | CreditManagementUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
  }

  export type CreditManagementUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput> | CreditManagementCreateWithoutApproverInput[] | CreditManagementUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: CreditManagementCreateOrConnectWithoutApproverInput | CreditManagementCreateOrConnectWithoutApproverInput[]
    upsert?: CreditManagementUpsertWithWhereUniqueWithoutApproverInput | CreditManagementUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: CreditManagementCreateManyApproverInputEnvelope
    set?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    disconnect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    delete?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    connect?: CreditManagementWhereUniqueInput | CreditManagementWhereUniqueInput[]
    update?: CreditManagementUpdateWithWhereUniqueWithoutApproverInput | CreditManagementUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: CreditManagementUpdateManyWithWhereWithoutApproverInput | CreditManagementUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
  }

  export type BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput> | BlockTicketCreateWithoutRegistrantInput[] | BlockTicketUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutRegistrantInput | BlockTicketCreateOrConnectWithoutRegistrantInput[]
    upsert?: BlockTicketUpsertWithWhereUniqueWithoutRegistrantInput | BlockTicketUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BlockTicketCreateManyRegistrantInputEnvelope
    set?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    disconnect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    delete?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    update?: BlockTicketUpdateWithWhereUniqueWithoutRegistrantInput | BlockTicketUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BlockTicketUpdateManyWithWhereWithoutRegistrantInput | BlockTicketUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
  }

  export type BlockTicketUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput> | BlockTicketCreateWithoutApproverInput[] | BlockTicketUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: BlockTicketCreateOrConnectWithoutApproverInput | BlockTicketCreateOrConnectWithoutApproverInput[]
    upsert?: BlockTicketUpsertWithWhereUniqueWithoutApproverInput | BlockTicketUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: BlockTicketCreateManyApproverInputEnvelope
    set?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    disconnect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    delete?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    connect?: BlockTicketWhereUniqueInput | BlockTicketWhereUniqueInput[]
    update?: BlockTicketUpdateWithWhereUniqueWithoutApproverInput | BlockTicketUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: BlockTicketUpdateManyWithWhereWithoutApproverInput | BlockTicketUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
  }

  export type RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput> | RewardRevokeCreateWithoutRegistrantInput[] | RewardRevokeUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutRegistrantInput | RewardRevokeCreateOrConnectWithoutRegistrantInput[]
    upsert?: RewardRevokeUpsertWithWhereUniqueWithoutRegistrantInput | RewardRevokeUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: RewardRevokeCreateManyRegistrantInputEnvelope
    set?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    disconnect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    delete?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    update?: RewardRevokeUpdateWithWhereUniqueWithoutRegistrantInput | RewardRevokeUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: RewardRevokeUpdateManyWithWhereWithoutRegistrantInput | RewardRevokeUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
  }

  export type RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput> | RewardRevokeCreateWithoutApproverInput[] | RewardRevokeUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: RewardRevokeCreateOrConnectWithoutApproverInput | RewardRevokeCreateOrConnectWithoutApproverInput[]
    upsert?: RewardRevokeUpsertWithWhereUniqueWithoutApproverInput | RewardRevokeUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: RewardRevokeCreateManyApproverInputEnvelope
    set?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    disconnect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    delete?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    connect?: RewardRevokeWhereUniqueInput | RewardRevokeWhereUniqueInput[]
    update?: RewardRevokeUpdateWithWhereUniqueWithoutApproverInput | RewardRevokeUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: RewardRevokeUpdateManyWithWhereWithoutApproverInput | RewardRevokeUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
  }

  export type BoardUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput> | BoardCreateWithoutRegistrantInput[] | BoardUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutRegistrantInput | BoardCreateOrConnectWithoutRegistrantInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutRegistrantInput | BoardUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BoardCreateManyRegistrantInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutRegistrantInput | BoardUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutRegistrantInput | BoardUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput = {
    create?: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput> | BoardCommentCreateWithoutRegistrantInput[] | BoardCommentUncheckedCreateWithoutRegistrantInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutRegistrantInput | BoardCommentCreateOrConnectWithoutRegistrantInput[]
    upsert?: BoardCommentUpsertWithWhereUniqueWithoutRegistrantInput | BoardCommentUpsertWithWhereUniqueWithoutRegistrantInput[]
    createMany?: BoardCommentCreateManyRegistrantInputEnvelope
    set?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    disconnect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    delete?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    update?: BoardCommentUpdateWithWhereUniqueWithoutRegistrantInput | BoardCommentUpdateWithWhereUniqueWithoutRegistrantInput[]
    updateMany?: BoardCommentUpdateManyWithWhereWithoutRegistrantInput | BoardCommentUpdateManyWithWhereWithoutRegistrantInput[]
    deleteMany?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutGroupMailsInput = {
    create?: XOR<UserCreateWithoutGroupMailsInput, UserUncheckedCreateWithoutGroupMailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupMailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutGroupMailsNestedInput = {
    create?: XOR<UserCreateWithoutGroupMailsInput, UserUncheckedCreateWithoutGroupMailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupMailsInput
    upsert?: UserUpsertWithoutGroupMailsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroupMailsInput, UserUpdateWithoutGroupMailsInput>, UserUncheckedUpdateWithoutGroupMailsInput>
  }

  export type UserCreateNestedOneWithoutPersonalMailsInput = {
    create?: XOR<UserCreateWithoutPersonalMailsInput, UserUncheckedCreateWithoutPersonalMailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalMailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutPersonalMailsNestedInput = {
    create?: XOR<UserCreateWithoutPersonalMailsInput, UserUncheckedCreateWithoutPersonalMailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalMailsInput
    upsert?: UserUpsertWithoutPersonalMailsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonalMailsInput, UserUpdateWithoutPersonalMailsInput>, UserUncheckedUpdateWithoutPersonalMailsInput>
  }

  export type UserCreateNestedOneWithoutIpBlocksInput = {
    create?: XOR<UserCreateWithoutIpBlocksInput, UserUncheckedCreateWithoutIpBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutIpBlocksInput
    connect?: UserWhereUniqueInput
  }

  export type EnumIpBlockTypeFieldUpdateOperationsInput = {
    set?: $Enums.IpBlockType
  }

  export type UserUpdateOneWithoutIpBlocksNestedInput = {
    create?: XOR<UserCreateWithoutIpBlocksInput, UserUncheckedCreateWithoutIpBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutIpBlocksInput
    upsert?: UserUpsertWithoutIpBlocksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIpBlocksInput, UserUpdateWithoutIpBlocksInput>, UserUncheckedUpdateWithoutIpBlocksInput>
  }

  export type UserCreateNestedOneWithoutAccountBlocksInput = {
    create?: XOR<UserCreateWithoutAccountBlocksInput, UserUncheckedCreateWithoutAccountBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountBlocksInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAccountBlockTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountBlockType
  }

  export type UserUpdateOneWithoutAccountBlocksNestedInput = {
    create?: XOR<UserCreateWithoutAccountBlocksInput, UserUncheckedCreateWithoutAccountBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountBlocksInput
    upsert?: UserUpsertWithoutAccountBlocksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountBlocksInput, UserUpdateWithoutAccountBlocksInput>, UserUncheckedUpdateWithoutAccountBlocksInput>
  }

  export type CouponCreateNestedManyWithoutCouponGroupInput = {
    create?: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput> | CouponCreateWithoutCouponGroupInput[] | CouponUncheckedCreateWithoutCouponGroupInput[]
    connectOrCreate?: CouponCreateOrConnectWithoutCouponGroupInput | CouponCreateOrConnectWithoutCouponGroupInput[]
    createMany?: CouponCreateManyCouponGroupInputEnvelope
    connect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
  }

  export type CouponUncheckedCreateNestedManyWithoutCouponGroupInput = {
    create?: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput> | CouponCreateWithoutCouponGroupInput[] | CouponUncheckedCreateWithoutCouponGroupInput[]
    connectOrCreate?: CouponCreateOrConnectWithoutCouponGroupInput | CouponCreateOrConnectWithoutCouponGroupInput[]
    createMany?: CouponCreateManyCouponGroupInputEnvelope
    connect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
  }

  export type EnumCouponGroupTypeFieldUpdateOperationsInput = {
    set?: $Enums.CouponGroupType
  }

  export type EnumCouponGroupStatusFieldUpdateOperationsInput = {
    set?: $Enums.CouponGroupStatus
  }

  export type CouponUpdateManyWithoutCouponGroupNestedInput = {
    create?: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput> | CouponCreateWithoutCouponGroupInput[] | CouponUncheckedCreateWithoutCouponGroupInput[]
    connectOrCreate?: CouponCreateOrConnectWithoutCouponGroupInput | CouponCreateOrConnectWithoutCouponGroupInput[]
    upsert?: CouponUpsertWithWhereUniqueWithoutCouponGroupInput | CouponUpsertWithWhereUniqueWithoutCouponGroupInput[]
    createMany?: CouponCreateManyCouponGroupInputEnvelope
    set?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    disconnect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    delete?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    connect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    update?: CouponUpdateWithWhereUniqueWithoutCouponGroupInput | CouponUpdateWithWhereUniqueWithoutCouponGroupInput[]
    updateMany?: CouponUpdateManyWithWhereWithoutCouponGroupInput | CouponUpdateManyWithWhereWithoutCouponGroupInput[]
    deleteMany?: CouponScalarWhereInput | CouponScalarWhereInput[]
  }

  export type CouponUncheckedUpdateManyWithoutCouponGroupNestedInput = {
    create?: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput> | CouponCreateWithoutCouponGroupInput[] | CouponUncheckedCreateWithoutCouponGroupInput[]
    connectOrCreate?: CouponCreateOrConnectWithoutCouponGroupInput | CouponCreateOrConnectWithoutCouponGroupInput[]
    upsert?: CouponUpsertWithWhereUniqueWithoutCouponGroupInput | CouponUpsertWithWhereUniqueWithoutCouponGroupInput[]
    createMany?: CouponCreateManyCouponGroupInputEnvelope
    set?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    disconnect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    delete?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    connect?: CouponWhereUniqueInput | CouponWhereUniqueInput[]
    update?: CouponUpdateWithWhereUniqueWithoutCouponGroupInput | CouponUpdateWithWhereUniqueWithoutCouponGroupInput[]
    updateMany?: CouponUpdateManyWithWhereWithoutCouponGroupInput | CouponUpdateManyWithWhereWithoutCouponGroupInput[]
    deleteMany?: CouponScalarWhereInput | CouponScalarWhereInput[]
  }

  export type CouponGroupCreateNestedOneWithoutCouponsInput = {
    create?: XOR<CouponGroupCreateWithoutCouponsInput, CouponGroupUncheckedCreateWithoutCouponsInput>
    connectOrCreate?: CouponGroupCreateOrConnectWithoutCouponsInput
    connect?: CouponGroupWhereUniqueInput
  }

  export type CouponLogCreateNestedManyWithoutCouponInput = {
    create?: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput> | CouponLogCreateWithoutCouponInput[] | CouponLogUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: CouponLogCreateOrConnectWithoutCouponInput | CouponLogCreateOrConnectWithoutCouponInput[]
    createMany?: CouponLogCreateManyCouponInputEnvelope
    connect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
  }

  export type CouponLogUncheckedCreateNestedManyWithoutCouponInput = {
    create?: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput> | CouponLogCreateWithoutCouponInput[] | CouponLogUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: CouponLogCreateOrConnectWithoutCouponInput | CouponLogCreateOrConnectWithoutCouponInput[]
    createMany?: CouponLogCreateManyCouponInputEnvelope
    connect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
  }

  export type CouponGroupUpdateOneWithoutCouponsNestedInput = {
    create?: XOR<CouponGroupCreateWithoutCouponsInput, CouponGroupUncheckedCreateWithoutCouponsInput>
    connectOrCreate?: CouponGroupCreateOrConnectWithoutCouponsInput
    upsert?: CouponGroupUpsertWithoutCouponsInput
    disconnect?: CouponGroupWhereInput | boolean
    delete?: CouponGroupWhereInput | boolean
    connect?: CouponGroupWhereUniqueInput
    update?: XOR<XOR<CouponGroupUpdateToOneWithWhereWithoutCouponsInput, CouponGroupUpdateWithoutCouponsInput>, CouponGroupUncheckedUpdateWithoutCouponsInput>
  }

  export type CouponLogUpdateManyWithoutCouponNestedInput = {
    create?: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput> | CouponLogCreateWithoutCouponInput[] | CouponLogUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: CouponLogCreateOrConnectWithoutCouponInput | CouponLogCreateOrConnectWithoutCouponInput[]
    upsert?: CouponLogUpsertWithWhereUniqueWithoutCouponInput | CouponLogUpsertWithWhereUniqueWithoutCouponInput[]
    createMany?: CouponLogCreateManyCouponInputEnvelope
    set?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    disconnect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    delete?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    connect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    update?: CouponLogUpdateWithWhereUniqueWithoutCouponInput | CouponLogUpdateWithWhereUniqueWithoutCouponInput[]
    updateMany?: CouponLogUpdateManyWithWhereWithoutCouponInput | CouponLogUpdateManyWithWhereWithoutCouponInput[]
    deleteMany?: CouponLogScalarWhereInput | CouponLogScalarWhereInput[]
  }

  export type CouponLogUncheckedUpdateManyWithoutCouponNestedInput = {
    create?: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput> | CouponLogCreateWithoutCouponInput[] | CouponLogUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: CouponLogCreateOrConnectWithoutCouponInput | CouponLogCreateOrConnectWithoutCouponInput[]
    upsert?: CouponLogUpsertWithWhereUniqueWithoutCouponInput | CouponLogUpsertWithWhereUniqueWithoutCouponInput[]
    createMany?: CouponLogCreateManyCouponInputEnvelope
    set?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    disconnect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    delete?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    connect?: CouponLogWhereUniqueInput | CouponLogWhereUniqueInput[]
    update?: CouponLogUpdateWithWhereUniqueWithoutCouponInput | CouponLogUpdateWithWhereUniqueWithoutCouponInput[]
    updateMany?: CouponLogUpdateManyWithWhereWithoutCouponInput | CouponLogUpdateManyWithWhereWithoutCouponInput[]
    deleteMany?: CouponLogScalarWhereInput | CouponLogScalarWhereInput[]
  }

  export type CouponCreateNestedOneWithoutCouponLogsInput = {
    create?: XOR<CouponCreateWithoutCouponLogsInput, CouponUncheckedCreateWithoutCouponLogsInput>
    connectOrCreate?: CouponCreateOrConnectWithoutCouponLogsInput
    connect?: CouponWhereUniqueInput
  }

  export type CouponUpdateOneWithoutCouponLogsNestedInput = {
    create?: XOR<CouponCreateWithoutCouponLogsInput, CouponUncheckedCreateWithoutCouponLogsInput>
    connectOrCreate?: CouponCreateOrConnectWithoutCouponLogsInput
    upsert?: CouponUpsertWithoutCouponLogsInput
    disconnect?: CouponWhereInput | boolean
    delete?: CouponWhereInput | boolean
    connect?: CouponWhereUniqueInput
    update?: XOR<XOR<CouponUpdateToOneWithWhereWithoutCouponLogsInput, CouponUpdateWithoutCouponLogsInput>, CouponUncheckedUpdateWithoutCouponLogsInput>
  }

  export type UserCreateNestedOneWithoutRegisteredItemQuantitiesInput = {
    create?: XOR<UserCreateWithoutRegisteredItemQuantitiesInput, UserUncheckedCreateWithoutRegisteredItemQuantitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredItemQuantitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedItemQuantitiesInput = {
    create?: XOR<UserCreateWithoutApprovedItemQuantitiesInput, UserUncheckedCreateWithoutApprovedItemQuantitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedItemQuantitiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ActionType
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneWithoutRegisteredItemQuantitiesNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredItemQuantitiesInput, UserUncheckedCreateWithoutRegisteredItemQuantitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredItemQuantitiesInput
    upsert?: UserUpsertWithoutRegisteredItemQuantitiesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredItemQuantitiesInput, UserUpdateWithoutRegisteredItemQuantitiesInput>, UserUncheckedUpdateWithoutRegisteredItemQuantitiesInput>
  }

  export type UserUpdateOneWithoutApprovedItemQuantitiesNestedInput = {
    create?: XOR<UserCreateWithoutApprovedItemQuantitiesInput, UserUncheckedCreateWithoutApprovedItemQuantitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedItemQuantitiesInput
    upsert?: UserUpsertWithoutApprovedItemQuantitiesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedItemQuantitiesInput, UserUpdateWithoutApprovedItemQuantitiesInput>, UserUncheckedUpdateWithoutApprovedItemQuantitiesInput>
  }

  export type UserCreateNestedOneWithoutRegisteredRewardRevokesInput = {
    create?: XOR<UserCreateWithoutRegisteredRewardRevokesInput, UserUncheckedCreateWithoutRegisteredRewardRevokesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredRewardRevokesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedRewardRevokesInput = {
    create?: XOR<UserCreateWithoutApprovedRewardRevokesInput, UserUncheckedCreateWithoutApprovedRewardRevokesInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedRewardRevokesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRewardRevokeCreditTypeFieldUpdateOperationsInput = {
    set?: $Enums.RewardRevokeCreditType
  }

  export type UserUpdateOneWithoutRegisteredRewardRevokesNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredRewardRevokesInput, UserUncheckedCreateWithoutRegisteredRewardRevokesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredRewardRevokesInput
    upsert?: UserUpsertWithoutRegisteredRewardRevokesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredRewardRevokesInput, UserUpdateWithoutRegisteredRewardRevokesInput>, UserUncheckedUpdateWithoutRegisteredRewardRevokesInput>
  }

  export type UserUpdateOneWithoutApprovedRewardRevokesNestedInput = {
    create?: XOR<UserCreateWithoutApprovedRewardRevokesInput, UserUncheckedCreateWithoutApprovedRewardRevokesInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedRewardRevokesInput
    upsert?: UserUpsertWithoutApprovedRewardRevokesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedRewardRevokesInput, UserUpdateWithoutApprovedRewardRevokesInput>, UserUncheckedUpdateWithoutApprovedRewardRevokesInput>
  }

  export type UserCreateNestedOneWithoutRegisteredCreditManagementsInput = {
    create?: XOR<UserCreateWithoutRegisteredCreditManagementsInput, UserUncheckedCreateWithoutRegisteredCreditManagementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredCreditManagementsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedCreditManagementsInput = {
    create?: XOR<UserCreateWithoutApprovedCreditManagementsInput, UserUncheckedCreateWithoutApprovedCreditManagementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedCreditManagementsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCreditTypeFieldUpdateOperationsInput = {
    set?: $Enums.CreditType
  }

  export type UserUpdateOneWithoutRegisteredCreditManagementsNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredCreditManagementsInput, UserUncheckedCreateWithoutRegisteredCreditManagementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredCreditManagementsInput
    upsert?: UserUpsertWithoutRegisteredCreditManagementsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredCreditManagementsInput, UserUpdateWithoutRegisteredCreditManagementsInput>, UserUncheckedUpdateWithoutRegisteredCreditManagementsInput>
  }

  export type UserUpdateOneWithoutApprovedCreditManagementsNestedInput = {
    create?: XOR<UserCreateWithoutApprovedCreditManagementsInput, UserUncheckedCreateWithoutApprovedCreditManagementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedCreditManagementsInput
    upsert?: UserUpsertWithoutApprovedCreditManagementsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedCreditManagementsInput, UserUpdateWithoutApprovedCreditManagementsInput>, UserUncheckedUpdateWithoutApprovedCreditManagementsInput>
  }

  export type UserCreateNestedOneWithoutRegisteredBlockTicketsInput = {
    create?: XOR<UserCreateWithoutRegisteredBlockTicketsInput, UserUncheckedCreateWithoutRegisteredBlockTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredBlockTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedBlockTicketsInput = {
    create?: XOR<UserCreateWithoutApprovedBlockTicketsInput, UserUncheckedCreateWithoutApprovedBlockTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedBlockTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutRegisteredBlockTicketsNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredBlockTicketsInput, UserUncheckedCreateWithoutRegisteredBlockTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredBlockTicketsInput
    upsert?: UserUpsertWithoutRegisteredBlockTicketsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredBlockTicketsInput, UserUpdateWithoutRegisteredBlockTicketsInput>, UserUncheckedUpdateWithoutRegisteredBlockTicketsInput>
  }

  export type UserUpdateOneWithoutApprovedBlockTicketsNestedInput = {
    create?: XOR<UserCreateWithoutApprovedBlockTicketsInput, UserUncheckedCreateWithoutApprovedBlockTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedBlockTicketsInput
    upsert?: UserUpsertWithoutApprovedBlockTicketsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedBlockTicketsInput, UserUpdateWithoutApprovedBlockTicketsInput>, UserUncheckedUpdateWithoutApprovedBlockTicketsInput>
  }

  export type UserCreateNestedOneWithoutBoardsInput = {
    create?: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardsInput
    connect?: UserWhereUniqueInput
  }

  export type BoardCommentCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput> | BoardCommentCreateWithoutBoardInput[] | BoardCommentUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutBoardInput | BoardCommentCreateOrConnectWithoutBoardInput[]
    createMany?: BoardCommentCreateManyBoardInputEnvelope
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
  }

  export type BoardCommentUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput> | BoardCommentCreateWithoutBoardInput[] | BoardCommentUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutBoardInput | BoardCommentCreateOrConnectWithoutBoardInput[]
    createMany?: BoardCommentCreateManyBoardInputEnvelope
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutBoardsNestedInput = {
    create?: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardsInput
    upsert?: UserUpsertWithoutBoardsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardsInput, UserUpdateWithoutBoardsInput>, UserUncheckedUpdateWithoutBoardsInput>
  }

  export type BoardCommentUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput> | BoardCommentCreateWithoutBoardInput[] | BoardCommentUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutBoardInput | BoardCommentCreateOrConnectWithoutBoardInput[]
    upsert?: BoardCommentUpsertWithWhereUniqueWithoutBoardInput | BoardCommentUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardCommentCreateManyBoardInputEnvelope
    set?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    disconnect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    delete?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    update?: BoardCommentUpdateWithWhereUniqueWithoutBoardInput | BoardCommentUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardCommentUpdateManyWithWhereWithoutBoardInput | BoardCommentUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
  }

  export type BoardCommentUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput> | BoardCommentCreateWithoutBoardInput[] | BoardCommentUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardCommentCreateOrConnectWithoutBoardInput | BoardCommentCreateOrConnectWithoutBoardInput[]
    upsert?: BoardCommentUpsertWithWhereUniqueWithoutBoardInput | BoardCommentUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardCommentCreateManyBoardInputEnvelope
    set?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    disconnect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    delete?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    connect?: BoardCommentWhereUniqueInput | BoardCommentWhereUniqueInput[]
    update?: BoardCommentUpdateWithWhereUniqueWithoutBoardInput | BoardCommentUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardCommentUpdateManyWithWhereWithoutBoardInput | BoardCommentUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
  }

  export type BoardCreateNestedOneWithoutCommentsInput = {
    create?: XOR<BoardCreateWithoutCommentsInput, BoardUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutCommentsInput
    connect?: BoardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBoardCommentsInput = {
    create?: XOR<UserCreateWithoutBoardCommentsInput, UserUncheckedCreateWithoutBoardCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type BoardUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<BoardCreateWithoutCommentsInput, BoardUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutCommentsInput
    upsert?: BoardUpsertWithoutCommentsInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutCommentsInput, BoardUpdateWithoutCommentsInput>, BoardUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutBoardCommentsNestedInput = {
    create?: XOR<UserCreateWithoutBoardCommentsInput, UserUncheckedCreateWithoutBoardCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardCommentsInput
    upsert?: UserUpsertWithoutBoardCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardCommentsInput, UserUpdateWithoutBoardCommentsInput>, UserUncheckedUpdateWithoutBoardCommentsInput>
  }

  export type UserCreateNestedOneWithoutAccountUsingQuerylogsInput = {
    create?: XOR<UserCreateWithoutAccountUsingQuerylogsInput, UserUncheckedCreateWithoutAccountUsingQuerylogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountUsingQuerylogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountUsingQuerylogsNestedInput = {
    create?: XOR<UserCreateWithoutAccountUsingQuerylogsInput, UserUncheckedCreateWithoutAccountUsingQuerylogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountUsingQuerylogsInput
    upsert?: UserUpsertWithoutAccountUsingQuerylogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountUsingQuerylogsInput, UserUpdateWithoutAccountUsingQuerylogsInput>, UserUncheckedUpdateWithoutAccountUsingQuerylogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumIpBlockTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IpBlockType | EnumIpBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIpBlockTypeFilter<$PrismaModel> | $Enums.IpBlockType
  }

  export type NestedEnumIpBlockTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IpBlockType | EnumIpBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IpBlockType[] | ListEnumIpBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIpBlockTypeWithAggregatesFilter<$PrismaModel> | $Enums.IpBlockType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIpBlockTypeFilter<$PrismaModel>
    _max?: NestedEnumIpBlockTypeFilter<$PrismaModel>
  }

  export type NestedEnumAccountBlockTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountBlockType | EnumAccountBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountBlockTypeFilter<$PrismaModel> | $Enums.AccountBlockType
  }

  export type NestedEnumAccountBlockTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountBlockType | EnumAccountBlockTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountBlockType[] | ListEnumAccountBlockTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountBlockTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountBlockType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountBlockTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountBlockTypeFilter<$PrismaModel>
  }

  export type NestedEnumCouponGroupTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupType | EnumCouponGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupTypeFilter<$PrismaModel> | $Enums.CouponGroupType
  }

  export type NestedEnumCouponGroupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupStatus | EnumCouponGroupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupStatusFilter<$PrismaModel> | $Enums.CouponGroupStatus
  }

  export type NestedEnumCouponGroupTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupType | EnumCouponGroupTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupType[] | ListEnumCouponGroupTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupTypeWithAggregatesFilter<$PrismaModel> | $Enums.CouponGroupType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCouponGroupTypeFilter<$PrismaModel>
    _max?: NestedEnumCouponGroupTypeFilter<$PrismaModel>
  }

  export type NestedEnumCouponGroupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CouponGroupStatus | EnumCouponGroupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CouponGroupStatus[] | ListEnumCouponGroupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCouponGroupStatusWithAggregatesFilter<$PrismaModel> | $Enums.CouponGroupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCouponGroupStatusFilter<$PrismaModel>
    _max?: NestedEnumCouponGroupStatusFilter<$PrismaModel>
  }

  export type NestedEnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardRevokeCreditType | EnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel> | $Enums.RewardRevokeCreditType
  }

  export type NestedEnumRewardRevokeCreditTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardRevokeCreditType | EnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardRevokeCreditType[] | ListEnumRewardRevokeCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardRevokeCreditTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardRevokeCreditType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardRevokeCreditTypeFilter<$PrismaModel>
  }

  export type NestedEnumCreditTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CreditType | EnumCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCreditTypeFilter<$PrismaModel> | $Enums.CreditType
  }

  export type NestedEnumCreditTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CreditType | EnumCreditTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreditType[] | ListEnumCreditTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCreditTypeWithAggregatesFilter<$PrismaModel> | $Enums.CreditType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCreditTypeFilter<$PrismaModel>
    _max?: NestedEnumCreditTypeFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUsingQuerylogCreateWithoutRegistrantInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUsingQuerylogCreateOrConnectWithoutRegistrantInput = {
    where: AccountUsingQuerylogWhereUniqueInput
    create: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput>
  }

  export type AccountUsingQuerylogCreateManyRegistrantInputEnvelope = {
    data: AccountUsingQuerylogCreateManyRegistrantInput | AccountUsingQuerylogCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type GroupMailCreateWithoutUserInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupMailUncheckedCreateWithoutUserInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupMailCreateOrConnectWithoutUserInput = {
    where: GroupMailWhereUniqueInput
    create: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput>
  }

  export type GroupMailCreateManyUserInputEnvelope = {
    data: GroupMailCreateManyUserInput | GroupMailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PersonalMailCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalMailUncheckedCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalMailCreateOrConnectWithoutRegistrantInput = {
    where: PersonalMailWhereUniqueInput
    create: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput>
  }

  export type PersonalMailCreateManyRegistrantInputEnvelope = {
    data: PersonalMailCreateManyRegistrantInput | PersonalMailCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type IpBlockCreateWithoutRegistrantInput = {
    id?: string
    ip: string
    reason: string
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpBlockUncheckedCreateWithoutRegistrantInput = {
    id?: string
    ip: string
    reason: string
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpBlockCreateOrConnectWithoutRegistrantInput = {
    where: IpBlockWhereUniqueInput
    create: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput>
  }

  export type IpBlockCreateManyRegistrantInputEnvelope = {
    data: IpBlockCreateManyRegistrantInput | IpBlockCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type AccountBlockCreateWithoutRegistrantInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountBlockUncheckedCreateWithoutRegistrantInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountBlockCreateOrConnectWithoutRegistrantInput = {
    where: AccountBlockWhereUniqueInput
    create: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput>
  }

  export type AccountBlockCreateManyRegistrantInputEnvelope = {
    data: AccountBlockCreateManyRegistrantInput | AccountBlockCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type ItemQuantityCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approver?: UserCreateNestedOneWithoutApprovedItemQuantitiesInput
  }

  export type ItemQuantityUncheckedCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityCreateOrConnectWithoutRegistrantInput = {
    where: ItemQuantityWhereUniqueInput
    create: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput>
  }

  export type ItemQuantityCreateManyRegistrantInputEnvelope = {
    data: ItemQuantityCreateManyRegistrantInput | ItemQuantityCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type ItemQuantityCreateWithoutApproverInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredItemQuantitiesInput
  }

  export type ItemQuantityUncheckedCreateWithoutApproverInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityCreateOrConnectWithoutApproverInput = {
    where: ItemQuantityWhereUniqueInput
    create: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput>
  }

  export type ItemQuantityCreateManyApproverInputEnvelope = {
    data: ItemQuantityCreateManyApproverInput | ItemQuantityCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type CreditManagementCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approver?: UserCreateNestedOneWithoutApprovedCreditManagementsInput
  }

  export type CreditManagementUncheckedCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementCreateOrConnectWithoutRegistrantInput = {
    where: CreditManagementWhereUniqueInput
    create: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput>
  }

  export type CreditManagementCreateManyRegistrantInputEnvelope = {
    data: CreditManagementCreateManyRegistrantInput | CreditManagementCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type CreditManagementCreateWithoutApproverInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredCreditManagementsInput
  }

  export type CreditManagementUncheckedCreateWithoutApproverInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementCreateOrConnectWithoutApproverInput = {
    where: CreditManagementWhereUniqueInput
    create: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput>
  }

  export type CreditManagementCreateManyApproverInputEnvelope = {
    data: CreditManagementCreateManyApproverInput | CreditManagementCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type BlockTicketCreateWithoutRegistrantInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approver?: UserCreateNestedOneWithoutApprovedBlockTicketsInput
  }

  export type BlockTicketUncheckedCreateWithoutRegistrantInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketCreateOrConnectWithoutRegistrantInput = {
    where: BlockTicketWhereUniqueInput
    create: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput>
  }

  export type BlockTicketCreateManyRegistrantInputEnvelope = {
    data: BlockTicketCreateManyRegistrantInput | BlockTicketCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type BlockTicketCreateWithoutApproverInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredBlockTicketsInput
  }

  export type BlockTicketUncheckedCreateWithoutApproverInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketCreateOrConnectWithoutApproverInput = {
    where: BlockTicketWhereUniqueInput
    create: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput>
  }

  export type BlockTicketCreateManyApproverInputEnvelope = {
    data: BlockTicketCreateManyApproverInput | BlockTicketCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type RewardRevokeCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approver?: UserCreateNestedOneWithoutApprovedRewardRevokesInput
  }

  export type RewardRevokeUncheckedCreateWithoutRegistrantInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeCreateOrConnectWithoutRegistrantInput = {
    where: RewardRevokeWhereUniqueInput
    create: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput>
  }

  export type RewardRevokeCreateManyRegistrantInputEnvelope = {
    data: RewardRevokeCreateManyRegistrantInput | RewardRevokeCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type RewardRevokeCreateWithoutApproverInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutRegisteredRewardRevokesInput
  }

  export type RewardRevokeUncheckedCreateWithoutApproverInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeCreateOrConnectWithoutApproverInput = {
    where: RewardRevokeWhereUniqueInput
    create: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput>
  }

  export type RewardRevokeCreateManyApproverInputEnvelope = {
    data: RewardRevokeCreateManyApproverInput | RewardRevokeCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type BoardCreateWithoutRegistrantInput = {
    id?: string
    title: string
    content: string
    views?: number
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: BoardCommentCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutRegistrantInput = {
    id?: string
    title: string
    content: string
    views?: number
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: BoardCommentUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutRegistrantInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput>
  }

  export type BoardCreateManyRegistrantInputEnvelope = {
    data: BoardCreateManyRegistrantInput | BoardCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type BoardCommentCreateWithoutRegistrantInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    board: BoardCreateNestedOneWithoutCommentsInput
  }

  export type BoardCommentUncheckedCreateWithoutRegistrantInput = {
    id?: string
    content: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentCreateOrConnectWithoutRegistrantInput = {
    where: BoardCommentWhereUniqueInput
    create: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput>
  }

  export type BoardCommentCreateManyRegistrantInputEnvelope = {
    data: BoardCommentCreateManyRegistrantInput | BoardCommentCreateManyRegistrantInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type AccountUsingQuerylogUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: AccountUsingQuerylogWhereUniqueInput
    update: XOR<AccountUsingQuerylogUpdateWithoutRegistrantInput, AccountUsingQuerylogUncheckedUpdateWithoutRegistrantInput>
    create: XOR<AccountUsingQuerylogCreateWithoutRegistrantInput, AccountUsingQuerylogUncheckedCreateWithoutRegistrantInput>
  }

  export type AccountUsingQuerylogUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: AccountUsingQuerylogWhereUniqueInput
    data: XOR<AccountUsingQuerylogUpdateWithoutRegistrantInput, AccountUsingQuerylogUncheckedUpdateWithoutRegistrantInput>
  }

  export type AccountUsingQuerylogUpdateManyWithWhereWithoutRegistrantInput = {
    where: AccountUsingQuerylogScalarWhereInput
    data: XOR<AccountUsingQuerylogUpdateManyMutationInput, AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type AccountUsingQuerylogScalarWhereInput = {
    AND?: AccountUsingQuerylogScalarWhereInput | AccountUsingQuerylogScalarWhereInput[]
    OR?: AccountUsingQuerylogScalarWhereInput[]
    NOT?: AccountUsingQuerylogScalarWhereInput | AccountUsingQuerylogScalarWhereInput[]
    id?: StringFilter<"AccountUsingQuerylog"> | string
    content?: StringFilter<"AccountUsingQuerylog"> | string
    registrantId?: StringNullableFilter<"AccountUsingQuerylog"> | string | null
    createdAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
    updatedAt?: DateTimeFilter<"AccountUsingQuerylog"> | Date | string
  }

  export type GroupMailUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupMailWhereUniqueInput
    update: XOR<GroupMailUpdateWithoutUserInput, GroupMailUncheckedUpdateWithoutUserInput>
    create: XOR<GroupMailCreateWithoutUserInput, GroupMailUncheckedCreateWithoutUserInput>
  }

  export type GroupMailUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupMailWhereUniqueInput
    data: XOR<GroupMailUpdateWithoutUserInput, GroupMailUncheckedUpdateWithoutUserInput>
  }

  export type GroupMailUpdateManyWithWhereWithoutUserInput = {
    where: GroupMailScalarWhereInput
    data: XOR<GroupMailUpdateManyMutationInput, GroupMailUncheckedUpdateManyWithoutUserInput>
  }

  export type GroupMailScalarWhereInput = {
    AND?: GroupMailScalarWhereInput | GroupMailScalarWhereInput[]
    OR?: GroupMailScalarWhereInput[]
    NOT?: GroupMailScalarWhereInput | GroupMailScalarWhereInput[]
    id?: StringFilter<"GroupMail"> | string
    reason?: StringFilter<"GroupMail"> | string
    content?: StringFilter<"GroupMail"> | string
    reward?: JsonFilter<"GroupMail">
    startDate?: DateTimeFilter<"GroupMail"> | Date | string
    endDate?: DateTimeFilter<"GroupMail"> | Date | string
    userId?: StringNullableFilter<"GroupMail"> | string | null
    createdAt?: DateTimeFilter<"GroupMail"> | Date | string
    updatedAt?: DateTimeFilter<"GroupMail"> | Date | string
  }

  export type PersonalMailUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: PersonalMailWhereUniqueInput
    update: XOR<PersonalMailUpdateWithoutRegistrantInput, PersonalMailUncheckedUpdateWithoutRegistrantInput>
    create: XOR<PersonalMailCreateWithoutRegistrantInput, PersonalMailUncheckedCreateWithoutRegistrantInput>
  }

  export type PersonalMailUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: PersonalMailWhereUniqueInput
    data: XOR<PersonalMailUpdateWithoutRegistrantInput, PersonalMailUncheckedUpdateWithoutRegistrantInput>
  }

  export type PersonalMailUpdateManyWithWhereWithoutRegistrantInput = {
    where: PersonalMailScalarWhereInput
    data: XOR<PersonalMailUpdateManyMutationInput, PersonalMailUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type PersonalMailScalarWhereInput = {
    AND?: PersonalMailScalarWhereInput | PersonalMailScalarWhereInput[]
    OR?: PersonalMailScalarWhereInput[]
    NOT?: PersonalMailScalarWhereInput | PersonalMailScalarWhereInput[]
    id?: StringFilter<"PersonalMail"> | string
    userId?: IntFilter<"PersonalMail"> | number
    reason?: StringFilter<"PersonalMail"> | string
    content?: StringFilter<"PersonalMail"> | string
    reward?: JsonFilter<"PersonalMail">
    startDate?: DateTimeFilter<"PersonalMail"> | Date | string
    endDate?: DateTimeFilter<"PersonalMail"> | Date | string
    registrantId?: StringNullableFilter<"PersonalMail"> | string | null
    createdAt?: DateTimeFilter<"PersonalMail"> | Date | string
    updatedAt?: DateTimeFilter<"PersonalMail"> | Date | string
  }

  export type IpBlockUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: IpBlockWhereUniqueInput
    update: XOR<IpBlockUpdateWithoutRegistrantInput, IpBlockUncheckedUpdateWithoutRegistrantInput>
    create: XOR<IpBlockCreateWithoutRegistrantInput, IpBlockUncheckedCreateWithoutRegistrantInput>
  }

  export type IpBlockUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: IpBlockWhereUniqueInput
    data: XOR<IpBlockUpdateWithoutRegistrantInput, IpBlockUncheckedUpdateWithoutRegistrantInput>
  }

  export type IpBlockUpdateManyWithWhereWithoutRegistrantInput = {
    where: IpBlockScalarWhereInput
    data: XOR<IpBlockUpdateManyMutationInput, IpBlockUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type IpBlockScalarWhereInput = {
    AND?: IpBlockScalarWhereInput | IpBlockScalarWhereInput[]
    OR?: IpBlockScalarWhereInput[]
    NOT?: IpBlockScalarWhereInput | IpBlockScalarWhereInput[]
    id?: StringFilter<"IpBlock"> | string
    ip?: StringFilter<"IpBlock"> | string
    reason?: StringFilter<"IpBlock"> | string
    registrantId?: StringNullableFilter<"IpBlock"> | string | null
    type?: EnumIpBlockTypeFilter<"IpBlock"> | $Enums.IpBlockType
    createdAt?: DateTimeFilter<"IpBlock"> | Date | string
    updatedAt?: DateTimeFilter<"IpBlock"> | Date | string
  }

  export type AccountBlockUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: AccountBlockWhereUniqueInput
    update: XOR<AccountBlockUpdateWithoutRegistrantInput, AccountBlockUncheckedUpdateWithoutRegistrantInput>
    create: XOR<AccountBlockCreateWithoutRegistrantInput, AccountBlockUncheckedCreateWithoutRegistrantInput>
  }

  export type AccountBlockUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: AccountBlockWhereUniqueInput
    data: XOR<AccountBlockUpdateWithoutRegistrantInput, AccountBlockUncheckedUpdateWithoutRegistrantInput>
  }

  export type AccountBlockUpdateManyWithWhereWithoutRegistrantInput = {
    where: AccountBlockScalarWhereInput
    data: XOR<AccountBlockUpdateManyMutationInput, AccountBlockUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type AccountBlockScalarWhereInput = {
    AND?: AccountBlockScalarWhereInput | AccountBlockScalarWhereInput[]
    OR?: AccountBlockScalarWhereInput[]
    NOT?: AccountBlockScalarWhereInput | AccountBlockScalarWhereInput[]
    id?: StringFilter<"AccountBlock"> | string
    reason?: StringFilter<"AccountBlock"> | string
    userId?: IntFilter<"AccountBlock"> | number
    type?: EnumAccountBlockTypeFilter<"AccountBlock"> | $Enums.AccountBlockType
    blockDuration?: IntNullableFilter<"AccountBlock"> | number | null
    isPermanent?: BoolFilter<"AccountBlock"> | boolean
    registrantId?: StringNullableFilter<"AccountBlock"> | string | null
    createdAt?: DateTimeFilter<"AccountBlock"> | Date | string
    updatedAt?: DateTimeFilter<"AccountBlock"> | Date | string
  }

  export type ItemQuantityUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: ItemQuantityWhereUniqueInput
    update: XOR<ItemQuantityUpdateWithoutRegistrantInput, ItemQuantityUncheckedUpdateWithoutRegistrantInput>
    create: XOR<ItemQuantityCreateWithoutRegistrantInput, ItemQuantityUncheckedCreateWithoutRegistrantInput>
  }

  export type ItemQuantityUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: ItemQuantityWhereUniqueInput
    data: XOR<ItemQuantityUpdateWithoutRegistrantInput, ItemQuantityUncheckedUpdateWithoutRegistrantInput>
  }

  export type ItemQuantityUpdateManyWithWhereWithoutRegistrantInput = {
    where: ItemQuantityScalarWhereInput
    data: XOR<ItemQuantityUpdateManyMutationInput, ItemQuantityUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type ItemQuantityScalarWhereInput = {
    AND?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
    OR?: ItemQuantityScalarWhereInput[]
    NOT?: ItemQuantityScalarWhereInput | ItemQuantityScalarWhereInput[]
    id?: StringFilter<"ItemQuantity"> | string
    userId?: IntFilter<"ItemQuantity"> | number
    itemId?: StringFilter<"ItemQuantity"> | string
    itemName?: StringFilter<"ItemQuantity"> | string
    amount?: IntFilter<"ItemQuantity"> | number
    type?: EnumActionTypeFilter<"ItemQuantity"> | $Enums.ActionType
    status?: EnumStatusFilter<"ItemQuantity"> | $Enums.Status
    registrantId?: StringNullableFilter<"ItemQuantity"> | string | null
    approverId?: StringNullableFilter<"ItemQuantity"> | string | null
    isApproved?: BoolFilter<"ItemQuantity"> | boolean
    approvedAt?: DateTimeNullableFilter<"ItemQuantity"> | Date | string | null
    createdAt?: DateTimeFilter<"ItemQuantity"> | Date | string
    updatedAt?: DateTimeFilter<"ItemQuantity"> | Date | string
  }

  export type ItemQuantityUpsertWithWhereUniqueWithoutApproverInput = {
    where: ItemQuantityWhereUniqueInput
    update: XOR<ItemQuantityUpdateWithoutApproverInput, ItemQuantityUncheckedUpdateWithoutApproverInput>
    create: XOR<ItemQuantityCreateWithoutApproverInput, ItemQuantityUncheckedCreateWithoutApproverInput>
  }

  export type ItemQuantityUpdateWithWhereUniqueWithoutApproverInput = {
    where: ItemQuantityWhereUniqueInput
    data: XOR<ItemQuantityUpdateWithoutApproverInput, ItemQuantityUncheckedUpdateWithoutApproverInput>
  }

  export type ItemQuantityUpdateManyWithWhereWithoutApproverInput = {
    where: ItemQuantityScalarWhereInput
    data: XOR<ItemQuantityUpdateManyMutationInput, ItemQuantityUncheckedUpdateManyWithoutApproverInput>
  }

  export type CreditManagementUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: CreditManagementWhereUniqueInput
    update: XOR<CreditManagementUpdateWithoutRegistrantInput, CreditManagementUncheckedUpdateWithoutRegistrantInput>
    create: XOR<CreditManagementCreateWithoutRegistrantInput, CreditManagementUncheckedCreateWithoutRegistrantInput>
  }

  export type CreditManagementUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: CreditManagementWhereUniqueInput
    data: XOR<CreditManagementUpdateWithoutRegistrantInput, CreditManagementUncheckedUpdateWithoutRegistrantInput>
  }

  export type CreditManagementUpdateManyWithWhereWithoutRegistrantInput = {
    where: CreditManagementScalarWhereInput
    data: XOR<CreditManagementUpdateManyMutationInput, CreditManagementUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type CreditManagementScalarWhereInput = {
    AND?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
    OR?: CreditManagementScalarWhereInput[]
    NOT?: CreditManagementScalarWhereInput | CreditManagementScalarWhereInput[]
    id?: StringFilter<"CreditManagement"> | string
    userId?: IntFilter<"CreditManagement"> | number
    type?: EnumActionTypeFilter<"CreditManagement"> | $Enums.ActionType
    creditType?: EnumCreditTypeFilter<"CreditManagement"> | $Enums.CreditType
    amount?: IntFilter<"CreditManagement"> | number
    status?: EnumStatusFilter<"CreditManagement"> | $Enums.Status
    registrantId?: StringNullableFilter<"CreditManagement"> | string | null
    approverId?: StringNullableFilter<"CreditManagement"> | string | null
    isApproved?: BoolFilter<"CreditManagement"> | boolean
    approvedAt?: DateTimeNullableFilter<"CreditManagement"> | Date | string | null
    createdAt?: DateTimeFilter<"CreditManagement"> | Date | string
    updatedAt?: DateTimeFilter<"CreditManagement"> | Date | string
  }

  export type CreditManagementUpsertWithWhereUniqueWithoutApproverInput = {
    where: CreditManagementWhereUniqueInput
    update: XOR<CreditManagementUpdateWithoutApproverInput, CreditManagementUncheckedUpdateWithoutApproverInput>
    create: XOR<CreditManagementCreateWithoutApproverInput, CreditManagementUncheckedCreateWithoutApproverInput>
  }

  export type CreditManagementUpdateWithWhereUniqueWithoutApproverInput = {
    where: CreditManagementWhereUniqueInput
    data: XOR<CreditManagementUpdateWithoutApproverInput, CreditManagementUncheckedUpdateWithoutApproverInput>
  }

  export type CreditManagementUpdateManyWithWhereWithoutApproverInput = {
    where: CreditManagementScalarWhereInput
    data: XOR<CreditManagementUpdateManyMutationInput, CreditManagementUncheckedUpdateManyWithoutApproverInput>
  }

  export type BlockTicketUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: BlockTicketWhereUniqueInput
    update: XOR<BlockTicketUpdateWithoutRegistrantInput, BlockTicketUncheckedUpdateWithoutRegistrantInput>
    create: XOR<BlockTicketCreateWithoutRegistrantInput, BlockTicketUncheckedCreateWithoutRegistrantInput>
  }

  export type BlockTicketUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: BlockTicketWhereUniqueInput
    data: XOR<BlockTicketUpdateWithoutRegistrantInput, BlockTicketUncheckedUpdateWithoutRegistrantInput>
  }

  export type BlockTicketUpdateManyWithWhereWithoutRegistrantInput = {
    where: BlockTicketScalarWhereInput
    data: XOR<BlockTicketUpdateManyMutationInput, BlockTicketUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type BlockTicketScalarWhereInput = {
    AND?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
    OR?: BlockTicketScalarWhereInput[]
    NOT?: BlockTicketScalarWhereInput | BlockTicketScalarWhereInput[]
    id?: StringFilter<"BlockTicket"> | string
    reportId?: IntFilter<"BlockTicket"> | number
    status?: EnumStatusFilter<"BlockTicket"> | $Enums.Status
    registrantId?: StringNullableFilter<"BlockTicket"> | string | null
    approverId?: StringNullableFilter<"BlockTicket"> | string | null
    isApproved?: BoolFilter<"BlockTicket"> | boolean
    approvedAt?: DateTimeNullableFilter<"BlockTicket"> | Date | string | null
    createdAt?: DateTimeFilter<"BlockTicket"> | Date | string
    updatedAt?: DateTimeFilter<"BlockTicket"> | Date | string
  }

  export type BlockTicketUpsertWithWhereUniqueWithoutApproverInput = {
    where: BlockTicketWhereUniqueInput
    update: XOR<BlockTicketUpdateWithoutApproverInput, BlockTicketUncheckedUpdateWithoutApproverInput>
    create: XOR<BlockTicketCreateWithoutApproverInput, BlockTicketUncheckedCreateWithoutApproverInput>
  }

  export type BlockTicketUpdateWithWhereUniqueWithoutApproverInput = {
    where: BlockTicketWhereUniqueInput
    data: XOR<BlockTicketUpdateWithoutApproverInput, BlockTicketUncheckedUpdateWithoutApproverInput>
  }

  export type BlockTicketUpdateManyWithWhereWithoutApproverInput = {
    where: BlockTicketScalarWhereInput
    data: XOR<BlockTicketUpdateManyMutationInput, BlockTicketUncheckedUpdateManyWithoutApproverInput>
  }

  export type RewardRevokeUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: RewardRevokeWhereUniqueInput
    update: XOR<RewardRevokeUpdateWithoutRegistrantInput, RewardRevokeUncheckedUpdateWithoutRegistrantInput>
    create: XOR<RewardRevokeCreateWithoutRegistrantInput, RewardRevokeUncheckedCreateWithoutRegistrantInput>
  }

  export type RewardRevokeUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: RewardRevokeWhereUniqueInput
    data: XOR<RewardRevokeUpdateWithoutRegistrantInput, RewardRevokeUncheckedUpdateWithoutRegistrantInput>
  }

  export type RewardRevokeUpdateManyWithWhereWithoutRegistrantInput = {
    where: RewardRevokeScalarWhereInput
    data: XOR<RewardRevokeUpdateManyMutationInput, RewardRevokeUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type RewardRevokeScalarWhereInput = {
    AND?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
    OR?: RewardRevokeScalarWhereInput[]
    NOT?: RewardRevokeScalarWhereInput | RewardRevokeScalarWhereInput[]
    id?: StringFilter<"RewardRevoke"> | string
    userId?: IntFilter<"RewardRevoke"> | number
    amount?: IntFilter<"RewardRevoke"> | number
    status?: EnumStatusFilter<"RewardRevoke"> | $Enums.Status
    type?: EnumActionTypeFilter<"RewardRevoke"> | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFilter<"RewardRevoke"> | $Enums.RewardRevokeCreditType
    registrantId?: StringNullableFilter<"RewardRevoke"> | string | null
    approverId?: StringNullableFilter<"RewardRevoke"> | string | null
    isApproved?: BoolFilter<"RewardRevoke"> | boolean
    approvedAt?: DateTimeNullableFilter<"RewardRevoke"> | Date | string | null
    createdAt?: DateTimeFilter<"RewardRevoke"> | Date | string
    updatedAt?: DateTimeFilter<"RewardRevoke"> | Date | string
  }

  export type RewardRevokeUpsertWithWhereUniqueWithoutApproverInput = {
    where: RewardRevokeWhereUniqueInput
    update: XOR<RewardRevokeUpdateWithoutApproverInput, RewardRevokeUncheckedUpdateWithoutApproverInput>
    create: XOR<RewardRevokeCreateWithoutApproverInput, RewardRevokeUncheckedCreateWithoutApproverInput>
  }

  export type RewardRevokeUpdateWithWhereUniqueWithoutApproverInput = {
    where: RewardRevokeWhereUniqueInput
    data: XOR<RewardRevokeUpdateWithoutApproverInput, RewardRevokeUncheckedUpdateWithoutApproverInput>
  }

  export type RewardRevokeUpdateManyWithWhereWithoutApproverInput = {
    where: RewardRevokeScalarWhereInput
    data: XOR<RewardRevokeUpdateManyMutationInput, RewardRevokeUncheckedUpdateManyWithoutApproverInput>
  }

  export type BoardUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: BoardWhereUniqueInput
    update: XOR<BoardUpdateWithoutRegistrantInput, BoardUncheckedUpdateWithoutRegistrantInput>
    create: XOR<BoardCreateWithoutRegistrantInput, BoardUncheckedCreateWithoutRegistrantInput>
  }

  export type BoardUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: BoardWhereUniqueInput
    data: XOR<BoardUpdateWithoutRegistrantInput, BoardUncheckedUpdateWithoutRegistrantInput>
  }

  export type BoardUpdateManyWithWhereWithoutRegistrantInput = {
    where: BoardScalarWhereInput
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type BoardScalarWhereInput = {
    AND?: BoardScalarWhereInput | BoardScalarWhereInput[]
    OR?: BoardScalarWhereInput[]
    NOT?: BoardScalarWhereInput | BoardScalarWhereInput[]
    id?: StringFilter<"Board"> | string
    title?: StringFilter<"Board"> | string
    content?: StringFilter<"Board"> | string
    views?: IntFilter<"Board"> | number
    registrantId?: StringNullableFilter<"Board"> | string | null
    isNotice?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
  }

  export type BoardCommentUpsertWithWhereUniqueWithoutRegistrantInput = {
    where: BoardCommentWhereUniqueInput
    update: XOR<BoardCommentUpdateWithoutRegistrantInput, BoardCommentUncheckedUpdateWithoutRegistrantInput>
    create: XOR<BoardCommentCreateWithoutRegistrantInput, BoardCommentUncheckedCreateWithoutRegistrantInput>
  }

  export type BoardCommentUpdateWithWhereUniqueWithoutRegistrantInput = {
    where: BoardCommentWhereUniqueInput
    data: XOR<BoardCommentUpdateWithoutRegistrantInput, BoardCommentUncheckedUpdateWithoutRegistrantInput>
  }

  export type BoardCommentUpdateManyWithWhereWithoutRegistrantInput = {
    where: BoardCommentScalarWhereInput
    data: XOR<BoardCommentUpdateManyMutationInput, BoardCommentUncheckedUpdateManyWithoutRegistrantInput>
  }

  export type BoardCommentScalarWhereInput = {
    AND?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
    OR?: BoardCommentScalarWhereInput[]
    NOT?: BoardCommentScalarWhereInput | BoardCommentScalarWhereInput[]
    id?: StringFilter<"BoardComment"> | string
    content?: StringFilter<"BoardComment"> | string
    boardId?: StringFilter<"BoardComment"> | string
    registrantId?: StringFilter<"BoardComment"> | string
    createdAt?: DateTimeFilter<"BoardComment"> | Date | string
    updatedAt?: DateTimeFilter<"BoardComment"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutGroupMailsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutGroupMailsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutGroupMailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupMailsInput, UserUncheckedCreateWithoutGroupMailsInput>
  }

  export type UserUpsertWithoutGroupMailsInput = {
    update: XOR<UserUpdateWithoutGroupMailsInput, UserUncheckedUpdateWithoutGroupMailsInput>
    create: XOR<UserCreateWithoutGroupMailsInput, UserUncheckedCreateWithoutGroupMailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroupMailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroupMailsInput, UserUncheckedUpdateWithoutGroupMailsInput>
  }

  export type UserUpdateWithoutGroupMailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupMailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutPersonalMailsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutPersonalMailsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutPersonalMailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonalMailsInput, UserUncheckedCreateWithoutPersonalMailsInput>
  }

  export type UserUpsertWithoutPersonalMailsInput = {
    update: XOR<UserUpdateWithoutPersonalMailsInput, UserUncheckedUpdateWithoutPersonalMailsInput>
    create: XOR<UserCreateWithoutPersonalMailsInput, UserUncheckedCreateWithoutPersonalMailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPersonalMailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPersonalMailsInput, UserUncheckedUpdateWithoutPersonalMailsInput>
  }

  export type UserUpdateWithoutPersonalMailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonalMailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutIpBlocksInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutIpBlocksInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutIpBlocksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIpBlocksInput, UserUncheckedCreateWithoutIpBlocksInput>
  }

  export type UserUpsertWithoutIpBlocksInput = {
    update: XOR<UserUpdateWithoutIpBlocksInput, UserUncheckedUpdateWithoutIpBlocksInput>
    create: XOR<UserCreateWithoutIpBlocksInput, UserUncheckedCreateWithoutIpBlocksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIpBlocksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIpBlocksInput, UserUncheckedUpdateWithoutIpBlocksInput>
  }

  export type UserUpdateWithoutIpBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutIpBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutAccountBlocksInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutAccountBlocksInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutAccountBlocksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountBlocksInput, UserUncheckedCreateWithoutAccountBlocksInput>
  }

  export type UserUpsertWithoutAccountBlocksInput = {
    update: XOR<UserUpdateWithoutAccountBlocksInput, UserUncheckedUpdateWithoutAccountBlocksInput>
    create: XOR<UserCreateWithoutAccountBlocksInput, UserUncheckedCreateWithoutAccountBlocksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountBlocksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountBlocksInput, UserUncheckedUpdateWithoutAccountBlocksInput>
  }

  export type UserUpdateWithoutAccountBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountBlocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type CouponCreateWithoutCouponGroupInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    couponLogs?: CouponLogCreateNestedManyWithoutCouponInput
  }

  export type CouponUncheckedCreateWithoutCouponGroupInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    couponLogs?: CouponLogUncheckedCreateNestedManyWithoutCouponInput
  }

  export type CouponCreateOrConnectWithoutCouponGroupInput = {
    where: CouponWhereUniqueInput
    create: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput>
  }

  export type CouponCreateManyCouponGroupInputEnvelope = {
    data: CouponCreateManyCouponGroupInput | CouponCreateManyCouponGroupInput[]
    skipDuplicates?: boolean
  }

  export type CouponUpsertWithWhereUniqueWithoutCouponGroupInput = {
    where: CouponWhereUniqueInput
    update: XOR<CouponUpdateWithoutCouponGroupInput, CouponUncheckedUpdateWithoutCouponGroupInput>
    create: XOR<CouponCreateWithoutCouponGroupInput, CouponUncheckedCreateWithoutCouponGroupInput>
  }

  export type CouponUpdateWithWhereUniqueWithoutCouponGroupInput = {
    where: CouponWhereUniqueInput
    data: XOR<CouponUpdateWithoutCouponGroupInput, CouponUncheckedUpdateWithoutCouponGroupInput>
  }

  export type CouponUpdateManyWithWhereWithoutCouponGroupInput = {
    where: CouponScalarWhereInput
    data: XOR<CouponUpdateManyMutationInput, CouponUncheckedUpdateManyWithoutCouponGroupInput>
  }

  export type CouponScalarWhereInput = {
    AND?: CouponScalarWhereInput | CouponScalarWhereInput[]
    OR?: CouponScalarWhereInput[]
    NOT?: CouponScalarWhereInput | CouponScalarWhereInput[]
    id?: StringFilter<"Coupon"> | string
    rewards?: JsonFilter<"Coupon">
    isUsed?: BoolFilter<"Coupon"> | boolean
    code?: StringNullableFilter<"Coupon"> | string | null
    couponGroupId?: StringNullableFilter<"Coupon"> | string | null
    createdAt?: DateTimeFilter<"Coupon"> | Date | string
    updatedAt?: DateTimeFilter<"Coupon"> | Date | string
  }

  export type CouponGroupCreateWithoutCouponsInput = {
    id?: string
    groupName: string
    groupType?: $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: string | null
    isIssued?: boolean
    usageLimit?: number | null
    groupReason: string
    groupStatus?: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponGroupUncheckedCreateWithoutCouponsInput = {
    id?: string
    groupName: string
    groupType?: $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: string | null
    isIssued?: boolean
    usageLimit?: number | null
    groupReason: string
    groupStatus?: $Enums.CouponGroupStatus
    quantity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponGroupCreateOrConnectWithoutCouponsInput = {
    where: CouponGroupWhereUniqueInput
    create: XOR<CouponGroupCreateWithoutCouponsInput, CouponGroupUncheckedCreateWithoutCouponsInput>
  }

  export type CouponLogCreateWithoutCouponInput = {
    id?: string
    userId: number
    nickname: string
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponLogUncheckedCreateWithoutCouponInput = {
    id?: string
    userId: number
    nickname: string
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponLogCreateOrConnectWithoutCouponInput = {
    where: CouponLogWhereUniqueInput
    create: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput>
  }

  export type CouponLogCreateManyCouponInputEnvelope = {
    data: CouponLogCreateManyCouponInput | CouponLogCreateManyCouponInput[]
    skipDuplicates?: boolean
  }

  export type CouponGroupUpsertWithoutCouponsInput = {
    update: XOR<CouponGroupUpdateWithoutCouponsInput, CouponGroupUncheckedUpdateWithoutCouponsInput>
    create: XOR<CouponGroupCreateWithoutCouponsInput, CouponGroupUncheckedCreateWithoutCouponsInput>
    where?: CouponGroupWhereInput
  }

  export type CouponGroupUpdateToOneWithWhereWithoutCouponsInput = {
    where?: CouponGroupWhereInput
    data: XOR<CouponGroupUpdateWithoutCouponsInput, CouponGroupUncheckedUpdateWithoutCouponsInput>
  }

  export type CouponGroupUpdateWithoutCouponsInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponGroupUncheckedUpdateWithoutCouponsInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    groupType?: EnumCouponGroupTypeFieldUpdateOperationsInput | $Enums.CouponGroupType
    rewards?: JsonNullValueInput | InputJsonValue
    code?: NullableStringFieldUpdateOperationsInput | string | null
    isIssued?: BoolFieldUpdateOperationsInput | boolean
    usageLimit?: NullableIntFieldUpdateOperationsInput | number | null
    groupReason?: StringFieldUpdateOperationsInput | string
    groupStatus?: EnumCouponGroupStatusFieldUpdateOperationsInput | $Enums.CouponGroupStatus
    quantity?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogUpsertWithWhereUniqueWithoutCouponInput = {
    where: CouponLogWhereUniqueInput
    update: XOR<CouponLogUpdateWithoutCouponInput, CouponLogUncheckedUpdateWithoutCouponInput>
    create: XOR<CouponLogCreateWithoutCouponInput, CouponLogUncheckedCreateWithoutCouponInput>
  }

  export type CouponLogUpdateWithWhereUniqueWithoutCouponInput = {
    where: CouponLogWhereUniqueInput
    data: XOR<CouponLogUpdateWithoutCouponInput, CouponLogUncheckedUpdateWithoutCouponInput>
  }

  export type CouponLogUpdateManyWithWhereWithoutCouponInput = {
    where: CouponLogScalarWhereInput
    data: XOR<CouponLogUpdateManyMutationInput, CouponLogUncheckedUpdateManyWithoutCouponInput>
  }

  export type CouponLogScalarWhereInput = {
    AND?: CouponLogScalarWhereInput | CouponLogScalarWhereInput[]
    OR?: CouponLogScalarWhereInput[]
    NOT?: CouponLogScalarWhereInput | CouponLogScalarWhereInput[]
    id?: StringFilter<"CouponLog"> | string
    userId?: IntFilter<"CouponLog"> | number
    nickname?: StringFilter<"CouponLog"> | string
    couponId?: StringNullableFilter<"CouponLog"> | string | null
    usedAt?: DateTimeFilter<"CouponLog"> | Date | string
    createdAt?: DateTimeFilter<"CouponLog"> | Date | string
    updatedAt?: DateTimeFilter<"CouponLog"> | Date | string
  }

  export type CouponCreateWithoutCouponLogsInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    couponGroup?: CouponGroupCreateNestedOneWithoutCouponsInput
  }

  export type CouponUncheckedCreateWithoutCouponLogsInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    couponGroupId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponCreateOrConnectWithoutCouponLogsInput = {
    where: CouponWhereUniqueInput
    create: XOR<CouponCreateWithoutCouponLogsInput, CouponUncheckedCreateWithoutCouponLogsInput>
  }

  export type CouponUpsertWithoutCouponLogsInput = {
    update: XOR<CouponUpdateWithoutCouponLogsInput, CouponUncheckedUpdateWithoutCouponLogsInput>
    create: XOR<CouponCreateWithoutCouponLogsInput, CouponUncheckedCreateWithoutCouponLogsInput>
    where?: CouponWhereInput
  }

  export type CouponUpdateToOneWithWhereWithoutCouponLogsInput = {
    where?: CouponWhereInput
    data: XOR<CouponUpdateWithoutCouponLogsInput, CouponUncheckedUpdateWithoutCouponLogsInput>
  }

  export type CouponUpdateWithoutCouponLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    couponGroup?: CouponGroupUpdateOneWithoutCouponsNestedInput
  }

  export type CouponUncheckedUpdateWithoutCouponLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    couponGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRegisteredItemQuantitiesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutRegisteredItemQuantitiesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutRegisteredItemQuantitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredItemQuantitiesInput, UserUncheckedCreateWithoutRegisteredItemQuantitiesInput>
  }

  export type UserCreateWithoutApprovedItemQuantitiesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutApprovedItemQuantitiesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutApprovedItemQuantitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedItemQuantitiesInput, UserUncheckedCreateWithoutApprovedItemQuantitiesInput>
  }

  export type UserUpsertWithoutRegisteredItemQuantitiesInput = {
    update: XOR<UserUpdateWithoutRegisteredItemQuantitiesInput, UserUncheckedUpdateWithoutRegisteredItemQuantitiesInput>
    create: XOR<UserCreateWithoutRegisteredItemQuantitiesInput, UserUncheckedCreateWithoutRegisteredItemQuantitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredItemQuantitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredItemQuantitiesInput, UserUncheckedUpdateWithoutRegisteredItemQuantitiesInput>
  }

  export type UserUpdateWithoutRegisteredItemQuantitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredItemQuantitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUpsertWithoutApprovedItemQuantitiesInput = {
    update: XOR<UserUpdateWithoutApprovedItemQuantitiesInput, UserUncheckedUpdateWithoutApprovedItemQuantitiesInput>
    create: XOR<UserCreateWithoutApprovedItemQuantitiesInput, UserUncheckedCreateWithoutApprovedItemQuantitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedItemQuantitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedItemQuantitiesInput, UserUncheckedUpdateWithoutApprovedItemQuantitiesInput>
  }

  export type UserUpdateWithoutApprovedItemQuantitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedItemQuantitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutRegisteredRewardRevokesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutRegisteredRewardRevokesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutRegisteredRewardRevokesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredRewardRevokesInput, UserUncheckedCreateWithoutRegisteredRewardRevokesInput>
  }

  export type UserCreateWithoutApprovedRewardRevokesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutApprovedRewardRevokesInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutApprovedRewardRevokesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedRewardRevokesInput, UserUncheckedCreateWithoutApprovedRewardRevokesInput>
  }

  export type UserUpsertWithoutRegisteredRewardRevokesInput = {
    update: XOR<UserUpdateWithoutRegisteredRewardRevokesInput, UserUncheckedUpdateWithoutRegisteredRewardRevokesInput>
    create: XOR<UserCreateWithoutRegisteredRewardRevokesInput, UserUncheckedCreateWithoutRegisteredRewardRevokesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredRewardRevokesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredRewardRevokesInput, UserUncheckedUpdateWithoutRegisteredRewardRevokesInput>
  }

  export type UserUpdateWithoutRegisteredRewardRevokesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredRewardRevokesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUpsertWithoutApprovedRewardRevokesInput = {
    update: XOR<UserUpdateWithoutApprovedRewardRevokesInput, UserUncheckedUpdateWithoutApprovedRewardRevokesInput>
    create: XOR<UserCreateWithoutApprovedRewardRevokesInput, UserUncheckedCreateWithoutApprovedRewardRevokesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedRewardRevokesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedRewardRevokesInput, UserUncheckedUpdateWithoutApprovedRewardRevokesInput>
  }

  export type UserUpdateWithoutApprovedRewardRevokesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedRewardRevokesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutRegisteredCreditManagementsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutRegisteredCreditManagementsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutRegisteredCreditManagementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredCreditManagementsInput, UserUncheckedCreateWithoutRegisteredCreditManagementsInput>
  }

  export type UserCreateWithoutApprovedCreditManagementsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutApprovedCreditManagementsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutApprovedCreditManagementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedCreditManagementsInput, UserUncheckedCreateWithoutApprovedCreditManagementsInput>
  }

  export type UserUpsertWithoutRegisteredCreditManagementsInput = {
    update: XOR<UserUpdateWithoutRegisteredCreditManagementsInput, UserUncheckedUpdateWithoutRegisteredCreditManagementsInput>
    create: XOR<UserCreateWithoutRegisteredCreditManagementsInput, UserUncheckedCreateWithoutRegisteredCreditManagementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredCreditManagementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredCreditManagementsInput, UserUncheckedUpdateWithoutRegisteredCreditManagementsInput>
  }

  export type UserUpdateWithoutRegisteredCreditManagementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredCreditManagementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUpsertWithoutApprovedCreditManagementsInput = {
    update: XOR<UserUpdateWithoutApprovedCreditManagementsInput, UserUncheckedUpdateWithoutApprovedCreditManagementsInput>
    create: XOR<UserCreateWithoutApprovedCreditManagementsInput, UserUncheckedCreateWithoutApprovedCreditManagementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedCreditManagementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedCreditManagementsInput, UserUncheckedUpdateWithoutApprovedCreditManagementsInput>
  }

  export type UserUpdateWithoutApprovedCreditManagementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedCreditManagementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutRegisteredBlockTicketsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutRegisteredBlockTicketsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutRegisteredBlockTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredBlockTicketsInput, UserUncheckedCreateWithoutRegisteredBlockTicketsInput>
  }

  export type UserCreateWithoutApprovedBlockTicketsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutApprovedBlockTicketsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutApprovedBlockTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedBlockTicketsInput, UserUncheckedCreateWithoutApprovedBlockTicketsInput>
  }

  export type UserUpsertWithoutRegisteredBlockTicketsInput = {
    update: XOR<UserUpdateWithoutRegisteredBlockTicketsInput, UserUncheckedUpdateWithoutRegisteredBlockTicketsInput>
    create: XOR<UserCreateWithoutRegisteredBlockTicketsInput, UserUncheckedCreateWithoutRegisteredBlockTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredBlockTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredBlockTicketsInput, UserUncheckedUpdateWithoutRegisteredBlockTicketsInput>
  }

  export type UserUpdateWithoutRegisteredBlockTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredBlockTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUpsertWithoutApprovedBlockTicketsInput = {
    update: XOR<UserUpdateWithoutApprovedBlockTicketsInput, UserUncheckedUpdateWithoutApprovedBlockTicketsInput>
    create: XOR<UserCreateWithoutApprovedBlockTicketsInput, UserUncheckedCreateWithoutApprovedBlockTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedBlockTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedBlockTicketsInput, UserUncheckedUpdateWithoutApprovedBlockTicketsInput>
  }

  export type UserUpdateWithoutApprovedBlockTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedBlockTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutBoardsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutBoardsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutBoardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
  }

  export type BoardCommentCreateWithoutBoardInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant: UserCreateNestedOneWithoutBoardCommentsInput
  }

  export type BoardCommentUncheckedCreateWithoutBoardInput = {
    id?: string
    content: string
    registrantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentCreateOrConnectWithoutBoardInput = {
    where: BoardCommentWhereUniqueInput
    create: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput>
  }

  export type BoardCommentCreateManyBoardInputEnvelope = {
    data: BoardCommentCreateManyBoardInput | BoardCommentCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBoardsInput = {
    update: XOR<UserUpdateWithoutBoardsInput, UserUncheckedUpdateWithoutBoardsInput>
    create: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardsInput, UserUncheckedUpdateWithoutBoardsInput>
  }

  export type UserUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type BoardCommentUpsertWithWhereUniqueWithoutBoardInput = {
    where: BoardCommentWhereUniqueInput
    update: XOR<BoardCommentUpdateWithoutBoardInput, BoardCommentUncheckedUpdateWithoutBoardInput>
    create: XOR<BoardCommentCreateWithoutBoardInput, BoardCommentUncheckedCreateWithoutBoardInput>
  }

  export type BoardCommentUpdateWithWhereUniqueWithoutBoardInput = {
    where: BoardCommentWhereUniqueInput
    data: XOR<BoardCommentUpdateWithoutBoardInput, BoardCommentUncheckedUpdateWithoutBoardInput>
  }

  export type BoardCommentUpdateManyWithWhereWithoutBoardInput = {
    where: BoardCommentScalarWhereInput
    data: XOR<BoardCommentUpdateManyMutationInput, BoardCommentUncheckedUpdateManyWithoutBoardInput>
  }

  export type BoardCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    views?: number
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    registrant?: UserCreateNestedOneWithoutBoardsInput
  }

  export type BoardUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    content: string
    views?: number
    registrantId?: string | null
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCreateOrConnectWithoutCommentsInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutCommentsInput, BoardUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutBoardCommentsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutBoardCommentsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedCreateNestedManyWithoutRegistrantInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutBoardCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardCommentsInput, UserUncheckedCreateWithoutBoardCommentsInput>
  }

  export type BoardUpsertWithoutCommentsInput = {
    update: XOR<BoardUpdateWithoutCommentsInput, BoardUncheckedUpdateWithoutCommentsInput>
    create: XOR<BoardCreateWithoutCommentsInput, BoardUncheckedCreateWithoutCommentsInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutCommentsInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutCommentsInput, BoardUncheckedUpdateWithoutCommentsInput>
  }

  export type BoardUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutBoardsNestedInput
  }

  export type BoardUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBoardCommentsInput = {
    update: XOR<UserUpdateWithoutBoardCommentsInput, UserUncheckedUpdateWithoutBoardCommentsInput>
    create: XOR<UserCreateWithoutBoardCommentsInput, UserUncheckedCreateWithoutBoardCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardCommentsInput, UserUncheckedUpdateWithoutBoardCommentsInput>
  }

  export type UserUpdateWithoutBoardCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accountUsingQuerylogs?: AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type UserCreateWithoutAccountUsingQuerylogsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    groupMails?: GroupMailCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeCreateNestedManyWithoutApproverInput
    boards?: BoardCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentCreateNestedManyWithoutRegistrantInput
  }

  export type UserUncheckedCreateWithoutAccountUsingQuerylogsInput = {
    id?: string
    name?: string | null
    hashedPassword?: string | null
    email?: string | null
    userId: number
    emailVerified?: Date | string | null
    nickname: string
    image?: string | null
    role?: $Enums.UserRole
    isPermissive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    groupMails?: GroupMailUncheckedCreateNestedManyWithoutUserInput
    personalMails?: PersonalMailUncheckedCreateNestedManyWithoutRegistrantInput
    ipBlocks?: IpBlockUncheckedCreateNestedManyWithoutRegistrantInput
    accountBlocks?: AccountBlockUncheckedCreateNestedManyWithoutRegistrantInput
    registeredItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutRegistrantInput
    approvedItemQuantities?: ItemQuantityUncheckedCreateNestedManyWithoutApproverInput
    registeredCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutRegistrantInput
    approvedCreditManagements?: CreditManagementUncheckedCreateNestedManyWithoutApproverInput
    registeredBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutRegistrantInput
    approvedBlockTickets?: BlockTicketUncheckedCreateNestedManyWithoutApproverInput
    registeredRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutRegistrantInput
    approvedRewardRevokes?: RewardRevokeUncheckedCreateNestedManyWithoutApproverInput
    boards?: BoardUncheckedCreateNestedManyWithoutRegistrantInput
    boardComments?: BoardCommentUncheckedCreateNestedManyWithoutRegistrantInput
  }

  export type UserCreateOrConnectWithoutAccountUsingQuerylogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountUsingQuerylogsInput, UserUncheckedCreateWithoutAccountUsingQuerylogsInput>
  }

  export type UserUpsertWithoutAccountUsingQuerylogsInput = {
    update: XOR<UserUpdateWithoutAccountUsingQuerylogsInput, UserUncheckedUpdateWithoutAccountUsingQuerylogsInput>
    create: XOR<UserCreateWithoutAccountUsingQuerylogsInput, UserUncheckedCreateWithoutAccountUsingQuerylogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountUsingQuerylogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountUsingQuerylogsInput, UserUncheckedUpdateWithoutAccountUsingQuerylogsInput>
  }

  export type UserUpdateWithoutAccountUsingQuerylogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    groupMails?: GroupMailUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUpdateManyWithoutApproverNestedInput
    boards?: BoardUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUpdateManyWithoutRegistrantNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountUsingQuerylogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isPermissive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    groupMails?: GroupMailUncheckedUpdateManyWithoutUserNestedInput
    personalMails?: PersonalMailUncheckedUpdateManyWithoutRegistrantNestedInput
    ipBlocks?: IpBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    accountBlocks?: AccountBlockUncheckedUpdateManyWithoutRegistrantNestedInput
    registeredItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedItemQuantities?: ItemQuantityUncheckedUpdateManyWithoutApproverNestedInput
    registeredCreditManagements?: CreditManagementUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedCreditManagements?: CreditManagementUncheckedUpdateManyWithoutApproverNestedInput
    registeredBlockTickets?: BlockTicketUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedBlockTickets?: BlockTicketUncheckedUpdateManyWithoutApproverNestedInput
    registeredRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutRegistrantNestedInput
    approvedRewardRevokes?: RewardRevokeUncheckedUpdateManyWithoutApproverNestedInput
    boards?: BoardUncheckedUpdateManyWithoutRegistrantNestedInput
    boardComments?: BoardCommentUncheckedUpdateManyWithoutRegistrantNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    updatedAt?: Date | string
  }

  export type AccountUsingQuerylogCreateManyRegistrantInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupMailCreateManyUserInput = {
    id?: string
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalMailCreateManyRegistrantInput = {
    id?: string
    userId: number
    reason: string
    content: string
    reward?: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IpBlockCreateManyRegistrantInput = {
    id?: string
    ip: string
    reason: string
    type: $Enums.IpBlockType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountBlockCreateManyRegistrantInput = {
    id?: string
    reason: string
    userId: number
    type: $Enums.AccountBlockType
    blockDuration?: number | null
    isPermanent?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityCreateManyRegistrantInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemQuantityCreateManyApproverInput = {
    id?: string
    userId: number
    itemId: string
    itemName: string
    amount: number
    type?: $Enums.ActionType
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementCreateManyRegistrantInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditManagementCreateManyApproverInput = {
    id?: string
    userId: number
    type: $Enums.ActionType
    creditType: $Enums.CreditType
    amount: number
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketCreateManyRegistrantInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlockTicketCreateManyApproverInput = {
    id?: string
    reportId: number
    status?: $Enums.Status
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeCreateManyRegistrantInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    approverId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RewardRevokeCreateManyApproverInput = {
    id?: string
    userId: number
    amount: number
    status?: $Enums.Status
    type: $Enums.ActionType
    creditType: $Enums.RewardRevokeCreditType
    registrantId?: string | null
    isApproved?: boolean
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCreateManyRegistrantInput = {
    id?: string
    title: string
    content: string
    views?: number
    isNotice?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentCreateManyRegistrantInput = {
    id?: string
    content: string
    boardId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUsingQuerylogUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMailUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalMailUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    reward?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IpBlockUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    type?: EnumIpBlockTypeFieldUpdateOperationsInput | $Enums.IpBlockType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountBlockUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountBlockTypeFieldUpdateOperationsInput | $Enums.AccountBlockType
    blockDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isPermanent?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneWithoutApprovedItemQuantitiesNestedInput
  }

  export type ItemQuantityUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredItemQuantitiesNestedInput
  }

  export type ItemQuantityUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemQuantityUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneWithoutApprovedCreditManagementsNestedInput
  }

  export type CreditManagementUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredCreditManagementsNestedInput
  }

  export type CreditManagementUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditManagementUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumCreditTypeFieldUpdateOperationsInput | $Enums.CreditType
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneWithoutApprovedBlockTicketsNestedInput
  }

  export type BlockTicketUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredBlockTicketsNestedInput
  }

  export type BlockTicketUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlockTicketUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneWithoutApprovedRewardRevokesNestedInput
  }

  export type RewardRevokeUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    approverId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneWithoutRegisteredRewardRevokesNestedInput
  }

  export type RewardRevokeUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RewardRevokeUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    type?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    creditType?: EnumRewardRevokeCreditTypeFieldUpdateOperationsInput | $Enums.RewardRevokeCreditType
    registrantId?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: BoardCommentUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: BoardCommentUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isNotice?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type BoardCommentUncheckedUpdateWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentUncheckedUpdateManyWithoutRegistrantInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponCreateManyCouponGroupInput = {
    id?: string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: boolean
    code?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponUpdateWithoutCouponGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    couponLogs?: CouponLogUpdateManyWithoutCouponNestedInput
  }

  export type CouponUncheckedUpdateWithoutCouponGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    couponLogs?: CouponLogUncheckedUpdateManyWithoutCouponNestedInput
  }

  export type CouponUncheckedUpdateManyWithoutCouponGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    rewards?: JsonNullValueInput | InputJsonValue
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogCreateManyCouponInput = {
    id?: string
    userId: number
    nickname: string
    usedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CouponLogUpdateWithoutCouponInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogUncheckedUpdateWithoutCouponInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponLogUncheckedUpdateManyWithoutCouponInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentCreateManyBoardInput = {
    id?: string
    content: string
    registrantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardCommentUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrant?: UserUpdateOneRequiredWithoutBoardCommentsNestedInput
  }

  export type BoardCommentUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    registrantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCommentUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    registrantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CouponGroupCountOutputTypeDefaultArgs instead
     */
    export type CouponGroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CouponGroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CouponCountOutputTypeDefaultArgs instead
     */
    export type CouponCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CouponCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardCountOutputTypeDefaultArgs instead
     */
    export type BoardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupMailDefaultArgs instead
     */
    export type GroupMailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupMailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonalMailDefaultArgs instead
     */
    export type PersonalMailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonalMailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IpBlockDefaultArgs instead
     */
    export type IpBlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IpBlockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountBlockDefaultArgs instead
     */
    export type AccountBlockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountBlockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CouponGroupDefaultArgs instead
     */
    export type CouponGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CouponGroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CouponDefaultArgs instead
     */
    export type CouponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CouponDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CouponLogDefaultArgs instead
     */
    export type CouponLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CouponLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemQuantityDefaultArgs instead
     */
    export type ItemQuantityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemQuantityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RewardRevokeDefaultArgs instead
     */
    export type RewardRevokeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RewardRevokeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemsDefaultArgs instead
     */
    export type ItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupsDefaultArgs instead
     */
    export type GroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreditManagementDefaultArgs instead
     */
    export type CreditManagementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreditManagementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlockTicketDefaultArgs instead
     */
    export type BlockTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlockTicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardDefaultArgs instead
     */
    export type BoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardCommentDefaultArgs instead
     */
    export type BoardCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountUsingQuerylogDefaultArgs instead
     */
    export type AccountUsingQuerylogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountUsingQuerylogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}