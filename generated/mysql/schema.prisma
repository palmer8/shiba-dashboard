generator client {
  provider = "prisma-client-js"
  output   = "../../../generated/mysql"
}

datasource db {
  provider     = "mysql"
  url          = env("MYSQL_DATABASE_URL")
  relationMode = "prisma"
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model betting_history {
  user_id       Int?
  bet_key       String? @db.VarChar(10)
  bet_count     Int?
  result_amount Int?
  rand_result   Int?
  result_color  String? @db.VarChar(10)

  @@index([user_id], map: "idx_betting_history_user_id")
  @@ignore
}

model dokku_appearance {
  user_id    Int    @id
  barbershop String @default("[]") @db.LongText
  clothes    String @default("[]") @db.LongText
  tattoo     String @default("[]") @db.LongText
}

model dokku_blacklist {
  user_id    Int
  phone      String   @db.VarChar(50)
  expiration DateTime @db.DateTime(0)

  @@id([user_id, phone])
}

model dokku_cashshop {
  user_id         Int @id
  current_cash    Int @default(0)
  cumulative_cash Int @default(0)
  current_coin    Int @default(0)
  tier_reward     Int @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_cashshoplimit {
  user_id Int?
  itemID  String @db.VarChar(50)

  @@index([user_id], map: "FK_dokku_cashshoplimit_vrp_users")
  @@ignore
}

model dokku_chunobot {
  user_id   Int     @id @db.UnsignedInt
  reason    String? @db.VarChar(255)
  adminName String? @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_company {
  id      Int?
  name    String? @db.VarChar(50)
  capital BigInt?

  @@ignore
}

model dokku_daily {
  user_id     Int      @id
  joinCount   Int      @default(1)
  last_update DateTime @db.Date
  day_1       Int      @default(0) @db.TinyInt
  day_2       Int      @default(0) @db.TinyInt
  day_3       Int      @default(0) @db.TinyInt
  day_4       Int      @default(0) @db.TinyInt
  day_5       Int      @default(0) @db.TinyInt
  day_6       Int      @default(0) @db.TinyInt
  day_7       Int      @default(0) @db.TinyInt
  day_8       Int      @default(0) @db.TinyInt
  day_9       Int      @default(0) @db.TinyInt
  day_10      Int      @default(0) @db.TinyInt
  day_11      Int      @default(0) @db.TinyInt
  day_12      Int      @default(0) @db.TinyInt
  day_13      Int      @default(0) @db.TinyInt
  day_14      Int      @default(0) @db.TinyInt
  day_15      Int      @default(0) @db.TinyInt
  day_16      Int      @default(0) @db.TinyInt
  day_17      Int      @default(0) @db.TinyInt
  day_18      Int      @default(0) @db.TinyInt
  day_19      Int      @default(0) @db.TinyInt
  day_20      Int      @default(0) @db.TinyInt
  day_21      Int      @default(0) @db.TinyInt
  day_22      Int      @default(0) @db.TinyInt
  day_23      Int      @default(0) @db.TinyInt
  day_24      Int      @default(0) @db.TinyInt
  day_25      Int      @default(0) @db.TinyInt
  day_26      Int      @default(0) @db.TinyInt
  day_27      Int      @default(0) @db.TinyInt
  day_28      Int      @default(0) @db.TinyInt
  uptime      Int      @default(0)
  time_1      Int      @default(0) @db.TinyInt
  time_2      Int      @default(0) @db.TinyInt
  time_3      Int      @default(0) @db.TinyInt
  time_4      Int      @default(0) @db.TinyInt
  time_5      Int      @default(0) @db.TinyInt
  time_6      Int      @default(0) @db.TinyInt

  @@index([day_1], map: "day_1")
  @@index([day_10], map: "day_10")
  @@index([day_11], map: "day_11")
  @@index([day_12], map: "day_12")
  @@index([day_13], map: "day_13")
  @@index([day_14], map: "day_14")
  @@index([day_15], map: "day_15")
  @@index([day_16], map: "day_16")
  @@index([day_17], map: "day_17")
  @@index([day_18], map: "day_18")
  @@index([day_19], map: "day_19")
  @@index([day_2], map: "day_2")
  @@index([day_20], map: "day_20")
  @@index([day_21], map: "day_21")
  @@index([day_22], map: "day_22")
  @@index([day_23], map: "day_23")
  @@index([day_24], map: "day_24")
  @@index([day_25], map: "day_25")
  @@index([day_26], map: "day_26")
  @@index([day_27], map: "day_27")
  @@index([day_28], map: "day_28")
  @@index([day_3], map: "day_3")
  @@index([day_4], map: "day_4")
  @@index([day_5], map: "day_5")
  @@index([day_6], map: "day_6")
  @@index([day_7], map: "day_7")
  @@index([day_8], map: "day_8")
  @@index([day_9], map: "day_9")
  @@index([joinCount], map: "joinCount")
  @@index([last_update], map: "last-update")
  @@index([time_1], map: "time_1")
  @@index([time_2], map: "time_2")
  @@index([time_3], map: "time_3")
  @@index([time_4], map: "time_4")
  @@index([time_5], map: "time_5")
  @@index([time_6], map: "time_6")
  @@index([uptime], map: "uptime")
}

model dokku_daily_chuseok {
  user_id     Int       @id
  joinCount   Int       @default(1)
  last_update DateTime? @db.Date
  rewards     String?   @db.Text
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_daily_event2 {
  user_id Int?
  name    String?   @db.VarChar(50)
  item    String?   @db.VarChar(50)
  time    DateTime? @db.Timestamp(0)

  @@index([user_id], map: "FK_dokku_daily_event2_vrp_users")
  @@ignore
}

model dokku_dailycheck {
  user_id              Int       @id @default(0)
  last_connection_date DateTime? @default(dbgenerated("(curdate())")) @db.Date
  joinCount            Int?      @default(1)
  today_playtime       Int?      @default(0)
  attendance_rewards   String?   @default("{\"1\": false, \"2\": false, \"3\": false, \"4\": false, \"5\": false, \"6\": false, \"7\": false, \"8\": false, \"9\": false, \"10\": false, \"11\": false, \"12\": false, \"13\": false, \"14\": false, \"15\": false, \"16\": false, \"17\": false, \"18\": false, \"19\": false, \"20\": false, \"21\": false, \"22\": false, \"23\": false, \"24\": false, \"25\": false, \"26\": false, \"27\": false, \"28\": false, \"29\": false, \"30\": false}") @db.LongText
  time_rewards         String?   @default("{\"1\": false, \"2\": false, \"3\": false, \"4\": false, \"5\": false, \"6\": false}") @db.LongText
}

model dokku_dance {
  song_id Int
  user_id Int
  name    String @db.Text
  score   Int

  @@id([user_id, song_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_eventbox {
  user_id Int
  date    DateTime? @db.DateTime(0)
  finder  String?   @default("{}") @db.LongText

  @@index([user_id], map: "FK_dokku_eventbox_vrp_users")
  @@ignore
}

model dokku_fish {
  user_id Int
  fish    String @db.VarChar(50)
  kg      Float  @db.Float
  count   Int    @default(1)

  @@id([user_id, fish])
}

model dokku_fish_rank {
  user_id Int    @id
  name    String @db.Text
  fish    String @db.Text
  fish_kg Float  @db.Float
  count   Int
}

model dokku_giftbox {
  id          Int     @id @default(autoincrement())
  user_id     Int
  item        String  @default("") @db.VarChar(50)
  item_amount Int     @default(1)
  need_item   String? @db.VarChar(50)
  need_amount Int     @default(0)
}

model dokku_hottime_event {
  id         Int      @id @default(autoincrement())
  title      String   @default("") @db.VarChar(100)
  start_time DateTime @db.DateTime(0)
  end_time   DateTime @db.DateTime(0)
  reward     String   @db.LongText
}

model dokku_hottime_log {
  event_id   Int
  user_id    Int
  claimed_at DateTime @default(now()) @db.Timestamp(0)

  @@id([user_id, event_id])
}

model dokku_house {
  user_id Int    @id
  idx     Int
  holds   Int
  design  Int
  members String @default("{}") @db.MediumText
  clothes String @default("{}") @db.MediumText
}

model dokku_incident_report {
  report_id               Int                                @id @default(autoincrement())
  reason                  String                             @default("") @db.VarChar(255)
  incident_description    String                             @db.Text
  incident_time           DateTime?                          @db.DateTime(0)
  target_user_id          Int?
  target_user_nickname    String                             @default("") @db.VarChar(100)
  reporting_user_id       Int?
  reporting_user_nickname String?                            @db.VarChar(100)
  penalty_type            dokku_incident_report_penalty_type
  warning_count           Int?
  detention_time_minutes  Int?
  ban_duration_hours      Int?
  admin                   String?                            @default("") @db.VarChar(100)
}

model dokku_jail {
  user_id Int @id
  time    Int @default(0)
  admin   Int @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_limited_items {
  item_code    String? @db.Char(50)
  item_box     String? @db.Char(50)
  item_current Int?    @default(0) @db.UnsignedInt
  item_Total   Int?    @default(0)

  @@ignore
}

model dokku_lotto_daily {
  user_id Int     @id
  count   Decimal @db.Decimal(10, 0)
  name    String? @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_lotto_list {
  user_id    Int
  numbers    String   @db.VarChar(50)
  round      Int?
  created_at DateTime @default(now()) @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_lotto_result {
  result        String?   @db.VarChar(50)
  user_id       Int?
  round         Int?
  created_at    DateTime? @db.DateTime(0)
  entries_count Int?

  @@ignore
}

model dokku_newbie {
  user_id     Int       @id
  code        String    @unique(map: "code") @db.VarChar(100)
  newbieState Int       @default(0)
  termsState  Int       @default(0)
  created_at  DateTime? @default(now()) @db.DateTime(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_permission {
  permission String? @db.Char(50)
  key        String? @db.Char(50)

  @@ignore
}

model dokku_quests {
  user_id Int
  type    String @db.VarChar(50)
  value   String @default("[]") @db.MediumText
  step    Int    @default(1)
  done    Int    @default(0)

  @@id([type, user_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_quests_calltime {
  user_id Int
  time    String? @db.VarChar(50)
  type    String  @db.VarChar(50)

  @@index([user_id], map: "FK_dokku_quests_calltime_vrp_users")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_racing {
  user_id Int
  idx     Int
  name    String @db.VarChar(50)
  score   Int

  @@index([user_id], map: "FK_dokku_racing_vrp_users")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_sanctions {
  user_id Int
  reason  String    @db.MediumText
  admin   String    @db.VarChar(50)
  time    DateTime? @db.DateTime(0)

  @@ignore
}

model dokku_skills {
  user_id   Int  @id
  fishing   Int? @default(0)
  newspaper Int? @default(0)
  mining    Int? @default(0)
  drug      Int? @default(0)
  hamburger Int? @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dokku_stafflog {
  staff_id    Int?
  staff_name  String?   @db.Char(50)
  target_id   Int?
  target_name String?   @db.Char(50)
  description String?   @db.Text
  time        DateTime? @db.DateTime(0)

  @@ignore
}

model dokku_tattoos {
  user_id Int     @id
  tattoos String? @default("") @db.LongText
}

model dokku_tax {
  id           Int @id @default(autoincrement())
  statecoffers Int
  hi           Int
  army         Int
}

model dokku_tebex {
  code        String @id @default("") @db.VarChar(50)
  packagename String @default("") @db.LongText
}

model dokku_tebex_log {
  id          String?   @db.Text
  transid     String    @id @db.VarChar(255)
  price       String?   @db.Text
  email       String?   @db.Text
  ip          String?   @db.Text
  packagename String?   @db.MediumText
  date        DateTime? @default(now()) @db.DateTime(0)
}

model dokku_usermarket {
  id           Int      @id @default(autoincrement())
  user_id      Int
  type         String   @db.Text
  title        String   @db.Text
  image        String   @db.Text
  item_name    String   @db.Text
  item_code    String   @db.Text
  item_type    String   @db.VarChar(255)
  item_content String   @db.VarChar(255)
  amount       Int
  price        BigInt
  sell_price   BigInt   @default(0) @db.UnsignedBigInt
  time         DateTime @default(now()) @db.DateTime(0)

  @@index([user_id], map: "FK_memory_usedmarket_vrp_users")
  @@index([type(length: 768)], map: "type")
}

model dokku_warning {
  user_id Int  @id
  count   Int? @default(0)
}

model dokku_whitelist_ip {
  id         Int       @id @default(autoincrement())
  user_ip    String    @db.Text
  status     Int       @default(0)
  comment    String?   @db.VarChar(50)
  registrant String?   @db.Text
  date       DateTime? @default(now()) @db.DateTime(0)
}

model maple_tree_growth {
  user_id                Int      @id
  fertilizer_gauge       Int?     @default(10)
  water_gauge            Int?     @default(10)
  growth_gauge           Int?     @default(0)
  fertilizer_last_update DateTime @default(now()) @db.Timestamp(0)
  water_last_update      DateTime @default(now()) @db.Timestamp(0)
  created_time           DateTime @default(now()) @db.Timestamp(0)
  growth_last_update     DateTime @default(now()) @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model maple_tree_log {
  user_id         Int
  completion_time DateTime? @default(now()) @db.DateTime(0)

  @@index([user_id], map: "FK_maple_tree_log_vrp_users")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model payment_history {
  name  String?   @db.Char(50)
  bank  String?   @db.Char(50)
  money String?   @db.Char(50)
  text  String?   @db.Char(255)
  time  DateTime? @db.DateTime(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model payment_request {
  id        String?   @db.VarChar(50)
  type      String?   @db.VarChar(50)
  character String?   @db.VarChar(50)
  user_id   Int?
  amount    Int       @default(0)
  state     Int       @default(0)
  time      DateTime? @db.Timestamp(0)

  @@ignore
}

model pd_extra {
  id         Int      @id @default(autoincrement())
  player     String?  @default("0") @db.VarChar(256)
  tag        String?  @default("0") @db.VarChar(50)
  data       String?  @db.LongText
  created_at DateTime @default(now()) @db.DateTime(0)
}

model phone_backups {
  id           String @db.VarChar(100)
  phone_number String @db.VarChar(15)

  @@id([id, phone_number])
  @@index([phone_number], map: "phone_number")
}

model phone_clock_alarms {
  id           Int      @default(autoincrement()) @db.UnsignedInt
  phone_number String   @db.VarChar(15)
  hours        Int      @default(0)
  minutes      Int      @default(0)
  label        String?  @db.VarChar(50)
  enabled      Boolean? @default(true)

  @@id([id, phone_number])
  @@index([phone_number], map: "phone_number")
}

model phone_crypto {
  id       String @db.VarChar(100)
  coin     String @db.VarChar(15)
  amount   Float  @default(0)
  invested Int    @default(0)

  @@id([id, coin])
}

model phone_darkchat_accounts {
  phone_number String @db.VarChar(15)
  username     String @id @db.VarChar(20)
  password     String @db.VarChar(100)

  @@index([phone_number], map: "phone_number")
}

model phone_darkchat_channels {
  name String @id @db.VarChar(50)
}

model phone_darkchat_members {
  channel_name String @db.VarChar(50)
  username     String @db.VarChar(20)

  @@id([channel_name, username])
  @@index([username], map: "username")
}

model phone_darkchat_messages {
  id        Int      @id @default(autoincrement())
  channel   String   @db.VarChar(50)
  sender    String   @db.VarChar(20)
  content   String?  @db.VarChar(1000)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@index([channel], map: "channel")
  @@index([sender], map: "sender")
}

model phone_instagram_accounts {
  display_name    String   @db.VarChar(30)
  username        String   @id @db.VarChar(20)
  password        String   @db.VarChar(100)
  profile_image   String?  @db.VarChar(500)
  bio             String?  @db.VarChar(100)
  post_count      Int      @default(0)
  story_count     Int      @default(0)
  follower_count  Int      @default(0)
  following_count Int      @default(0)
  phone_number    String   @db.VarChar(15)
  private         Boolean? @default(false)
  verified        Boolean? @default(false)
  date_joined     DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_instagram_comments {
  id         String   @id @db.VarChar(10)
  post_id    String   @db.VarChar(50)
  username   String   @db.VarChar(20)
  comment    String   @default("") @db.VarChar(500)
  like_count Int      @default(0)
  timestamp  DateTime @default(now()) @db.Timestamp(0)

  @@index([post_id], map: "post_id")
  @@index([username], map: "username")
}

model phone_instagram_follow_requests {
  requester String   @db.VarChar(20)
  requestee String   @db.VarChar(20)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@id([requester, requestee])
  @@index([requestee], map: "requestee")
}

model phone_instagram_follows {
  followed String @db.VarChar(20)
  follower String @db.VarChar(20)

  @@id([followed, follower])
  @@index([follower], map: "follower")
}

model phone_instagram_likes {
  id         String  @db.VarChar(10)
  username   String  @db.VarChar(20)
  is_comment Boolean @default(false)

  @@id([id, username])
  @@index([username], map: "username")
}

model phone_instagram_messages {
  id          String   @id @db.VarChar(10)
  sender      String   @db.VarChar(20)
  recipient   String   @db.VarChar(20)
  content     String?  @db.VarChar(1000)
  attachments String?  @db.Text
  timestamp   DateTime @default(now()) @db.Timestamp(0)

  @@index([recipient], map: "recipient")
  @@index([sender], map: "sender")
}

model phone_instagram_notifications {
  id        String   @id @db.VarChar(10)
  username  String   @db.VarChar(20)
  from      String   @db.VarChar(20)
  type      String   @db.VarChar(20)
  post_id   String?  @db.VarChar(50)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@index([from], map: "from")
  @@index([username], map: "username")
}

model phone_instagram_posts {
  id            String   @id @db.VarChar(10)
  media         String?  @db.Text
  caption       String   @default("") @db.VarChar(500)
  location      String?  @db.VarChar(50)
  like_count    Int      @default(0)
  comment_count Int      @default(0)
  username      String   @db.VarChar(20)
  timestamp     DateTime @default(now()) @db.Timestamp(0)

  @@index([username], map: "username")
}

model phone_instagram_stories {
  id        String   @id @db.VarChar(10)
  username  String   @db.VarChar(20)
  image     String   @db.VarChar(500)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@index([username], map: "username")
}

model phone_instagram_stories_views {
  story_id  String   @db.VarChar(50)
  viewer    String   @db.VarChar(20)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@id([story_id, viewer])
  @@index([viewer], map: "viewer")
}

model phone_last_phone {
  id           String @id @db.VarChar(100)
  phone_number String @db.VarChar(15)

  @@index([phone_number], map: "phone_number")
}

model phone_logged_in_accounts {
  phone_number String  @db.VarChar(15)
  app          String  @db.VarChar(50)
  username     String  @db.VarChar(100)
  active       Boolean @default(false)

  @@id([phone_number, app, username])
}

model phone_mail_accounts {
  address  String @id @db.VarChar(100)
  password String @db.VarChar(100)
}

model phone_mail_deleted {
  message_id Int    @db.UnsignedInt
  address    String @db.VarChar(100)

  @@id([message_id, address])
  @@index([address], map: "address")
}

model phone_mail_messages {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  recipient   String   @db.VarChar(100)
  sender      String   @db.VarChar(100)
  subject     String   @db.VarChar(100)
  content     String   @db.Text
  attachments String?  @db.LongText
  actions     String?  @db.LongText
  read        Boolean  @default(false)
  timestamp   DateTime @default(now()) @db.Timestamp(0)
}

model phone_maps_locations {
  id           Int    @id @default(autoincrement()) @db.UnsignedInt
  phone_number String @db.VarChar(15)
  name         String @db.VarChar(50)
  x_pos        Float  @db.Float
  y_pos        Float  @db.Float

  @@index([phone_number], map: "phone_number")
}

model phone_marketplace_posts {
  id           Int      @id @default(autoincrement())
  phone_number String   @db.VarChar(15)
  title        String   @db.VarChar(50)
  description  String   @db.VarChar(1000)
  attachments  String?  @db.Text
  price        Int
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_message_channels {
  id                     Int      @id @default(autoincrement())
  is_group               Boolean  @default(false)
  name                   String?  @db.VarChar(50)
  last_message           String   @default("") @db.VarChar(50)
  last_message_timestamp DateTime @default(now()) @db.Timestamp(0)
}

model phone_message_members {
  channel_id   Int
  phone_number String  @db.VarChar(15)
  is_owner     Boolean @default(false)
  deleted      Boolean @default(false)
  unread       Int     @default(0)

  @@id([channel_id, phone_number])
}

model phone_message_messages {
  id          Int      @id @default(autoincrement())
  channel_id  Int
  sender      String   @db.VarChar(15)
  content     String?  @db.VarChar(1000)
  attachments String?  @db.Text
  timestamp   DateTime @default(now()) @db.Timestamp(0)

  @@index([channel_id], map: "channel_id")
}

model phone_music_playlists {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  phone_number String  @db.VarChar(15)
  name         String  @db.VarChar(50)
  cover        String? @db.VarChar(500)

  @@index([phone_number], map: "phone_number")
}

model phone_music_saved_playlists {
  playlist_id  Int    @db.UnsignedInt
  phone_number String @db.VarChar(15)

  @@id([playlist_id, phone_number])
  @@index([phone_number], map: "phone_number")
}

model phone_music_songs {
  song_id     String @db.VarChar(100)
  playlist_id Int    @db.UnsignedInt

  @@id([song_id, playlist_id])
  @@index([playlist_id], map: "playlist_id")
}

model phone_notes {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  phone_number String   @db.VarChar(15)
  title        String   @db.VarChar(50)
  content      String?  @db.LongText
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_notifications {
  id           Int      @id @default(autoincrement())
  phone_number String   @db.VarChar(15)
  app          String   @db.VarChar(50)
  title        String?  @db.VarChar(50)
  content      String?  @db.VarChar(500)
  thumbnail    String?  @db.VarChar(500)
  avatar       String?  @db.VarChar(500)
  show_avatar  Boolean? @default(false)
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_phone_blocked_numbers {
  phone_number   String @db.VarChar(15)
  blocked_number String @db.VarChar(15)

  @@id([phone_number, blocked_number])
}

model phone_phone_calls {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  caller         String   @db.VarChar(15)
  callee         String   @db.VarChar(15)
  duration       Int      @default(0)
  answered       Boolean? @default(false)
  hide_caller_id Boolean? @default(false)
  timestamp      DateTime @default(now()) @db.Timestamp(0)
}

model phone_phone_contacts {
  contact_phone_number String   @db.VarChar(15)
  firstname            String   @default("") @db.VarChar(50)
  lastname             String   @default("") @db.VarChar(50)
  profile_image        String?  @db.VarChar(500)
  email                String?  @db.VarChar(50)
  address              String?  @db.VarChar(50)
  favourite            Boolean? @default(false)
  phone_number         String   @db.VarChar(15)

  @@id([contact_phone_number, phone_number])
}

model phone_phone_voicemail {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  caller         String   @db.VarChar(15)
  callee         String   @db.VarChar(15)
  url            String   @db.VarChar(500)
  duration       Int
  hide_caller_id Boolean? @default(false)
  timestamp      DateTime @default(now()) @db.Timestamp(0)
}

model phone_phones {
  id           Int      @id @default(0)
  owner_id     String   @default("0") @db.VarChar(100)
  phone_number String   @unique(map: "phone_number") @db.VarChar(15)
  name         String?  @db.VarChar(50)
  pin          String?  @db.VarChar(4)
  face_id      String?  @db.VarChar(100)
  settings     String?  @db.LongText
  is_setup     Boolean? @default(false)
  assigned     Boolean? @default(false)
  battery      Int      @default(100)
}

model phone_photo_album_photos {
  album_id Int
  photo_id Int

  @@id([album_id, photo_id])
  @@index([photo_id], map: "photo_id")
}

model phone_photo_albums {
  id           Int    @id @default(autoincrement())
  phone_number String @db.VarChar(15)
  title        String @db.VarChar(100)

  @@index([phone_number], map: "phone_number")
}

model phone_photos {
  id           Int      @id @default(autoincrement())
  phone_number String   @db.VarChar(15)
  link         String   @db.VarChar(500)
  is_video     Boolean? @default(false)
  size         Float    @default(0) @db.Float
  metadata     String?  @db.VarChar(20)
  is_favourite Boolean? @default(false)
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_services_channels {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  phone_number String   @db.VarChar(15)
  company      String   @db.VarChar(50)
  last_message String?  @db.VarChar(100)
  timestamp    DateTime @default(now()) @db.Timestamp(0)
}

model phone_services_messages {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  channel_id Int      @db.UnsignedInt
  sender     String   @db.VarChar(15)
  message    String   @db.VarChar(1000)
  x_pos      Int?
  y_pos      Int?
  timestamp  DateTime @default(now()) @db.Timestamp(0)

  @@index([channel_id], map: "channel_id")
}

model phone_tiktok_accounts {
  name            String   @db.VarChar(30)
  bio             String?  @db.VarChar(100)
  avatar          String?  @db.VarChar(500)
  username        String   @id @db.VarChar(20)
  password        String   @db.VarChar(100)
  verified        Boolean? @default(false)
  follower_count  Int      @default(0)
  following_count Int      @default(0)
  like_count      Int      @default(0)
  video_count     Int      @default(0)
  twitter         String?  @db.VarChar(20)
  instagram       String?  @db.VarChar(20)
  show_likes      Boolean? @default(true)
  phone_number    String   @db.VarChar(15)
  date_joined     DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_tiktok_channels {
  id           String   @id @db.VarChar(10)
  last_message String   @db.VarChar(50)
  member_1     String   @db.VarChar(20)
  member_2     String   @db.VarChar(20)
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@unique([member_1, member_2], map: "member_1")
  @@index([member_2], map: "member_2")
}

model phone_tiktok_comments {
  id        String   @id @db.VarChar(10)
  reply_to  String?  @db.VarChar(10)
  video_id  String   @db.VarChar(10)
  username  String   @db.VarChar(20)
  comment   String   @db.VarChar(550)
  likes     Int      @default(0)
  replies   Int      @default(0)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@index([reply_to], map: "reply_to")
  @@index([username], map: "username")
  @@index([video_id], map: "video_id")
}

model phone_tiktok_comments_likes {
  username   String @db.VarChar(20)
  comment_id String @db.VarChar(10)

  @@id([username, comment_id])
  @@index([comment_id], map: "comment_id")
}

model phone_tiktok_follows {
  followed String @db.VarChar(20)
  follower String @db.VarChar(20)

  @@id([followed, follower])
  @@index([follower], map: "follower")
}

model phone_tiktok_likes {
  username String @db.VarChar(20)
  video_id String @db.VarChar(10)

  @@id([username, video_id])
  @@index([video_id], map: "video_id")
}

model phone_tiktok_messages {
  id         String   @id @db.VarChar(10)
  channel_id String   @db.VarChar(10)
  sender     String   @db.VarChar(20)
  content    String   @db.VarChar(500)
  timestamp  DateTime @default(now()) @db.Timestamp(0)

  @@index([channel_id], map: "channel_id")
  @@index([sender], map: "sender")
}

model phone_tiktok_notifications {
  id         Int      @id @default(autoincrement())
  username   String   @db.VarChar(20)
  from       String   @db.VarChar(20)
  type       String   @db.VarChar(20)
  video_id   String?  @db.VarChar(10)
  comment_id String?  @db.VarChar(10)
  timestamp  DateTime @default(now()) @db.Timestamp(0)

  @@index([comment_id], map: "comment_id")
  @@index([from], map: "from")
  @@index([username], map: "username")
  @@index([video_id], map: "video_id")
}

model phone_tiktok_pinned_videos {
  username String @db.VarChar(20)
  video_id String @db.VarChar(10)

  @@id([username, video_id])
  @@index([video_id], map: "video_id")
}

model phone_tiktok_saves {
  username String @db.VarChar(20)
  video_id String @db.VarChar(10)

  @@id([username, video_id])
  @@index([video_id], map: "video_id")
}

model phone_tiktok_unread_messages {
  username   String @db.VarChar(20)
  channel_id String @db.VarChar(10)
  amount     Int    @default(0)

  @@id([username, channel_id])
  @@index([channel_id], map: "channel_id")
}

model phone_tiktok_videos {
  id             String   @id @db.VarChar(10)
  username       String   @db.VarChar(20)
  src            String   @db.VarChar(500)
  caption        String?  @db.VarChar(100)
  metadata       String?  @db.LongText
  music          String?  @db.Text
  likes          Int      @default(0)
  comments       Int      @default(0)
  views          Int      @default(0)
  saves          Int      @default(0)
  pinned_comment String?  @db.VarChar(10)
  timestamp      DateTime @default(now()) @db.Timestamp(0)

  @@index([username], map: "username")
}

model phone_tiktok_views {
  username String @db.VarChar(20)
  video_id String @db.VarChar(10)

  @@id([username, video_id])
  @@index([video_id], map: "video_id")
}

model phone_tinder_accounts {
  name             String   @db.VarChar(50)
  phone_number     String   @id @db.VarChar(15)
  photos           String?  @db.Text
  bio              String?  @db.VarChar(500)
  dob              DateTime @db.Date
  is_male          Boolean
  interested_men   Boolean
  interested_women Boolean
  active           Boolean  @default(true)
}

model phone_tinder_matches {
  phone_number_1           String    @db.VarChar(15)
  phone_number_2           String    @db.VarChar(15)
  latest_message           String?   @db.VarChar(1000)
  latest_message_timestamp DateTime? @db.Timestamp(0)

  @@id([phone_number_1, phone_number_2])
  @@index([phone_number_2], map: "phone_number_2")
}

model phone_tinder_messages {
  id          Int      @id @default(autoincrement())
  sender      String   @db.VarChar(15)
  recipient   String   @db.VarChar(15)
  content     String?  @db.VarChar(1000)
  attachments String?  @db.Text
  timestamp   DateTime @default(now()) @db.Timestamp(0)

  @@index([recipient], map: "recipient")
  @@index([sender], map: "sender")
}

model phone_tinder_swipes {
  swiper String  @db.VarChar(15)
  swipee String  @db.VarChar(15)
  liked  Boolean @default(false)

  @@id([swiper, swipee])
  @@index([swipee], map: "swipee")
}

model phone_twitter_accounts {
  display_name    String   @db.VarChar(30)
  username        String   @id @db.VarChar(20)
  password        String   @db.VarChar(100)
  phone_number    String   @db.VarChar(15)
  bio             String?  @db.VarChar(100)
  profile_image   String?  @db.VarChar(500)
  profile_header  String?  @db.VarChar(500)
  pinned_tweet    String?  @db.VarChar(50)
  verified        Boolean? @default(false)
  follower_count  Int      @default(0)
  following_count Int      @default(0)
  private         Boolean? @default(false)
  date_joined     DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_twitter_follow_requests {
  requester String   @db.VarChar(20)
  requestee String   @db.VarChar(20)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@id([requester, requestee])
  @@index([requestee], map: "requestee")
}

model phone_twitter_follows {
  followed      String  @db.VarChar(20)
  follower      String  @db.VarChar(20)
  notifications Boolean @default(false)

  @@id([followed, follower])
  @@index([follower], map: "follower")
}

model phone_twitter_hashtags {
  hashtag   String   @id @db.VarChar(50)
  amount    Int      @default(0)
  last_used DateTime @default(now()) @db.Timestamp(0)
}

model phone_twitter_likes {
  tweet_id  String   @db.VarChar(50)
  username  String   @db.VarChar(20)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@id([tweet_id, username])
  @@index([username], map: "username")
}

model phone_twitter_messages {
  id          String   @id @db.VarChar(10)
  sender      String   @db.VarChar(20)
  recipient   String   @db.VarChar(20)
  content     String?  @db.VarChar(1000)
  attachments String?  @db.Text
  timestamp   DateTime @default(now()) @db.Timestamp(0)

  @@index([recipient], map: "recipient")
  @@index([sender], map: "sender")
}

model phone_twitter_notifications {
  id        String   @id @db.VarChar(10)
  username  String   @db.VarChar(20)
  from      String   @db.VarChar(20)
  type      String   @db.VarChar(20)
  tweet_id  String?  @db.VarChar(50)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@index([from], map: "from")
  @@index([username], map: "username")
}

model phone_twitter_promoted {
  tweet_id   String @id @db.VarChar(50)
  promotions Int    @default(0)
  views      Int    @default(0)
}

model phone_twitter_retweets {
  tweet_id  String   @db.VarChar(50)
  username  String   @db.VarChar(20)
  timestamp DateTime @default(now()) @db.Timestamp(0)

  @@id([tweet_id, username])
  @@index([username], map: "username")
}

model phone_twitter_tweets {
  id            String   @id @db.VarChar(10)
  username      String   @db.VarChar(20)
  content       String?  @db.VarChar(280)
  attachments   String?  @db.Text
  reply_to      String?  @db.VarChar(50)
  like_count    Int?     @default(0)
  reply_count   Int?     @default(0)
  retweet_count Int?     @default(0)
  timestamp     DateTime @default(now()) @db.Timestamp(0)

  @@index([username], map: "username")
}

model phone_voice_memos_recordings {
  id           Int      @id @default(autoincrement())
  phone_number String   @db.VarChar(15)
  file_name    String   @db.VarChar(50)
  file_url     String   @db.VarChar(500)
  file_length  Int
  created_at   DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_wallet_transactions {
  id           Int      @id @default(autoincrement())
  phone_number String   @db.VarChar(15)
  amount       Int
  company      String   @db.VarChar(50)
  logo         String?  @db.VarChar(200)
  timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@index([phone_number], map: "phone_number")
}

model phone_yellow_pages_posts {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  phone_number String   @db.VarChar(15)
  title        String   @db.VarChar(50)
  description  String   @db.VarChar(1000)
  attachment   String?  @db.VarChar(500)
  price        Int?
  timestamp    DateTime @default(now()) @db.Timestamp(0)
}

model user {
  id       Int    @id @default(autoincrement())
  username String @unique(map: "IDX_78a916df40e02a9deb1c4b75ed") @db.VarChar(255)
  password String @db.VarChar(255)
  type     String @db.VarChar(255)
}

model vrp_dataitem_ids {
  id         Int      @id
  data       String   @db.LongText
  u_str      String?  @db.VarChar(255)
  created_at DateTime @db.DateTime(0)

  @@index([u_str], map: "u_str")
}

model vrp_srv_data {
  dkey   String  @id @db.VarChar(100)
  dvalue String? @db.Text
}

model vrp_titlebox_olduser {
  id         Int      @id @default(autoincrement())
  user_id    Int
  count      Int
  created_at DateTime @db.DateTime(0)

  @@index([user_id], map: "user_id")
}

model vrp_user_data {
  user_id         Int     @id
  inventory       String? @db.MediumText
  groups          String? @db.MediumText
  weapons         String? @db.MediumText
  health          Int?    @default(200)
  position        String? @db.VarChar(255)
  customization   String? @db.MediumText
  skinitem_skinid String? @db.VarChar(255)
  skinitem_idle   String? @db.MediumText
  mute            Int?
}

model vrp_user_identities {
  user_id      Int       @id
  registration String?   @db.VarChar(100)
  phone        String?   @db.VarChar(100)
  firstname    String?   @db.VarChar(100)
  name         String?   @db.VarChar(100)
  age          Int?
  car_seize    Int       @default(0)
  first        Int?      @default(0)
  first_join   DateTime? @db.DateTime(0)

  @@index([phone], map: "phone")
  @@index([registration], map: "registration")
}

model vrp_user_ids {
  identifier String   @id @db.VarChar(100)
  user_id    Int?
  banned     Boolean?

  @@index([user_id], map: "FK_vrp_user_ids_vrp_users")
}

model vrp_user_moneys {
  user_id  Int     @id
  wallet   Decimal @default(0) @db.Decimal(20, 0)
  bank     Decimal @default(0) @db.Decimal(20, 0)
  credit   Decimal @default(0) @db.Decimal(20, 0)
  credit2  Decimal @default(0) @db.Decimal(20, 0)
  exp      Decimal @default(0) @db.Decimal(20, 0)
  drug_exp Decimal @default(0) @db.Decimal(20, 0)
  exercise Decimal @default(0) @db.Decimal(20, 0)
  criminal Int     @default(0)
}

model vrp_user_vehicles {
  user_id       Int
  vehicle       String  @default("") @db.VarChar(100)
  vehicle_plate String  @default("") @db.VarChar(255)
  rented        Boolean @default(false)
  rentedid      String  @default("") @db.VarChar(200)
  rentedtime    String  @default("") @db.VarChar(2048)
  modifications String  @default("") @db.Text

  @@id([user_id, vehicle])
}

model vrp_users {
  id          Int      @id @default(autoincrement())
  last_login  String?  @db.VarChar(100)
  whitelisted Boolean?
  banned      Boolean?
  bantime     String   @default("") @db.VarChar(100)
  banreason   String   @default("") @db.VarChar(1000)
  banadmin    String   @default("") @db.VarChar(100)
}

enum dokku_incident_report_penalty_type {
  WARNING        @map("경고")
  GAME_BAN       @map("게임정지")
  VERBAL_WARNING @map("구두경고")
  BAN_RELEASE    @map("정지해제")
}
