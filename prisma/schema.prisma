generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

enum UserRole {
  STAFF
  INGAME_ADMIN
  MASTER
  SUPERMASTER

  @@map("user_role")
}

enum CouponGroupType {
  COMMON
  PUBLIC

  @@map("coupon_group_type")
}

enum CouponGroupStatus {
  INACTIVE
  ACTIVE
  EXPIRED

  @@map("coupon_group_status")
}

enum Status {
  CANCELLED
  PENDING
  REJECTED
  APPROVED

  @@map("status")
}

enum ActionType {
  ADD
  REMOVE

  @@map("action_type")
}

enum PenaltyType {
  WARNING  @map("경고")
  GAME_BAN @map("게임정지")
  VERBAL   @map("구두경고")
  UNBAN    @map("정지해제")

  @@map("penalty_type")
}

enum CreditType {
  MONEY
  BANK
  CREDIT
  CREDIT2
  CURRENT_COIN

  @@map("credit_type")
}

enum RewardRevokeCreditType {
  MONEY
  BANK
  CREDIT
  CREDIT2
  ITEM
  CURRENT_COIN

  @@map("reward_revoke_credit_type")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  hashedPassword String?   @map("password")
  email          String?   @unique
  userId         Int       @unique @map("user_id")
  emailVerified  DateTime? @map("email_verified")
  nickname       String
  image          String?
  role           UserRole  @default(STAFF)
  isPermissive   Boolean   @default(false) @map("is_permissive")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  accounts              Account[]
  sessions              Session[]
  accountUsingQuerylogs AccountUsingQuerylog[]
  groupMails            GroupMail[]
  personalMails         PersonalMail[]

  registeredItemQuantities ItemQuantity[] @relation("ItemQuantityRegistrant")
  approvedItemQuantities   ItemQuantity[] @relation("ItemQuantityApprover")

  registeredBlockTickets BlockTicket[] @relation("BlockTicketRegistrant")
  approvedBlockTickets   BlockTicket[] @relation("BlockTicketApprover")

  registeredRewardRevokes RewardRevoke[] @relation("RewardRevokeRegistrant")
  approvedRewardRevokes   RewardRevoke[] @relation("RewardRevokeApprover")

  boards          Board[]
  boardCategories BoardCategory[]
  boardComments   BoardComment[]
  boardLikes      BoardLike[]

  attendanceRecords AttendanceRecord[]

  @@map("user")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_token")
}

model GroupMail {
  id           String   @id @default(uuid())
  reason       String
  content      String
  rewards      Json[]
  startDate    DateTime @map("start_date")
  endDate      DateTime @map("end_date")
  registrantId String?  @map("registrant_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  registrant   User?    @relation(fields: [registrantId], references: [id], onDelete: SetNull)

  @@map("group_mail")
}

model PersonalMail {
  id           String   @id @default(uuid())
  userId       Int      @map("user_id")
  reason       String
  content      String
  rewards      Json[]
  registrantId String?  @map("registrant_id")
  needItems    Json[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  registrant   User?    @relation(fields: [registrantId], references: [id], onDelete: SetNull)

  @@map("personal_mail")
}

model CouponGroup {
  id          String            @id @default(uuid())
  groupName   String            @unique @map("group_name")
  groupType   CouponGroupType   @default(COMMON) @map("group_type")
  rewards     Json              @default("[]")
  code        String?           @map("coupon_code") @db.VarChar(10)
  isIssued    Boolean           @default(false) @map("is_issued")
  usageLimit  Int?              @default(1) @map("usage_limit")
  groupReason String            @map("group_reason")
  groupStatus CouponGroupStatus @default(INACTIVE) @map("group_status")
  quantity    Int
  startDate   DateTime          @map("start_date")
  endDate     DateTime          @map("end_date")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  coupons     Coupon[]

  @@map("coupon_group")
}

model Coupon {
  id            String       @id @default(uuid())
  rewards       Json         @default("[]")
  isUsed        Boolean      @default(false) @map("is_used")
  code          String?      @map("coupon_code") @db.VarChar(10)
  couponGroupId String?      @map("coupon_group_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  couponGroup   CouponGroup? @relation(fields: [couponGroupId], references: [id], onDelete: Cascade)
  couponLogs    CouponLog[]

  @@map("coupon")
}

model CouponLog {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  nickname  String
  couponId  String?  @map("coupon_id")
  usedAt    DateTime @default(now()) @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  coupon    Coupon?  @relation(fields: [couponId], references: [id])

  @@map("coupon_log")
}

model ItemQuantity {
  id           String     @id @default(uuid())
  userId       Int        @map("user_id")
  nickname String @default("")
  itemId       String     @map("item_id")
  itemName     String     @map("item_name")
  reason       String     @map("reason")
  amount       String     @map("quantity")
  type         ActionType @default(ADD)
  status       Status     @default(PENDING)
  registrantId String?    @map("registrant_id")
  approverId   String?    @map("approver_id")
  isApproved   Boolean    @default(false) @map("is_approved")
  approvedAt   DateTime?  @map("approved_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  registrant   User?      @relation("ItemQuantityRegistrant", fields: [registrantId], references: [id], onDelete: SetNull)
  approver     User?      @relation("ItemQuantityApprover", fields: [approverId], references: [id], onDelete: SetNull)

  @@index([status, createdAt(sort: Desc)], name: "idx_item_quantity_status_created")
  @@index([registrantId], name: "idx_item_quantity_registrant")
  @@index([approverId], name: "idx_item_quantity_approver")
  @@index([userId], name: "idx_item_quantity_user")
  @@index([status, approvedAt], name: "idx_item_quantity_status_approved")

  @@map("item_quantity")
}

model RewardRevoke {
  id           String                 @id @default(uuid())
  userId       Int                    @map("user_id")
  reason       String                 @map("reason")
  nickname String @default("")
  amount       String
  status       Status                 @default(PENDING)
  type         ActionType
  creditType   RewardRevokeCreditType
  registrantId String?                @map("registrant_id")
  approverId   String?                @map("approver_id")
  isApproved   Boolean                @default(false) @map("is_approved")
  approvedAt   DateTime?              @map("approved_at")
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  registrant   User?                  @relation("RewardRevokeRegistrant", fields: [registrantId], references: [id], onDelete: SetNull)
  approver     User?                  @relation("RewardRevokeApprover", fields: [approverId], references: [id], onDelete: SetNull)

  @@index([status, createdAt(sort: Desc)], name: "idx_reward_revoke_status_created")
  @@index([userId, createdAt(sort: Desc)], name: "idx_reward_revoke_user_created")
  @@index([registrantId], name: "idx_reward_revoke_registrant")
  @@index([approverId], name: "idx_reward_revoke_approver")
  @@index([creditType, status], name: "idx_reward_revoke_type_status")
  @@index([status, approvedAt], name: "idx_reward_revoke_status_approved")

  @@map("reward_revoke")
}

model Items {
  id        String   @id @default(uuid())
  itemId    String   @unique @map("item_id")
  itemName  String   @map("item_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([itemName], name: "idx_items_name")
  @@map("items")
}

model Groups {
  id           String   @id @default(uuid())
  groupId      String   @unique @map("group_id")
  groupBoolean Boolean  @map("group_boolean")
  minRole      UserRole @default(STAFF) @map("min_role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([minRole], name: "idx_groups_role")
  @@map("groups")
}


model BlockTicket {
  id           String    @id @default(uuid())
  reportId     Int       @map("report_id")
  status       Status    @default(PENDING)
  registrantId String?   @map("registrant_id")
  approverId   String?   @map("approver_id")
  isApproved   Boolean   @default(false) @map("is_approved")
  approvedAt   DateTime? @map("approved_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  registrant   User?     @relation("BlockTicketRegistrant", fields: [registrantId], references: [id], onDelete: SetNull)
  approver     User?     @relation("BlockTicketApprover", fields: [approverId], references: [id], onDelete: SetNull)

  @@index([status, createdAt(sort: Desc)], name: "idx_block_ticket_status_created")
  @@index([registrantId], name: "idx_block_ticket_registrant")
  @@index([approverId], name: "idx_block_ticket_approver")
  @@index([reportId], name: "idx_block_ticket_report")
  @@index([status, approvedAt], name: "idx_block_ticket_status_approved")

  @@map("block_ticket")
}

model Board {
  id           String         @id @default(uuid())
  title        String
  content      Json
  categoryId   String        @map("category_id")
  views        Int            @default(0)
  registrantId String        @map("registrant_id")
  isNotice     Boolean        @default(false) @map("is_notice")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  registrant   User           @relation(fields: [registrantId], references: [id], onDelete: Cascade)
  category     BoardCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments     BoardComment[]
  likes        BoardLike[]

  @@index([categoryId, createdAt(sort: Desc)], name: "idx_board_category_date")
  @@index([isNotice, createdAt(sort: Desc)], name: "idx_board_notice_date")
  @@index([registrantId], name: "idx_board_registrant")
  @@map("board")
}

model BoardComment {
  id           String   @id @default(uuid())
  content      String
  boardId      String   @map("board_id")
  registrantId String   @map("registrant_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  board        Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  registrant   User     @relation(fields: [registrantId], references: [id], onDelete: Cascade)

  @@index([boardId, createdAt(sort: Desc)], name: "idx_comment_board_date")
  @@index([registrantId], name: "idx_comment_registrant")
  @@map("board_comment")
}

model AccountUsingQuerylog {
  id           String   @id @default(uuid())
  content      String
  registrantId String?  @map("registrant_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  registrant   User?    @relation(fields: [registrantId], references: [id], onDelete: SetNull)

  @@map("account_using_querylog")
}

model BoardCategory {
  id           String      @id @default(uuid())
  name         String      @unique
  registrantId String?     @map("registrant_id")
  template     Json?       @map("template")
  isUsed       Boolean     @default(false) @map("is_used")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  boards       Board[]
  role         UserRole?   @map("role")
  roles        UserRole[]  @map("roles")
  registrant   User?       @relation(fields: [registrantId], references: [id], onDelete: SetNull)

  @@index([isUsed, role], name: "idx_category_used_role")
  @@index([isUsed, roles], name: "idx_category_used_roles")
  @@index([registrantId], name: "idx_category_registrant")
  @@map("board_category")
}

model BoardLike {
  id        String   @id @default(uuid())
  boardId   String   @map("board_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@index([userId], name: "idx_like_user")
  @@map("board_like")
}

model AttendanceRecord {
  id           String    @id @default(uuid())
  userNumericId Int      @map("user_id")
  user         User      @relation(fields: [userNumericId], references: [userId], onDelete: Cascade)

  checkInTime  DateTime  @map("check_in_time") @db.Timestamp(6)
  checkOutTime DateTime? @map("check_out_time") @db.Timestamp(6)

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([userNumericId, checkInTime(sort: Desc)])
  @@map("attendance_record")
}
